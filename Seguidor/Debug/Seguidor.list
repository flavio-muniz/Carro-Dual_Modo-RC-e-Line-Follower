
Seguidor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b44c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800b5e0  0800b5e0  0000c5e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba3c  0800ba3c  0000d230  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ba3c  0800ba3c  0000ca3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba44  0800ba44  0000d230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba44  0800ba44  0000ca44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ba48  0800ba48  0000ca48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000230  20000000  0800ba4c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000470c  20000230  0800bc7c  0000d230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000493c  0800bc7c  0000d93c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d230  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c21f  00000000  00000000  0000d260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b66  00000000  00000000  0002947f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b0  00000000  00000000  0002cfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000132d  00000000  00000000  0002e898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b943  00000000  00000000  0002fbc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b5ea  00000000  00000000  0005b508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001107f5  00000000  00000000  00076af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001872e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079e0  00000000  00000000  0018732c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0018ed0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b5c4 	.word	0x0800b5c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	0800b5c4 	.word	0x0800b5c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4a07      	ldr	r2, [pc, #28]	@ (8000f00 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ee4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	4a06      	ldr	r2, [pc, #24]	@ (8000f04 <vApplicationGetIdleTaskMemory+0x30>)
 8000eea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2280      	movs	r2, #128	@ 0x80
 8000ef0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	2000024c 	.word	0x2000024c
 8000f04:	200002ec 	.word	0x200002ec

08000f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f08:	b5b0      	push	{r4, r5, r7, lr}
 8000f0a:	b08a      	sub	sp, #40	@ 0x28
 8000f0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0e:	f001 f925 	bl	800215c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f12:	f000 f84d 	bl	8000fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f16:	f000 f9a7 	bl	8001268 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f1a:	f000 f975 	bl	8001208 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f1e:	f000 f90f 	bl	8001140 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000f22:	f000 f897 	bl	8001054 <MX_ADC1_Init>
  motor_init();
 8000f26:	f000 fcc5 	bl	80018b4 <motor_init>
  modo_event_group = xEventGroupCreate();
 8000f2a:	f006 f94f 	bl	80071cc <xEventGroupCreate>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4a18      	ldr	r2, [pc, #96]	@ (8000f94 <main+0x8c>)
 8000f32:	6013      	str	r3, [r2, #0]
  xEventGroupSetBits(modo_event_group, MODO_RC); // começa no modo RC
 8000f34:	4b17      	ldr	r3, [pc, #92]	@ (8000f94 <main+0x8c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2101      	movs	r1, #1
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f006 f999 	bl	8007272 <xEventGroupSetBits>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000f40:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <main+0x90>)
 8000f42:	1d3c      	adds	r4, r7, #4
 8000f44:	461d      	mov	r5, r3
 8000f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f006 f8d8 	bl	800710c <osThreadCreate>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f9c <main+0x94>)
 8000f60:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  //xTaskCreate(testsens, "testando sensores", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
  //xTaskCreate(testcent, "testando centroide", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
  //xTaskCreate(blinkTaskFcn, "Task1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
  //xTaskCreate(sensores, "sensors", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
  xTaskCreate(motores, "startEngines", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 8000f62:	2300      	movs	r3, #0
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	2300      	movs	r3, #0
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	2280      	movs	r2, #128	@ 0x80
 8000f6e:	490c      	ldr	r1, [pc, #48]	@ (8000fa0 <main+0x98>)
 8000f70:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <main+0x9c>)
 8000f72:	f006 fb1e 	bl	80075b2 <xTaskCreate>
  xTaskCreate(controle_carro, "modoRC", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 8000f76:	2300      	movs	r3, #0
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	2280      	movs	r2, #128	@ 0x80
 8000f82:	4909      	ldr	r1, [pc, #36]	@ (8000fa8 <main+0xa0>)
 8000f84:	4809      	ldr	r0, [pc, #36]	@ (8000fac <main+0xa4>)
 8000f86:	f006 fb14 	bl	80075b2 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f8a:	f006 f8b8 	bl	80070fe <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f8e:	bf00      	nop
 8000f90:	e7fd      	b.n	8000f8e <main+0x86>
 8000f92:	bf00      	nop
 8000f94:	200004ec 	.word	0x200004ec
 8000f98:	0800b604 	.word	0x0800b604
 8000f9c:	20000630 	.word	0x20000630
 8000fa0:	0800b5e0 	.word	0x0800b5e0
 8000fa4:	08001919 	.word	0x08001919
 8000fa8:	0800b5f0 	.word	0x0800b5f0
 8000fac:	08001431 	.word	0x08001431

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b096      	sub	sp, #88	@ 0x58
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	2244      	movs	r2, #68	@ 0x44
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f008 f9d5 	bl	800936e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fd2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fd6:	f002 fe07 	bl	8003be8 <HAL_PWREx_ControlVoltageScaling>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fe0:	f000 fdbc 	bl	8001b5c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fee:	2310      	movs	r3, #16
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ffe:	230a      	movs	r3, #10
 8001000:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001002:	2307      	movs	r3, #7
 8001004:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001006:	2302      	movs	r3, #2
 8001008:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800100a:	2302      	movs	r3, #2
 800100c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4618      	mov	r0, r3
 8001014:	f002 fe3e 	bl	8003c94 <HAL_RCC_OscConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800101e:	f000 fd9d 	bl	8001b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001022:	230f      	movs	r3, #15
 8001024:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001026:	2303      	movs	r3, #3
 8001028:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001036:	463b      	mov	r3, r7
 8001038:	2104      	movs	r1, #4
 800103a:	4618      	mov	r0, r3
 800103c:	f003 fa06 	bl	800444c <HAL_RCC_ClockConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001046:	f000 fd89 	bl	8001b5c <Error_Handler>
  }
}
 800104a:	bf00      	nop
 800104c:	3758      	adds	r7, #88	@ 0x58
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	@ 0x28
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
 8001074:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001076:	4b2f      	ldr	r3, [pc, #188]	@ (8001134 <MX_ADC1_Init+0xe0>)
 8001078:	4a2f      	ldr	r2, [pc, #188]	@ (8001138 <MX_ADC1_Init+0xe4>)
 800107a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800107c:	4b2d      	ldr	r3, [pc, #180]	@ (8001134 <MX_ADC1_Init+0xe0>)
 800107e:	2200      	movs	r2, #0
 8001080:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001082:	4b2c      	ldr	r3, [pc, #176]	@ (8001134 <MX_ADC1_Init+0xe0>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001088:	4b2a      	ldr	r3, [pc, #168]	@ (8001134 <MX_ADC1_Init+0xe0>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800108e:	4b29      	ldr	r3, [pc, #164]	@ (8001134 <MX_ADC1_Init+0xe0>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001094:	4b27      	ldr	r3, [pc, #156]	@ (8001134 <MX_ADC1_Init+0xe0>)
 8001096:	2204      	movs	r2, #4
 8001098:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800109a:	4b26      	ldr	r3, [pc, #152]	@ (8001134 <MX_ADC1_Init+0xe0>)
 800109c:	2200      	movs	r2, #0
 800109e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010a0:	4b24      	ldr	r3, [pc, #144]	@ (8001134 <MX_ADC1_Init+0xe0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010a6:	4b23      	ldr	r3, [pc, #140]	@ (8001134 <MX_ADC1_Init+0xe0>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ac:	4b21      	ldr	r3, [pc, #132]	@ (8001134 <MX_ADC1_Init+0xe0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001134 <MX_ADC1_Init+0xe0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <MX_ADC1_Init+0xe0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <MX_ADC1_Init+0xe0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <MX_ADC1_Init+0xe0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010ce:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <MX_ADC1_Init+0xe0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d6:	4817      	ldr	r0, [pc, #92]	@ (8001134 <MX_ADC1_Init+0xe0>)
 80010d8:	f001 fa64 	bl	80025a4 <HAL_ADC_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80010e2:	f000 fd3b 	bl	8001b5c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	4619      	mov	r1, r3
 80010f0:	4810      	ldr	r0, [pc, #64]	@ (8001134 <MX_ADC1_Init+0xe0>)
 80010f2:	f002 f9e5 	bl	80034c0 <HAL_ADCEx_MultiModeConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010fc:	f000 fd2e 	bl	8001b5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001100:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <MX_ADC1_Init+0xe8>)
 8001102:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001104:	2306      	movs	r3, #6
 8001106:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800110c:	237f      	movs	r3, #127	@ 0x7f
 800110e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001110:	2304      	movs	r3, #4
 8001112:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	@ (8001134 <MX_ADC1_Init+0xe0>)
 800111e:	f001 fd31 	bl	8002b84 <HAL_ADC_ConfigChannel>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001128:	f000 fd18 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	3728      	adds	r7, #40	@ 0x28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200004f0 	.word	0x200004f0
 8001138:	50040000 	.word	0x50040000
 800113c:	04300002 	.word	0x04300002

08001140 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	@ 0x28
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001152:	463b      	mov	r3, r7
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
 8001160:	615a      	str	r2, [r3, #20]
 8001162:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001164:	4b26      	ldr	r3, [pc, #152]	@ (8001200 <MX_TIM3_Init+0xc0>)
 8001166:	4a27      	ldr	r2, [pc, #156]	@ (8001204 <MX_TIM3_Init+0xc4>)
 8001168:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800116a:	4b25      	ldr	r3, [pc, #148]	@ (8001200 <MX_TIM3_Init+0xc0>)
 800116c:	2247      	movs	r2, #71	@ 0x47
 800116e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001170:	4b23      	ldr	r3, [pc, #140]	@ (8001200 <MX_TIM3_Init+0xc0>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001176:	4b22      	ldr	r3, [pc, #136]	@ (8001200 <MX_TIM3_Init+0xc0>)
 8001178:	2263      	movs	r2, #99	@ 0x63
 800117a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117c:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <MX_TIM3_Init+0xc0>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001182:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <MX_TIM3_Init+0xc0>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001188:	481d      	ldr	r0, [pc, #116]	@ (8001200 <MX_TIM3_Init+0xc0>)
 800118a:	f004 f943 	bl	8005414 <HAL_TIM_PWM_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001194:	f000 fce2 	bl	8001b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	4816      	ldr	r0, [pc, #88]	@ (8001200 <MX_TIM3_Init+0xc0>)
 80011a8:	f005 f878 	bl	800629c <HAL_TIMEx_MasterConfigSynchronization>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80011b2:	f000 fcd3 	bl	8001b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b6:	2360      	movs	r3, #96	@ 0x60
 80011b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c6:	463b      	mov	r3, r7
 80011c8:	2200      	movs	r2, #0
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <MX_TIM3_Init+0xc0>)
 80011ce:	f004 fb87 	bl	80058e0 <HAL_TIM_PWM_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80011d8:	f000 fcc0 	bl	8001b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011dc:	463b      	mov	r3, r7
 80011de:	2204      	movs	r2, #4
 80011e0:	4619      	mov	r1, r3
 80011e2:	4807      	ldr	r0, [pc, #28]	@ (8001200 <MX_TIM3_Init+0xc0>)
 80011e4:	f004 fb7c 	bl	80058e0 <HAL_TIM_PWM_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80011ee:	f000 fcb5 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011f2:	4803      	ldr	r0, [pc, #12]	@ (8001200 <MX_TIM3_Init+0xc0>)
 80011f4:	f000 fd6a 	bl	8001ccc <HAL_TIM_MspPostInit>

}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	@ 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000554 	.word	0x20000554
 8001204:	40000400 	.word	0x40000400

08001208 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800120c:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <MX_USART2_UART_Init+0x58>)
 800120e:	4a15      	ldr	r2, [pc, #84]	@ (8001264 <MX_USART2_UART_Init+0x5c>)
 8001210:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001212:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <MX_USART2_UART_Init+0x58>)
 8001214:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001218:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <MX_USART2_UART_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_USART2_UART_Init+0x58>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_USART2_UART_Init+0x58>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_USART2_UART_Init+0x58>)
 800122e:	220c      	movs	r2, #12
 8001230:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001232:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <MX_USART2_UART_Init+0x58>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001238:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_USART2_UART_Init+0x58>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800123e:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <MX_USART2_UART_Init+0x58>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_USART2_UART_Init+0x58>)
 8001246:	2200      	movs	r2, #0
 8001248:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800124a:	4805      	ldr	r0, [pc, #20]	@ (8001260 <MX_USART2_UART_Init+0x58>)
 800124c:	f005 f8cc 	bl	80063e8 <HAL_UART_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001256:	f000 fc81 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200005a0 	.word	0x200005a0
 8001264:	40004400 	.word	0x40004400

08001268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	@ 0x28
 800126c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	4b69      	ldr	r3, [pc, #420]	@ (8001424 <MX_GPIO_Init+0x1bc>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	4a68      	ldr	r2, [pc, #416]	@ (8001424 <MX_GPIO_Init+0x1bc>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128a:	4b66      	ldr	r3, [pc, #408]	@ (8001424 <MX_GPIO_Init+0x1bc>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001296:	4b63      	ldr	r3, [pc, #396]	@ (8001424 <MX_GPIO_Init+0x1bc>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	4a62      	ldr	r2, [pc, #392]	@ (8001424 <MX_GPIO_Init+0x1bc>)
 800129c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a2:	4b60      	ldr	r3, [pc, #384]	@ (8001424 <MX_GPIO_Init+0x1bc>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001424 <MX_GPIO_Init+0x1bc>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	4a5c      	ldr	r2, [pc, #368]	@ (8001424 <MX_GPIO_Init+0x1bc>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001424 <MX_GPIO_Init+0x1bc>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	4b57      	ldr	r3, [pc, #348]	@ (8001424 <MX_GPIO_Init+0x1bc>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	4a56      	ldr	r2, [pc, #344]	@ (8001424 <MX_GPIO_Init+0x1bc>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d2:	4b54      	ldr	r3, [pc, #336]	@ (8001424 <MX_GPIO_Init+0x1bc>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
 80012e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e8:	f002 fc3e 	bl	8003b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_5, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80012f2:	484d      	ldr	r0, [pc, #308]	@ (8001428 <MX_GPIO_Init+0x1c0>)
 80012f4:	f002 fc38 	bl	8003b68 <HAL_GPIO_WritePin>


  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012fe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	4847      	ldr	r0, [pc, #284]	@ (800142c <MX_GPIO_Init+0x1c4>)
 8001310:	f002 fa68 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_10;
 8001314:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 8001318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001330:	f002 fa58 	bl	80037e4 <HAL_GPIO_Init>
 //LD2_GPIO_Port

  /*Configure GPIO pins : PA0 PA1 PA4 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8001334:	23d3      	movs	r3, #211	@ 0xd3
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001338:	2300      	movs	r3, #0
 800133a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800133c:	2301      	movs	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800134a:	f002 fa4b 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800134e:	2350      	movs	r3, #80	@ 0x50
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001356:	2301      	movs	r3, #1
 8001358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	4832      	ldr	r0, [pc, #200]	@ (800142c <MX_GPIO_Init+0x1c4>)
 8001362:	f002 fa3f 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001366:	2302      	movs	r3, #2
 8001368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136e:	2301      	movs	r3, #1
 8001370:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	482b      	ldr	r0, [pc, #172]	@ (8001428 <MX_GPIO_Init+0x1c0>)
 800137a:	f002 fa33 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_5;
 800137e:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2301      	movs	r3, #1
 8001386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	4824      	ldr	r0, [pc, #144]	@ (8001428 <MX_GPIO_Init+0x1c0>)
 8001398:	f002 fa24 	bl	80037e4 <HAL_GPIO_Init>

  //motores
  // Configura pinos de direção como saída
  GPIO_InitStruct.Pin = MOTOR_L_IN1 | MOTOR_L_IN2;
 800139c:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 80013a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_L_PORT, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	481c      	ldr	r0, [pc, #112]	@ (8001428 <MX_GPIO_Init+0x1c0>)
 80013b6:	f002 fa15 	bl	80037e4 <HAL_GPIO_Init>

  // Configura pinos de direção como saída
  GPIO_InitStruct.Pin = MOTOR_R_IN1 | MOTOR_R_IN2;
 80013ba:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80013be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_R_PORT, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d6:	f002 fa05 	bl	80037e4 <HAL_GPIO_Init>

  // Configura pinos PWM como saída (opcional: configurar como PWM via Timer)
  GPIO_InitStruct.Pin = MOTOR_L_PWM;
 80013da:	2310      	movs	r3, #16
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;  // Se usar Timer PWM
 80013de:	2302      	movs	r3, #2
 80013e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e6:	2302      	movs	r3, #2
 80013e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;  // <-- IMPORTANTE!
 80013ea:	2302      	movs	r3, #2
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MOTOR_L_PORT, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	480c      	ldr	r0, [pc, #48]	@ (8001428 <MX_GPIO_Init+0x1c0>)
 80013f6:	f002 f9f5 	bl	80037e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = MOTOR_R_PWM;
 80013fa:	2380      	movs	r3, #128	@ 0x80
 80013fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;  // Se usar Timer PWM
 80013fe:	2302      	movs	r3, #2
 8001400:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001406:	2302      	movs	r3, #2
 8001408:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;  // <-- IMPORTANTE!
 800140a:	2302      	movs	r3, #2
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	@ (800142c <MX_GPIO_Init+0x1c4>)
 8001416:	f002 f9e5 	bl	80037e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800141a:	bf00      	nop
 800141c:	3728      	adds	r7, #40	@ 0x28
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	48000400 	.word	0x48000400
 800142c:	48000800 	.word	0x48000800

08001430 <controle_carro>:
/* USER CODE BEGIN 4 */

/*
 * MODO CONTROLE REMOTO
 */
void controle_carro(void *argument) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b094      	sub	sp, #80	@ 0x50
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	uint8_t ultimo_valor_pot = 255;
 8001438:	23ff      	movs	r3, #255	@ 0xff
 800143a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	char msgs[50];
    for (;;) {
        EventBits_t modo = xEventGroupGetBits(modo_event_group);
 800143e:	4b8f      	ldr	r3, [pc, #572]	@ (800167c <controle_carro+0x24c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f005 fedb 	bl	8007200 <xEventGroupClearBits>
 800144a:	64b8      	str	r0, [r7, #72]	@ 0x48
        if (modo & MODO_RC) {
 800144c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 810e 	beq.w	8001674 <controle_carro+0x244>
            // Aqui você processa comandos recebidos via UART2
            // Exemplo simples: se receber 'A', gira à esquerda
            char comando;
            int16_t potenciometro;
			HAL_ADC_Start(&hadc1);
 8001458:	4889      	ldr	r0, [pc, #548]	@ (8001680 <controle_carro+0x250>)
 800145a:	f001 f9f3 	bl	8002844 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800145e:	f04f 31ff 	mov.w	r1, #4294967295
 8001462:	4887      	ldr	r0, [pc, #540]	@ (8001680 <controle_carro+0x250>)
 8001464:	f001 faa8 	bl	80029b8 <HAL_ADC_PollForConversion>
			potenciometro = (uint8_t)(HAL_ADC_GetValue(&hadc1) * 100 / 3970);//normalizando o valor
 8001468:	4885      	ldr	r0, [pc, #532]	@ (8001680 <controle_carro+0x250>)
 800146a:	f001 fb7d 	bl	8002b68 <HAL_ADC_GetValue>
 800146e:	4603      	mov	r3, r0
 8001470:	2264      	movs	r2, #100	@ 0x64
 8001472:	fb02 f303 	mul.w	r3, r2, r3
 8001476:	4a83      	ldr	r2, [pc, #524]	@ (8001684 <controle_carro+0x254>)
 8001478:	fba2 2303 	umull	r2, r3, r2, r3
 800147c:	09db      	lsrs	r3, r3, #7
 800147e:	b2db      	uxtb	r3, r3
 8001480:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
			int var;
			var = potenciometro/5;
 8001484:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001488:	4a7f      	ldr	r2, [pc, #508]	@ (8001688 <controle_carro+0x258>)
 800148a:	fb82 1203 	smull	r1, r2, r2, r3
 800148e:	1052      	asrs	r2, r2, #1
 8001490:	17db      	asrs	r3, r3, #31
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	b21b      	sxth	r3, r3
 8001496:	643b      	str	r3, [r7, #64]	@ 0x40
			var*=5;
 8001498:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	643b      	str	r3, [r7, #64]	@ 0x40
			// Se o valor do potenciômetro mudou, imprime
			if ((var-5) < potenciometro && potenciometro < (var+5) && var != ultimo_valor_pot) {
 80014a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014a4:	1f1a      	subs	r2, r3, #4
 80014a6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 80014aa:	429a      	cmp	r2, r3
 80014ac:	dc21      	bgt.n	80014f2 <controle_carro+0xc2>
 80014ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014b0:	1d1a      	adds	r2, r3, #4
 80014b2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 80014b6:	429a      	cmp	r2, r3
 80014b8:	db1b      	blt.n	80014f2 <controle_carro+0xc2>
 80014ba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80014be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d016      	beq.n	80014f2 <controle_carro+0xc2>
				sprintf(msgs,"Velocidade: %d\n\r",var);
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80014ca:	4970      	ldr	r1, [pc, #448]	@ (800168c <controle_carro+0x25c>)
 80014cc:	4618      	mov	r0, r3
 80014ce:	f007 fee9 	bl	80092a4 <siprintf>
				HAL_UART_Transmit(&huart2, (char*)msgs, strlen(msgs), 100);
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe feca 	bl	8000270 <strlen>
 80014dc:	4603      	mov	r3, r0
 80014de:	b29a      	uxth	r2, r3
 80014e0:	f107 010c 	add.w	r1, r7, #12
 80014e4:	2364      	movs	r3, #100	@ 0x64
 80014e6:	486a      	ldr	r0, [pc, #424]	@ (8001690 <controle_carro+0x260>)
 80014e8:	f004 ffcc 	bl	8006484 <HAL_UART_Transmit>
				ultimo_valor_pot = var;
 80014ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014ee:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			}
            if (HAL_UART_Receive(&huart2, (uint8_t *)&comando, 1, 100) == HAL_OK) {
 80014f2:	f107 010b 	add.w	r1, r7, #11
 80014f6:	2364      	movs	r3, #100	@ 0x64
 80014f8:	2201      	movs	r2, #1
 80014fa:	4865      	ldr	r0, [pc, #404]	@ (8001690 <controle_carro+0x260>)
 80014fc:	f005 f84b 	bl	8006596 <HAL_UART_Receive>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	f040 80b6 	bne.w	8001674 <controle_carro+0x244>
                switch (comando) {
 8001508:	7afb      	ldrb	r3, [r7, #11]
 800150a:	3b41      	subs	r3, #65	@ 0x41
 800150c:	2b36      	cmp	r3, #54	@ 0x36
 800150e:	f200 80b1 	bhi.w	8001674 <controle_carro+0x244>
 8001512:	a201      	add	r2, pc, #4	@ (adr r2, 8001518 <controle_carro+0xe8>)
 8001514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001518:	0800161d 	.word	0x0800161d
 800151c:	08001675 	.word	0x08001675
 8001520:	08001675 	.word	0x08001675
 8001524:	08001631 	.word	0x08001631
 8001528:	0800164f 	.word	0x0800164f
 800152c:	0800165b 	.word	0x0800165b
 8001530:	08001675 	.word	0x08001675
 8001534:	08001675 	.word	0x08001675
 8001538:	08001675 	.word	0x08001675
 800153c:	08001675 	.word	0x08001675
 8001540:	08001675 	.word	0x08001675
 8001544:	08001675 	.word	0x08001675
 8001548:	08001675 	.word	0x08001675
 800154c:	08001675 	.word	0x08001675
 8001550:	08001675 	.word	0x08001675
 8001554:	08001675 	.word	0x08001675
 8001558:	08001645 	.word	0x08001645
 800155c:	08001675 	.word	0x08001675
 8001560:	08001607 	.word	0x08001607
 8001564:	08001675 	.word	0x08001675
 8001568:	08001675 	.word	0x08001675
 800156c:	08001675 	.word	0x08001675
 8001570:	080015f5 	.word	0x080015f5
 8001574:	08001675 	.word	0x08001675
 8001578:	08001675 	.word	0x08001675
 800157c:	08001675 	.word	0x08001675
 8001580:	08001675 	.word	0x08001675
 8001584:	08001675 	.word	0x08001675
 8001588:	08001675 	.word	0x08001675
 800158c:	08001675 	.word	0x08001675
 8001590:	08001675 	.word	0x08001675
 8001594:	08001675 	.word	0x08001675
 8001598:	0800161d 	.word	0x0800161d
 800159c:	08001675 	.word	0x08001675
 80015a0:	08001675 	.word	0x08001675
 80015a4:	08001631 	.word	0x08001631
 80015a8:	0800164f 	.word	0x0800164f
 80015ac:	0800165b 	.word	0x0800165b
 80015b0:	08001675 	.word	0x08001675
 80015b4:	08001675 	.word	0x08001675
 80015b8:	08001675 	.word	0x08001675
 80015bc:	08001675 	.word	0x08001675
 80015c0:	08001675 	.word	0x08001675
 80015c4:	08001675 	.word	0x08001675
 80015c8:	08001675 	.word	0x08001675
 80015cc:	08001675 	.word	0x08001675
 80015d0:	08001675 	.word	0x08001675
 80015d4:	08001675 	.word	0x08001675
 80015d8:	08001645 	.word	0x08001645
 80015dc:	08001675 	.word	0x08001675
 80015e0:	08001607 	.word	0x08001607
 80015e4:	08001675 	.word	0x08001675
 80015e8:	08001675 	.word	0x08001675
 80015ec:	08001675 	.word	0x08001675
 80015f0:	080015f5 	.word	0x080015f5
                    case 'w'://frente
                    case 'W'://forward
                    	motor_set_speed(potenciometro, potenciometro); break;
 80015f4:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 80015f8:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 80015fc:	4611      	mov	r1, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 fa24 	bl	8001a4c <motor_set_speed>
 8001604:	e036      	b.n	8001674 <controle_carro+0x244>
                    case 's'://ré
                    case 'S'://backward
                    	motor_set_speed(-potenciometro, -potenciometro); break;
 8001606:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800160a:	425a      	negs	r2, r3
 800160c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001610:	425b      	negs	r3, r3
 8001612:	4619      	mov	r1, r3
 8001614:	4610      	mov	r0, r2
 8001616:	f000 fa19 	bl	8001a4c <motor_set_speed>
 800161a:	e02b      	b.n	8001674 <controle_carro+0x244>
                    case 'a'://esquerda
                    case 'A'://lefs
                    	motor_set_speed(potenciometro, -potenciometro); break;
 800161c:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 8001620:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001624:	425b      	negs	r3, r3
 8001626:	4619      	mov	r1, r3
 8001628:	4610      	mov	r0, r2
 800162a:	f000 fa0f 	bl	8001a4c <motor_set_speed>
 800162e:	e021      	b.n	8001674 <controle_carro+0x244>
                    case 'd'://direita
                    case 'D'://right
                    	motor_set_speed(-potenciometro, potenciometro); break;
 8001630:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001634:	425b      	negs	r3, r3
 8001636:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f000 fa05 	bl	8001a4c <motor_set_speed>
 8001642:	e017      	b.n	8001674 <controle_carro+0x244>
                    case 'q'://para
					case 'Q'://stop
						motor_set_speed(0, 0); break;
 8001644:	2100      	movs	r1, #0
 8001646:	2000      	movs	r0, #0
 8001648:	f000 fa00 	bl	8001a4c <motor_set_speed>
 800164c:	e012      	b.n	8001674 <controle_carro+0x244>
					case 'e'://led (easter egg)
					case 'E'://LED (easter egg)
						HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);break;
 800164e:	2120      	movs	r1, #32
 8001650:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001654:	f002 faa0 	bl	8003b98 <HAL_GPIO_TogglePin>
 8001658:	e00c      	b.n	8001674 <controle_carro+0x244>
                    case 'f':  // comando para mudar para modo Follow
                    case 'F': //line follower
                        xEventGroupClearBits(modo_event_group, MODO_RC);
 800165a:	4b08      	ldr	r3, [pc, #32]	@ (800167c <controle_carro+0x24c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2101      	movs	r1, #1
 8001660:	4618      	mov	r0, r3
 8001662:	f005 fdcd 	bl	8007200 <xEventGroupClearBits>
                        xEventGroupSetBits(modo_event_group, MODO_AUTO);
 8001666:	4b05      	ldr	r3, [pc, #20]	@ (800167c <controle_carro+0x24c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2102      	movs	r1, #2
 800166c:	4618      	mov	r0, r3
 800166e:	f005 fe00 	bl	8007272 <xEventGroupSetBits>
                        break;
 8001672:	bf00      	nop
                }
            }
        }
        vTaskDelay(pdMS_TO_TICKS(50));
 8001674:	2032      	movs	r0, #50	@ 0x32
 8001676:	f006 f8eb 	bl	8007850 <vTaskDelay>
    for (;;) {
 800167a:	e6e0      	b.n	800143e <controle_carro+0xe>
 800167c:	200004ec 	.word	0x200004ec
 8001680:	200004f0 	.word	0x200004f0
 8001684:	0840ffdf 	.word	0x0840ffdf
 8001688:	66666667 	.word	0x66666667
 800168c:	0800b620 	.word	0x0800b620
 8001690:	200005a0 	.word	0x200005a0

08001694 <read_sensors>:
		//corr = compute_pid(pos);
		HAL_Delay(100);
	}
}

void read_sensors() {
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_SENSORS; i++) {
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	e015      	b.n	80016cc <read_sensors+0x38>
        sensor_values[i] = HAL_GPIO_ReadPin(SENSOR_PORT[i], SENSOR_PIN[i]);
 80016a0:	4a0e      	ldr	r2, [pc, #56]	@ (80016dc <read_sensors+0x48>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016a8:	490d      	ldr	r1, [pc, #52]	@ (80016e0 <read_sensors+0x4c>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80016b0:	4619      	mov	r1, r3
 80016b2:	4610      	mov	r0, r2
 80016b4:	f002 fa40 	bl	8003b38 <HAL_GPIO_ReadPin>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4619      	mov	r1, r3
 80016bc:	4a09      	ldr	r2, [pc, #36]	@ (80016e4 <read_sensors+0x50>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	460a      	mov	r2, r1
 80016c4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_SENSORS; i++) {
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3301      	adds	r3, #1
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b07      	cmp	r3, #7
 80016d0:	dde6      	ble.n	80016a0 <read_sensors+0xc>
    }
}
 80016d2:	bf00      	nop
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000020 	.word	0x20000020
 80016e4:	20000628 	.word	0x20000628

080016e8 <print_sensor_values>:

void print_sensor_values() {
 80016e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ea:	b095      	sub	sp, #84	@ 0x54
 80016ec:	af06      	add	r7, sp, #24
    char msg[50];
    sprintf(msg, "Sensores: %d %d %d %d %d %d %d %d\r\n",
            sensor_values[0], sensor_values[1], sensor_values[2], sensor_values[3], //sensores 2 e 3 sempre "1"
 80016ee:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <print_sensor_values+0x6c>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
    sprintf(msg, "Sensores: %d %d %d %d %d %d %d %d\r\n",
 80016f2:	469c      	mov	ip, r3
            sensor_values[0], sensor_values[1], sensor_values[2], sensor_values[3], //sensores 2 e 3 sempre "1"
 80016f4:	4b17      	ldr	r3, [pc, #92]	@ (8001754 <print_sensor_values+0x6c>)
 80016f6:	785b      	ldrb	r3, [r3, #1]
    sprintf(msg, "Sensores: %d %d %d %d %d %d %d %d\r\n",
 80016f8:	469e      	mov	lr, r3
            sensor_values[0], sensor_values[1], sensor_values[2], sensor_values[3], //sensores 2 e 3 sempre "1"
 80016fa:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <print_sensor_values+0x6c>)
 80016fc:	789b      	ldrb	r3, [r3, #2]
    sprintf(msg, "Sensores: %d %d %d %d %d %d %d %d\r\n",
 80016fe:	461a      	mov	r2, r3
            sensor_values[0], sensor_values[1], sensor_values[2], sensor_values[3], //sensores 2 e 3 sempre "1"
 8001700:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <print_sensor_values+0x6c>)
 8001702:	78db      	ldrb	r3, [r3, #3]
    sprintf(msg, "Sensores: %d %d %d %d %d %d %d %d\r\n",
 8001704:	4619      	mov	r1, r3
            sensor_values[4], sensor_values[5], sensor_values[6], sensor_values[7]); //sensores 6 e 7 sempre "0"
 8001706:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <print_sensor_values+0x6c>)
 8001708:	791b      	ldrb	r3, [r3, #4]
    sprintf(msg, "Sensores: %d %d %d %d %d %d %d %d\r\n",
 800170a:	461c      	mov	r4, r3
            sensor_values[4], sensor_values[5], sensor_values[6], sensor_values[7]); //sensores 6 e 7 sempre "0"
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <print_sensor_values+0x6c>)
 800170e:	795b      	ldrb	r3, [r3, #5]
    sprintf(msg, "Sensores: %d %d %d %d %d %d %d %d\r\n",
 8001710:	461d      	mov	r5, r3
            sensor_values[4], sensor_values[5], sensor_values[6], sensor_values[7]); //sensores 6 e 7 sempre "0"
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <print_sensor_values+0x6c>)
 8001714:	799b      	ldrb	r3, [r3, #6]
    sprintf(msg, "Sensores: %d %d %d %d %d %d %d %d\r\n",
 8001716:	461e      	mov	r6, r3
            sensor_values[4], sensor_values[5], sensor_values[6], sensor_values[7]); //sensores 6 e 7 sempre "0"
 8001718:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <print_sensor_values+0x6c>)
 800171a:	79db      	ldrb	r3, [r3, #7]
    sprintf(msg, "Sensores: %d %d %d %d %d %d %d %d\r\n",
 800171c:	1d38      	adds	r0, r7, #4
 800171e:	9305      	str	r3, [sp, #20]
 8001720:	9604      	str	r6, [sp, #16]
 8001722:	9503      	str	r5, [sp, #12]
 8001724:	9402      	str	r4, [sp, #8]
 8001726:	9101      	str	r1, [sp, #4]
 8001728:	9200      	str	r2, [sp, #0]
 800172a:	4673      	mov	r3, lr
 800172c:	4662      	mov	r2, ip
 800172e:	490a      	ldr	r1, [pc, #40]	@ (8001758 <print_sensor_values+0x70>)
 8001730:	f007 fdb8 	bl	80092a4 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe fd9a 	bl	8000270 <strlen>
 800173c:	4603      	mov	r3, r0
 800173e:	b29a      	uxth	r2, r3
 8001740:	1d39      	adds	r1, r7, #4
 8001742:	2364      	movs	r3, #100	@ 0x64
 8001744:	4805      	ldr	r0, [pc, #20]	@ (800175c <print_sensor_values+0x74>)
 8001746:	f004 fe9d 	bl	8006484 <HAL_UART_Transmit>
}
 800174a:	bf00      	nop
 800174c:	373c      	adds	r7, #60	@ 0x3c
 800174e:	46bd      	mov	sp, r7
 8001750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001752:	bf00      	nop
 8001754:	20000628 	.word	0x20000628
 8001758:	0800b634 	.word	0x0800b634
 800175c:	200005a0 	.word	0x200005a0

08001760 <calculate_centroid>:


/*
 * PID
 */
float calculate_centroid() {
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0

    int sum_weights = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
    int sum_values = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < NUM_SENSORS; i++) {
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	e012      	b.n	800179a <calculate_centroid+0x3a>
        if (sensor_values[i] == 1) {  // Sensor detecta preto (linha)
 8001774:	4a18      	ldr	r2, [pc, #96]	@ (80017d8 <calculate_centroid+0x78>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d109      	bne.n	8001794 <calculate_centroid+0x34>
            sum_weights += sensor_positions[i];
 8001780:	4a16      	ldr	r2, [pc, #88]	@ (80017dc <calculate_centroid+0x7c>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
            sum_values++;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	3301      	adds	r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < NUM_SENSORS; i++) {
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3301      	adds	r3, #1
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b07      	cmp	r3, #7
 800179e:	dde9      	ble.n	8001774 <calculate_centroid+0x14>
        }
    }

    if (sum_values == 0) {
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <calculate_centroid+0x4c>
        return -100.0f;  // Nenhum sensor detectou a linha (linha perdida)
 80017a6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80017e0 <calculate_centroid+0x80>
 80017aa:	e00b      	b.n	80017c4 <calculate_centroid+0x64>
    }

    return (float)sum_weights / sum_values;  // Centroide normalizado
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	ee07 3a90 	vmov	s15, r3
 80017b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	ee07 3a90 	vmov	s15, r3
 80017bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 80017c4:	eef0 7a66 	vmov.f32	s15, s13
 80017c8:	eeb0 0a67 	vmov.f32	s0, s15
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000628 	.word	0x20000628
 80017dc:	20000030 	.word	0x20000030
 80017e0:	c2c80000 	.word	0xc2c80000

080017e4 <compute_pid>:

float compute_pid(float position) {
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	ed87 0a01 	vstr	s0, [r7, #4]
    if (position ==0) {
 80017ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80017f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fa:	d102      	bne.n	8001802 <compute_pid+0x1e>
        return 0;  // Linha perdida → nenhuma correção
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	e040      	b.n	8001884 <compute_pid+0xa0>
    }

    error = position - target_position;
 8001802:	4b25      	ldr	r3, [pc, #148]	@ (8001898 <compute_pid+0xb4>)
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	ed97 7a01 	vldr	s14, [r7, #4]
 800180c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001810:	4b22      	ldr	r3, [pc, #136]	@ (800189c <compute_pid+0xb8>)
 8001812:	edc3 7a00 	vstr	s15, [r3]
    integral += error;
 8001816:	4b22      	ldr	r3, [pc, #136]	@ (80018a0 <compute_pid+0xbc>)
 8001818:	ed93 7a00 	vldr	s14, [r3]
 800181c:	4b1f      	ldr	r3, [pc, #124]	@ (800189c <compute_pid+0xb8>)
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001826:	4b1e      	ldr	r3, [pc, #120]	@ (80018a0 <compute_pid+0xbc>)
 8001828:	edc3 7a00 	vstr	s15, [r3]
    float derivative = error - previous_error;
 800182c:	4b1b      	ldr	r3, [pc, #108]	@ (800189c <compute_pid+0xb8>)
 800182e:	ed93 7a00 	vldr	s14, [r3]
 8001832:	4b1c      	ldr	r3, [pc, #112]	@ (80018a4 <compute_pid+0xc0>)
 8001834:	edd3 7a00 	vldr	s15, [r3]
 8001838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800183c:	edc7 7a03 	vstr	s15, [r7, #12]

    float correction = Kp * error + Ki * integral + Kd * derivative;
 8001840:	4b19      	ldr	r3, [pc, #100]	@ (80018a8 <compute_pid+0xc4>)
 8001842:	ed93 7a00 	vldr	s14, [r3]
 8001846:	4b15      	ldr	r3, [pc, #84]	@ (800189c <compute_pid+0xb8>)
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001850:	4b16      	ldr	r3, [pc, #88]	@ (80018ac <compute_pid+0xc8>)
 8001852:	edd3 6a00 	vldr	s13, [r3]
 8001856:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <compute_pid+0xbc>)
 8001858:	edd3 7a00 	vldr	s15, [r3]
 800185c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001860:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001864:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <compute_pid+0xcc>)
 8001866:	edd3 6a00 	vldr	s13, [r3]
 800186a:	edd7 7a03 	vldr	s15, [r7, #12]
 800186e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001876:	edc7 7a02 	vstr	s15, [r7, #8]
    previous_error = error;
 800187a:	4b08      	ldr	r3, [pc, #32]	@ (800189c <compute_pid+0xb8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a09      	ldr	r2, [pc, #36]	@ (80018a4 <compute_pid+0xc0>)
 8001880:	6013      	str	r3, [r2, #0]

    return correction;
 8001882:	68bb      	ldr	r3, [r7, #8]
}
 8001884:	ee07 3a90 	vmov	s15, r3
 8001888:	eeb0 0a67 	vmov.f32	s0, s15
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000644 	.word	0x20000644
 800189c:	20000638 	.word	0x20000638
 80018a0:	20000640 	.word	0x20000640
 80018a4:	2000063c 	.word	0x2000063c
 80018a8:	20000050 	.word	0x20000050
 80018ac:	20000634 	.word	0x20000634
 80018b0:	20000054 	.word	0x20000054

080018b4 <motor_init>:
 * MOTORES
 */

//Função motores com PWM

void motor_init() {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80018b8:	2100      	movs	r1, #0
 80018ba:	4815      	ldr	r0, [pc, #84]	@ (8001910 <motor_init+0x5c>)
 80018bc:	f003 fe02 	bl	80054c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80018c0:	2104      	movs	r1, #4
 80018c2:	4813      	ldr	r0, [pc, #76]	@ (8001910 <motor_init+0x5c>)
 80018c4:	f003 fdfe 	bl	80054c4 <HAL_TIM_PWM_Start>

	// Parar motores inicialmente
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018ce:	4811      	ldr	r0, [pc, #68]	@ (8001914 <motor_init+0x60>)
 80018d0:	f002 f94a 	bl	8003b68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2120      	movs	r1, #32
 80018d8:	480e      	ldr	r0, [pc, #56]	@ (8001914 <motor_init+0x60>)
 80018da:	f002 f945 	bl	8003b68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018e8:	f002 f93e 	bl	8003b68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018f6:	f002 f937 	bl	8003b68 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80018fa:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <motor_init+0x5c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2200      	movs	r2, #0
 8001900:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001902:	4b03      	ldr	r3, [pc, #12]	@ (8001910 <motor_init+0x5c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2200      	movs	r2, #0
 8001908:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000554 	.word	0x20000554
 8001914:	48000400 	.word	0x48000400

08001918 <motores>:
	HAL_ADC_Start(&hadc1);
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	return HAL_ADC_GetValue(&hadc1);
}

void motores(void *argument) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
    for (;;) {
        EventBits_t modo = xEventGroupGetBits(modo_event_group);
 8001920:	4b2c      	ldr	r3, [pc, #176]	@ (80019d4 <motores+0xbc>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f005 fc6a 	bl	8007200 <xEventGroupClearBits>
 800192c:	6178      	str	r0, [r7, #20]
        if (modo & MODO_AUTO) {
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f3      	beq.n	8001920 <motores+0x8>
            read_sensors();
 8001938:	f7ff feac 	bl	8001694 <read_sensors>
            print_sensor_values();
 800193c:	f7ff fed4 	bl	80016e8 <print_sensor_values>
            float pos = calculate_centroid();
 8001940:	f7ff ff0e 	bl	8001760 <calculate_centroid>
 8001944:	ed87 0a04 	vstr	s0, [r7, #16]
            float corr = compute_pid(pos);
 8001948:	ed97 0a04 	vldr	s0, [r7, #16]
 800194c:	f7ff ff4a 	bl	80017e4 <compute_pid>
 8001950:	ed87 0a03 	vstr	s0, [r7, #12]
            if (pos == -100.0f) {
 8001954:	edd7 7a04 	vldr	s15, [r7, #16]
 8001958:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80019d8 <motores+0xc0>
 800195c:	eef4 7a47 	vcmp.f32	s15, s14
 8001960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001964:	d105      	bne.n	8001972 <motores+0x5a>
                motor_set_speed(30, -30);
 8001966:	f06f 011d 	mvn.w	r1, #29
 800196a:	201e      	movs	r0, #30
 800196c:	f000 f86e 	bl	8001a4c <motor_set_speed>
 8001970:	e003      	b.n	800197a <motores+0x62>
            } else {
                set_motor_speeds(corr);
 8001972:	ed97 0a03 	vldr	s0, [r7, #12]
 8001976:	f000 f833 	bl	80019e0 <set_motor_speeds>
            }
            // Verifica se recebeu um 'r' na UART
			char c;
			if (HAL_UART_Receive(&huart2, (uint8_t *)&c, 1, 10) == HAL_OK) {
 800197a:	f107 010b 	add.w	r1, r7, #11
 800197e:	230a      	movs	r3, #10
 8001980:	2201      	movs	r2, #1
 8001982:	4816      	ldr	r0, [pc, #88]	@ (80019dc <motores+0xc4>)
 8001984:	f004 fe07 	bl	8006596 <HAL_UART_Receive>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1c8      	bne.n	8001920 <motores+0x8>
				if (c == 'r' || c == 'R') {
 800198e:	7afb      	ldrb	r3, [r7, #11]
 8001990:	2b72      	cmp	r3, #114	@ 0x72
 8001992:	d002      	beq.n	800199a <motores+0x82>
 8001994:	7afb      	ldrb	r3, [r7, #11]
 8001996:	2b52      	cmp	r3, #82	@ 0x52
 8001998:	d10f      	bne.n	80019ba <motores+0xa2>
					// Muda pro modo RC
					xEventGroupClearBits(modo_event_group, MODO_AUTO);
 800199a:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <motores+0xbc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2102      	movs	r1, #2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f005 fc2d 	bl	8007200 <xEventGroupClearBits>
					xEventGroupSetBits(modo_event_group, MODO_RC);
 80019a6:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <motores+0xbc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2101      	movs	r1, #1
 80019ac:	4618      	mov	r0, r3
 80019ae:	f005 fc60 	bl	8007272 <xEventGroupSetBits>
					// Parar os motores
					motor_set_speed(0, 0);
 80019b2:	2100      	movs	r1, #0
 80019b4:	2000      	movs	r0, #0
 80019b6:	f000 f849 	bl	8001a4c <motor_set_speed>
				}
				if (c=='e'||c=='E'){
 80019ba:	7afb      	ldrb	r3, [r7, #11]
 80019bc:	2b65      	cmp	r3, #101	@ 0x65
 80019be:	d002      	beq.n	80019c6 <motores+0xae>
 80019c0:	7afb      	ldrb	r3, [r7, #11]
 80019c2:	2b45      	cmp	r3, #69	@ 0x45
 80019c4:	d1ac      	bne.n	8001920 <motores+0x8>
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80019c6:	2120      	movs	r1, #32
 80019c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019cc:	f002 f8e4 	bl	8003b98 <HAL_GPIO_TogglePin>
    for (;;) {
 80019d0:	e7a6      	b.n	8001920 <motores+0x8>
 80019d2:	bf00      	nop
 80019d4:	200004ec 	.word	0x200004ec
 80019d8:	c2c80000 	.word	0xc2c80000
 80019dc:	200005a0 	.word	0x200005a0

080019e0 <set_motor_speeds>:
        vTaskDelay(pdMS_TO_TICKS(50));

}


void set_motor_speeds(float correction) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	ed87 0a01 	vstr	s0, [r7, #4]
    int base_speed = 70;  // Velocidade padrão (pode ajustar)
 80019ea:	2346      	movs	r3, #70	@ 0x46
 80019ec:	60fb      	str	r3, [r7, #12]
    int left_speed = base_speed + (int)(correction);
 80019ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80019f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019f6:	ee17 2a90 	vmov	r2, s15
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4413      	add	r3, r2
 80019fe:	617b      	str	r3, [r7, #20]
    int right_speed = base_speed - (int)(correction);
 8001a00:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a08:	ee17 2a90 	vmov	r2, s15
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1a9b      	subs	r3, r3, r2
 8001a10:	613b      	str	r3, [r7, #16]

    // Saturação (evita valores negativos ou muito altos)
    if (left_speed > 100) left_speed = 100;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2b64      	cmp	r3, #100	@ 0x64
 8001a16:	dd01      	ble.n	8001a1c <set_motor_speeds+0x3c>
 8001a18:	2364      	movs	r3, #100	@ 0x64
 8001a1a:	617b      	str	r3, [r7, #20]
    if (right_speed > 100) right_speed = 100;
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	2b64      	cmp	r3, #100	@ 0x64
 8001a20:	dd01      	ble.n	8001a26 <set_motor_speeds+0x46>
 8001a22:	2364      	movs	r3, #100	@ 0x64
 8001a24:	613b      	str	r3, [r7, #16]
    if (left_speed < 0) left_speed = 0;
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	da01      	bge.n	8001a30 <set_motor_speeds+0x50>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
    if (right_speed < 0) right_speed = 0;
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	da01      	bge.n	8001a3a <set_motor_speeds+0x5a>
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]

    motor_set_speed(left_speed, right_speed);  // Sua função para controlar os motores
 8001a3a:	6939      	ldr	r1, [r7, #16]
 8001a3c:	6978      	ldr	r0, [r7, #20]
 8001a3e:	f000 f805 	bl	8001a4c <motor_set_speed>

}
 8001a42:	bf00      	nop
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <motor_set_speed>:

void motor_set_speed(int left_speed, int right_speed) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
	// Limitar valores entre -100 e 100
	if (left_speed > 100) left_speed = 100;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b64      	cmp	r3, #100	@ 0x64
 8001a5a:	dd01      	ble.n	8001a60 <motor_set_speed+0x14>
 8001a5c:	2364      	movs	r3, #100	@ 0x64
 8001a5e:	607b      	str	r3, [r7, #4]
	if (right_speed > 100) right_speed = 100;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	2b64      	cmp	r3, #100	@ 0x64
 8001a64:	dd01      	ble.n	8001a6a <motor_set_speed+0x1e>
 8001a66:	2364      	movs	r3, #100	@ 0x64
 8001a68:	603b      	str	r3, [r7, #0]
	if (left_speed < -100) left_speed = -100;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001a70:	da02      	bge.n	8001a78 <motor_set_speed+0x2c>
 8001a72:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001a76:	607b      	str	r3, [r7, #4]
	if (right_speed < -100) right_speed = -100;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001a7e:	da02      	bge.n	8001a86 <motor_set_speed+0x3a>
 8001a80:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001a84:	603b      	str	r3, [r7, #0]

	// Definir direção e PWM do motor esquerdo
	if (left_speed >= 0) {
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	db0b      	blt.n	8001aa4 <motor_set_speed+0x58>
		HAL_GPIO_WritePin(MOTOR_L_PORT, MOTOR_L_IN1, GPIO_PIN_RESET);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a92:	4823      	ldr	r0, [pc, #140]	@ (8001b20 <motor_set_speed+0xd4>)
 8001a94:	f002 f868 	bl	8003b68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_L_PORT, MOTOR_L_IN2, GPIO_PIN_SET);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	2120      	movs	r1, #32
 8001a9c:	4820      	ldr	r0, [pc, #128]	@ (8001b20 <motor_set_speed+0xd4>)
 8001a9e:	f002 f863 	bl	8003b68 <HAL_GPIO_WritePin>
 8001aa2:	e00d      	b.n	8001ac0 <motor_set_speed+0x74>
	} else {
		HAL_GPIO_WritePin(MOTOR_L_PORT, MOTOR_L_IN1, GPIO_PIN_SET);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001aaa:	481d      	ldr	r0, [pc, #116]	@ (8001b20 <motor_set_speed+0xd4>)
 8001aac:	f002 f85c 	bl	8003b68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_L_PORT, MOTOR_L_IN2, GPIO_PIN_RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2120      	movs	r1, #32
 8001ab4:	481a      	ldr	r0, [pc, #104]	@ (8001b20 <motor_set_speed+0xd4>)
 8001ab6:	f002 f857 	bl	8003b68 <HAL_GPIO_WritePin>
		left_speed = -left_speed;  // Inverter valor para PWM
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	425b      	negs	r3, r3
 8001abe:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (left_speed * PWM_MAX) / 100);  // Ajuste o Timer correto
 8001ac0:	4b18      	ldr	r3, [pc, #96]	@ (8001b24 <motor_set_speed+0xd8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	635a      	str	r2, [r3, #52]	@ 0x34

	// Definir direção e PWM do motor direito
	if (right_speed >= 0) {
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	db0e      	blt.n	8001aec <motor_set_speed+0xa0>
		HAL_GPIO_WritePin(MOTOR_R_PORT, MOTOR_R_IN1, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ad4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ad8:	f002 f846 	bl	8003b68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_R_PORT, MOTOR_R_IN2, GPIO_PIN_SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae6:	f002 f83f 	bl	8003b68 <HAL_GPIO_WritePin>
 8001aea:	e010      	b.n	8001b0e <motor_set_speed+0xc2>
	} else {
		HAL_GPIO_WritePin(MOTOR_R_PORT, MOTOR_R_IN1, GPIO_PIN_SET);
 8001aec:	2201      	movs	r2, #1
 8001aee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001af2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001af6:	f002 f837 	bl	8003b68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_R_PORT, MOTOR_R_IN2, GPIO_PIN_RESET);
 8001afa:	2200      	movs	r2, #0
 8001afc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b04:	f002 f830 	bl	8003b68 <HAL_GPIO_WritePin>
		right_speed = -right_speed;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	425b      	negs	r3, r3
 8001b0c:	603b      	str	r3, [r7, #0]
	}

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (right_speed * PWM_MAX) / 100);  // Ajuste o Timer correto
 8001b0e:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <motor_set_speed+0xd8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	48000400 	.word	0x48000400
 8001b24:	20000554 	.word	0x20000554

08001b28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001b30:	2001      	movs	r0, #1
 8001b32:	f005 fb37 	bl	80071a4 <osDelay>
 8001b36:	e7fb      	b.n	8001b30 <StartDefaultTask+0x8>

08001b38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a04      	ldr	r2, [pc, #16]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d101      	bne.n	8001b4e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001b4a:	f000 fb27 	bl	800219c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40012c00 	.word	0x40012c00

08001b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b60:	b672      	cpsid	i
}
 8001b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <Error_Handler+0x8>

08001b68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6e:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <HAL_MspInit+0x4c>)
 8001b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b72:	4a10      	ldr	r2, [pc, #64]	@ (8001bb4 <HAL_MspInit+0x4c>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <HAL_MspInit+0x4c>)
 8001b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b86:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <HAL_MspInit+0x4c>)
 8001b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb4 <HAL_MspInit+0x4c>)
 8001b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b90:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b92:	4b08      	ldr	r3, [pc, #32]	@ (8001bb4 <HAL_MspInit+0x4c>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	210f      	movs	r1, #15
 8001ba2:	f06f 0001 	mvn.w	r0, #1
 8001ba6:	f001 fdf3 	bl	8003790 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b0ac      	sub	sp, #176	@ 0xb0
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	2288      	movs	r2, #136	@ 0x88
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f007 fbc8 	bl	800936e <memset>
  if(hadc->Instance==ADC1)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a27      	ldr	r2, [pc, #156]	@ (8001c80 <HAL_ADC_MspInit+0xc8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d146      	bne.n	8001c76 <HAL_ADC_MspInit+0xbe>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001be8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bec:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001bee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001bf2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001bfe:	2308      	movs	r3, #8
 8001c00:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001c02:	2307      	movs	r3, #7
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c06:	2302      	movs	r3, #2
 8001c08:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001c0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c12:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f002 fe6d 	bl	80048f8 <HAL_RCCEx_PeriphCLKConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001c24:	f7ff ff9a 	bl	8001b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c28:	4b16      	ldr	r3, [pc, #88]	@ (8001c84 <HAL_ADC_MspInit+0xcc>)
 8001c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2c:	4a15      	ldr	r2, [pc, #84]	@ (8001c84 <HAL_ADC_MspInit+0xcc>)
 8001c2e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c34:	4b13      	ldr	r3, [pc, #76]	@ (8001c84 <HAL_ADC_MspInit+0xcc>)
 8001c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c40:	4b10      	ldr	r3, [pc, #64]	@ (8001c84 <HAL_ADC_MspInit+0xcc>)
 8001c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c44:	4a0f      	ldr	r2, [pc, #60]	@ (8001c84 <HAL_ADC_MspInit+0xcc>)
 8001c46:	f043 0304 	orr.w	r3, r3, #4
 8001c4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c84 <HAL_ADC_MspInit+0xcc>)
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c5e:	230b      	movs	r3, #11
 8001c60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4805      	ldr	r0, [pc, #20]	@ (8001c88 <HAL_ADC_MspInit+0xd0>)
 8001c72:	f001 fdb7 	bl	80037e4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c76:	bf00      	nop
 8001c78:	37b0      	adds	r7, #176	@ 0xb0
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	50040000 	.word	0x50040000
 8001c84:	40021000 	.word	0x40021000
 8001c88:	48000800 	.word	0x48000800

08001c8c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0x38>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d10b      	bne.n	8001cb6 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca2:	4a09      	ldr	r2, [pc, #36]	@ (8001cc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001caa:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40000400 	.word	0x40000400
 8001cc8:	40021000 	.word	0x40021000

08001ccc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	@ 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8001d68 <HAL_TIM_MspPostInit+0x9c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d137      	bne.n	8001d5e <HAL_TIM_MspPostInit+0x92>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cee:	4b1f      	ldr	r3, [pc, #124]	@ (8001d6c <HAL_TIM_MspPostInit+0xa0>)
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d6c <HAL_TIM_MspPostInit+0xa0>)
 8001cf4:	f043 0304 	orr.w	r3, r3, #4
 8001cf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8001d6c <HAL_TIM_MspPostInit+0xa0>)
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <HAL_TIM_MspPostInit+0xa0>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0a:	4a18      	ldr	r2, [pc, #96]	@ (8001d6c <HAL_TIM_MspPostInit+0xa0>)
 8001d0c:	f043 0302 	orr.w	r3, r3, #2
 8001d10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d12:	4b16      	ldr	r3, [pc, #88]	@ (8001d6c <HAL_TIM_MspPostInit+0xa0>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d1e:	2380      	movs	r3, #128	@ 0x80
 8001d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	480d      	ldr	r0, [pc, #52]	@ (8001d70 <HAL_TIM_MspPostInit+0xa4>)
 8001d3a:	f001 fd53 	bl	80037e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d3e:	2310      	movs	r3, #16
 8001d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4619      	mov	r1, r3
 8001d58:	4806      	ldr	r0, [pc, #24]	@ (8001d74 <HAL_TIM_MspPostInit+0xa8>)
 8001d5a:	f001 fd43 	bl	80037e4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d5e:	bf00      	nop
 8001d60:	3728      	adds	r7, #40	@ 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40000400 	.word	0x40000400
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	48000800 	.word	0x48000800
 8001d74:	48000400 	.word	0x48000400

08001d78 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b0ac      	sub	sp, #176	@ 0xb0
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	2288      	movs	r2, #136	@ 0x88
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f007 fae8 	bl	800936e <memset>
  if(huart->Instance==USART2)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a21      	ldr	r2, [pc, #132]	@ (8001e28 <HAL_UART_MspInit+0xb0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d13b      	bne.n	8001e20 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001da8:	2302      	movs	r3, #2
 8001daa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001dac:	2300      	movs	r3, #0
 8001dae:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4618      	mov	r0, r3
 8001db6:	f002 fd9f 	bl	80048f8 <HAL_RCCEx_PeriphCLKConfig>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dc0:	f7ff fecc 	bl	8001b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dc4:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <HAL_UART_MspInit+0xb4>)
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc8:	4a18      	ldr	r2, [pc, #96]	@ (8001e2c <HAL_UART_MspInit+0xb4>)
 8001dca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dce:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dd0:	4b16      	ldr	r3, [pc, #88]	@ (8001e2c <HAL_UART_MspInit+0xb4>)
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ddc:	4b13      	ldr	r3, [pc, #76]	@ (8001e2c <HAL_UART_MspInit+0xb4>)
 8001dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de0:	4a12      	ldr	r2, [pc, #72]	@ (8001e2c <HAL_UART_MspInit+0xb4>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001de8:	4b10      	ldr	r3, [pc, #64]	@ (8001e2c <HAL_UART_MspInit+0xb4>)
 8001dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001df4:	230c      	movs	r3, #12
 8001df6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e0c:	2307      	movs	r3, #7
 8001e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e12:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e16:	4619      	mov	r1, r3
 8001e18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e1c:	f001 fce2 	bl	80037e4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001e20:	bf00      	nop
 8001e22:	37b0      	adds	r7, #176	@ 0xb0
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40004400 	.word	0x40004400
 8001e2c:	40021000 	.word	0x40021000

08001e30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08c      	sub	sp, #48	@ 0x30
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef8 <HAL_InitTick+0xc8>)
 8001e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e42:	4a2d      	ldr	r2, [pc, #180]	@ (8001ef8 <HAL_InitTick+0xc8>)
 8001e44:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e48:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef8 <HAL_InitTick+0xc8>)
 8001e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e56:	f107 020c 	add.w	r2, r7, #12
 8001e5a:	f107 0310 	add.w	r3, r7, #16
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f002 fcb7 	bl	80047d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e66:	f002 fc9f 	bl	80047a8 <HAL_RCC_GetPCLK2Freq>
 8001e6a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e6e:	4a23      	ldr	r2, [pc, #140]	@ (8001efc <HAL_InitTick+0xcc>)
 8001e70:	fba2 2303 	umull	r2, r3, r2, r3
 8001e74:	0c9b      	lsrs	r3, r3, #18
 8001e76:	3b01      	subs	r3, #1
 8001e78:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e7a:	4b21      	ldr	r3, [pc, #132]	@ (8001f00 <HAL_InitTick+0xd0>)
 8001e7c:	4a21      	ldr	r2, [pc, #132]	@ (8001f04 <HAL_InitTick+0xd4>)
 8001e7e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001e80:	4b1f      	ldr	r3, [pc, #124]	@ (8001f00 <HAL_InitTick+0xd0>)
 8001e82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e86:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e88:	4a1d      	ldr	r2, [pc, #116]	@ (8001f00 <HAL_InitTick+0xd0>)
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f00 <HAL_InitTick+0xd0>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <HAL_InitTick+0xd0>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e9a:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <HAL_InitTick+0xd0>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001ea0:	4817      	ldr	r0, [pc, #92]	@ (8001f00 <HAL_InitTick+0xd0>)
 8001ea2:	f003 f9e5 	bl	8005270 <HAL_TIM_Base_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001eac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d11b      	bne.n	8001eec <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001eb4:	4812      	ldr	r0, [pc, #72]	@ (8001f00 <HAL_InitTick+0xd0>)
 8001eb6:	f003 fa3d 	bl	8005334 <HAL_TIM_Base_Start_IT>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001ec0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d111      	bne.n	8001eec <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ec8:	2019      	movs	r0, #25
 8001eca:	f001 fc7d 	bl	80037c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b0f      	cmp	r3, #15
 8001ed2:	d808      	bhi.n	8001ee6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	2019      	movs	r0, #25
 8001eda:	f001 fc59 	bl	8003790 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ede:	4a0a      	ldr	r2, [pc, #40]	@ (8001f08 <HAL_InitTick+0xd8>)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	e002      	b.n	8001eec <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001eec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3730      	adds	r7, #48	@ 0x30
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	431bde83 	.word	0x431bde83
 8001f00:	20000648 	.word	0x20000648
 8001f04:	40012c00 	.word	0x40012c00
 8001f08:	2000005c 	.word	0x2000005c

08001f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f10:	bf00      	nop
 8001f12:	e7fd      	b.n	8001f10 <NMI_Handler+0x4>

08001f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <HardFault_Handler+0x4>

08001f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <MemManage_Handler+0x4>

08001f24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <BusFault_Handler+0x4>

08001f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <UsageFault_Handler+0x4>

08001f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f48:	4802      	ldr	r0, [pc, #8]	@ (8001f54 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001f4a:	f003 fbc1 	bl	80056d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000648 	.word	0x20000648

08001f58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return 1;
 8001f5c:	2301      	movs	r3, #1
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <_kill>:

int _kill(int pid, int sig)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f72:	f007 faad 	bl	80094d0 <__errno>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2216      	movs	r2, #22
 8001f7a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <_exit>:

void _exit (int status)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ffe7 	bl	8001f68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f9a:	bf00      	nop
 8001f9c:	e7fd      	b.n	8001f9a <_exit+0x12>

08001f9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	60f8      	str	r0, [r7, #12]
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	e00a      	b.n	8001fc6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fb0:	f3af 8000 	nop.w
 8001fb4:	4601      	mov	r1, r0
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	1c5a      	adds	r2, r3, #1
 8001fba:	60ba      	str	r2, [r7, #8]
 8001fbc:	b2ca      	uxtb	r2, r1
 8001fbe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	dbf0      	blt.n	8001fb0 <_read+0x12>
  }

  return len;
 8001fce:	687b      	ldr	r3, [r7, #4]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	e009      	b.n	8001ffe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	60ba      	str	r2, [r7, #8]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	429a      	cmp	r2, r3
 8002004:	dbf1      	blt.n	8001fea <_write+0x12>
  }
  return len;
 8002006:	687b      	ldr	r3, [r7, #4]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <_close>:

int _close(int file)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002018:	f04f 33ff 	mov.w	r3, #4294967295
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002038:	605a      	str	r2, [r3, #4]
  return 0;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <_isatty>:

int _isatty(int file)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002050:	2301      	movs	r3, #1
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800205e:	b480      	push	{r7}
 8002060:	b085      	sub	sp, #20
 8002062:	af00      	add	r7, sp, #0
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002080:	4a14      	ldr	r2, [pc, #80]	@ (80020d4 <_sbrk+0x5c>)
 8002082:	4b15      	ldr	r3, [pc, #84]	@ (80020d8 <_sbrk+0x60>)
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800208c:	4b13      	ldr	r3, [pc, #76]	@ (80020dc <_sbrk+0x64>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d102      	bne.n	800209a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002094:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <_sbrk+0x64>)
 8002096:	4a12      	ldr	r2, [pc, #72]	@ (80020e0 <_sbrk+0x68>)
 8002098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800209a:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <_sbrk+0x64>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d207      	bcs.n	80020b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a8:	f007 fa12 	bl	80094d0 <__errno>
 80020ac:	4603      	mov	r3, r0
 80020ae:	220c      	movs	r2, #12
 80020b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295
 80020b6:	e009      	b.n	80020cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b8:	4b08      	ldr	r3, [pc, #32]	@ (80020dc <_sbrk+0x64>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020be:	4b07      	ldr	r3, [pc, #28]	@ (80020dc <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	4a05      	ldr	r2, [pc, #20]	@ (80020dc <_sbrk+0x64>)
 80020c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ca:	68fb      	ldr	r3, [r7, #12]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20018000 	.word	0x20018000
 80020d8:	00000400 	.word	0x00000400
 80020dc:	20000694 	.word	0x20000694
 80020e0:	20004940 	.word	0x20004940

080020e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020e8:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <SystemInit+0x20>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ee:	4a05      	ldr	r2, [pc, #20]	@ (8002104 <SystemInit+0x20>)
 80020f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002108:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002140 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800210c:	f7ff ffea 	bl	80020e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002110:	480c      	ldr	r0, [pc, #48]	@ (8002144 <LoopForever+0x6>)
  ldr r1, =_edata
 8002112:	490d      	ldr	r1, [pc, #52]	@ (8002148 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002114:	4a0d      	ldr	r2, [pc, #52]	@ (800214c <LoopForever+0xe>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002118:	e002      	b.n	8002120 <LoopCopyDataInit>

0800211a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800211a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800211c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211e:	3304      	adds	r3, #4

08002120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002124:	d3f9      	bcc.n	800211a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002126:	4a0a      	ldr	r2, [pc, #40]	@ (8002150 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002128:	4c0a      	ldr	r4, [pc, #40]	@ (8002154 <LoopForever+0x16>)
  movs r3, #0
 800212a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800212c:	e001      	b.n	8002132 <LoopFillZerobss>

0800212e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002130:	3204      	adds	r2, #4

08002132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002134:	d3fb      	bcc.n	800212e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002136:	f007 f9d1 	bl	80094dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800213a:	f7fe fee5 	bl	8000f08 <main>

0800213e <LoopForever>:

LoopForever:
    b LoopForever
 800213e:	e7fe      	b.n	800213e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002140:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002148:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 800214c:	0800ba4c 	.word	0x0800ba4c
  ldr r2, =_sbss
 8002150:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8002154:	2000493c 	.word	0x2000493c

08002158 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002158:	e7fe      	b.n	8002158 <ADC1_2_IRQHandler>
	...

0800215c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002166:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <HAL_Init+0x3c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a0b      	ldr	r2, [pc, #44]	@ (8002198 <HAL_Init+0x3c>)
 800216c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002170:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002172:	2003      	movs	r0, #3
 8002174:	f001 fb01 	bl	800377a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002178:	200f      	movs	r0, #15
 800217a:	f7ff fe59 	bl	8001e30 <HAL_InitTick>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	71fb      	strb	r3, [r7, #7]
 8002188:	e001      	b.n	800218e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800218a:	f7ff fced 	bl	8001b68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800218e:	79fb      	ldrb	r3, [r7, #7]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40022000 	.word	0x40022000

0800219c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <HAL_IncTick+0x20>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <HAL_IncTick+0x24>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4413      	add	r3, r2
 80021ac:	4a04      	ldr	r2, [pc, #16]	@ (80021c0 <HAL_IncTick+0x24>)
 80021ae:	6013      	str	r3, [r2, #0]
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	20000060 	.word	0x20000060
 80021c0:	20000698 	.word	0x20000698

080021c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return uwTick;
 80021c8:	4b03      	ldr	r3, [pc, #12]	@ (80021d8 <HAL_GetTick+0x14>)
 80021ca:	681b      	ldr	r3, [r3, #0]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	20000698 	.word	0x20000698

080021dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	609a      	str	r2, [r3, #8]
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	609a      	str	r2, [r3, #8]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	3360      	adds	r3, #96	@ 0x60
 8002256:	461a      	mov	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b08      	ldr	r3, [pc, #32]	@ (8002288 <LL_ADC_SetOffset+0x44>)
 8002266:	4013      	ands	r3, r2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	4313      	orrs	r3, r2
 8002274:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800227c:	bf00      	nop
 800227e:	371c      	adds	r7, #28
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	03fff000 	.word	0x03fff000

0800228c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3360      	adds	r3, #96	@ 0x60
 800229a:	461a      	mov	r2, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	3360      	adds	r3, #96	@ 0x60
 80022c8:	461a      	mov	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	431a      	orrs	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022e2:	bf00      	nop
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	3330      	adds	r3, #48	@ 0x30
 8002324:	461a      	mov	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	4413      	add	r3, r2
 8002332:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f003 031f 	and.w	r3, r3, #31
 800233e:	211f      	movs	r1, #31
 8002340:	fa01 f303 	lsl.w	r3, r1, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	401a      	ands	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	0e9b      	lsrs	r3, r3, #26
 800234c:	f003 011f 	and.w	r1, r3, #31
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f003 031f 	and.w	r3, r3, #31
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	431a      	orrs	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002360:	bf00      	nop
 8002362:	371c      	adds	r7, #28
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	3314      	adds	r3, #20
 800237c:	461a      	mov	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	0e5b      	lsrs	r3, r3, #25
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	4413      	add	r3, r2
 800238a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	0d1b      	lsrs	r3, r3, #20
 8002394:	f003 031f 	and.w	r3, r3, #31
 8002398:	2107      	movs	r1, #7
 800239a:	fa01 f303 	lsl.w	r3, r1, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	401a      	ands	r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	0d1b      	lsrs	r3, r3, #20
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	fa01 f303 	lsl.w	r3, r1, r3
 80023b0:	431a      	orrs	r2, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023b6:	bf00      	nop
 80023b8:	371c      	adds	r7, #28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023dc:	43db      	mvns	r3, r3
 80023de:	401a      	ands	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f003 0318 	and.w	r3, r3, #24
 80023e6:	4908      	ldr	r1, [pc, #32]	@ (8002408 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023e8:	40d9      	lsrs	r1, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	400b      	ands	r3, r1
 80023ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f2:	431a      	orrs	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	0007ffff 	.word	0x0007ffff

0800240c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 031f 	and.w	r3, r3, #31
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002454:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6093      	str	r3, [r2, #8]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800247c:	d101      	bne.n	8002482 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80024a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024cc:	d101      	bne.n	80024d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024f4:	f043 0201 	orr.w	r2, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <LL_ADC_IsEnabled+0x18>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <LL_ADC_IsEnabled+0x1a>
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800253e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002542:	f043 0204 	orr.w	r2, r3, #4
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b04      	cmp	r3, #4
 8002568:	d101      	bne.n	800256e <LL_ADC_REG_IsConversionOngoing+0x18>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b08      	cmp	r3, #8
 800258e:	d101      	bne.n	8002594 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b089      	sub	sp, #36	@ 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e130      	b.n	8002820 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d109      	bne.n	80025e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff faf3 	bl	8001bb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff3f 	bl	8002468 <LL_ADC_IsDeepPowerDownEnabled>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d004      	beq.n	80025fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff25 	bl	8002444 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff ff5a 	bl	80024b8 <LL_ADC_IsInternalRegulatorEnabled>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d115      	bne.n	8002636 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ff3e 	bl	8002490 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002614:	4b84      	ldr	r3, [pc, #528]	@ (8002828 <HAL_ADC_Init+0x284>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	099b      	lsrs	r3, r3, #6
 800261a:	4a84      	ldr	r2, [pc, #528]	@ (800282c <HAL_ADC_Init+0x288>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	3301      	adds	r3, #1
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002628:	e002      	b.n	8002630 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	3b01      	subs	r3, #1
 800262e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f9      	bne.n	800262a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ff3c 	bl	80024b8 <LL_ADC_IsInternalRegulatorEnabled>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10d      	bne.n	8002662 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800264a:	f043 0210 	orr.w	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002656:	f043 0201 	orr.w	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff ff75 	bl	8002556 <LL_ADC_REG_IsConversionOngoing>
 800266c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	f040 80c9 	bne.w	800280e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 80c5 	bne.w	800280e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002688:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800268c:	f043 0202 	orr.w	r2, r3, #2
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff35 	bl	8002508 <LL_ADC_IsEnabled>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d115      	bne.n	80026d0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026a4:	4862      	ldr	r0, [pc, #392]	@ (8002830 <HAL_ADC_Init+0x28c>)
 80026a6:	f7ff ff2f 	bl	8002508 <LL_ADC_IsEnabled>
 80026aa:	4604      	mov	r4, r0
 80026ac:	4861      	ldr	r0, [pc, #388]	@ (8002834 <HAL_ADC_Init+0x290>)
 80026ae:	f7ff ff2b 	bl	8002508 <LL_ADC_IsEnabled>
 80026b2:	4603      	mov	r3, r0
 80026b4:	431c      	orrs	r4, r3
 80026b6:	4860      	ldr	r0, [pc, #384]	@ (8002838 <HAL_ADC_Init+0x294>)
 80026b8:	f7ff ff26 	bl	8002508 <LL_ADC_IsEnabled>
 80026bc:	4603      	mov	r3, r0
 80026be:	4323      	orrs	r3, r4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d105      	bne.n	80026d0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4619      	mov	r1, r3
 80026ca:	485c      	ldr	r0, [pc, #368]	@ (800283c <HAL_ADC_Init+0x298>)
 80026cc:	f7ff fd86 	bl	80021dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	7e5b      	ldrb	r3, [r3, #25]
 80026d4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026da:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80026e0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80026e6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ee:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d106      	bne.n	800270c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002702:	3b01      	subs	r3, #1
 8002704:	045b      	lsls	r3, r3, #17
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002710:	2b00      	cmp	r3, #0
 8002712:	d009      	beq.n	8002728 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002718:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002720:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	4b44      	ldr	r3, [pc, #272]	@ (8002840 <HAL_ADC_Init+0x29c>)
 8002730:	4013      	ands	r3, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	69b9      	ldr	r1, [r7, #24]
 8002738:	430b      	orrs	r3, r1
 800273a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff1b 	bl	800257c <LL_ADC_INJ_IsConversionOngoing>
 8002746:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d13d      	bne.n	80027ca <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d13a      	bne.n	80027ca <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002758:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002760:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002770:	f023 0302 	bic.w	r3, r3, #2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	69b9      	ldr	r1, [r7, #24]
 800277a:	430b      	orrs	r3, r1
 800277c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002784:	2b01      	cmp	r3, #1
 8002786:	d118      	bne.n	80027ba <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002792:	f023 0304 	bic.w	r3, r3, #4
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800279e:	4311      	orrs	r1, r2
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80027a4:	4311      	orrs	r1, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80027aa:	430a      	orrs	r2, r1
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	611a      	str	r2, [r3, #16]
 80027b8:	e007      	b.n	80027ca <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0201 	bic.w	r2, r2, #1
 80027c8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d10c      	bne.n	80027ec <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d8:	f023 010f 	bic.w	r1, r3, #15
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	1e5a      	subs	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80027ea:	e007      	b.n	80027fc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 020f 	bic.w	r2, r2, #15
 80027fa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002800:	f023 0303 	bic.w	r3, r3, #3
 8002804:	f043 0201 	orr.w	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	655a      	str	r2, [r3, #84]	@ 0x54
 800280c:	e007      	b.n	800281e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002812:	f043 0210 	orr.w	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800281e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3724      	adds	r7, #36	@ 0x24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd90      	pop	{r4, r7, pc}
 8002828:	20000058 	.word	0x20000058
 800282c:	053e2d63 	.word	0x053e2d63
 8002830:	50040000 	.word	0x50040000
 8002834:	50040100 	.word	0x50040100
 8002838:	50040200 	.word	0x50040200
 800283c:	50040300 	.word	0x50040300
 8002840:	fff0c007 	.word	0xfff0c007

08002844 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800284c:	4857      	ldr	r0, [pc, #348]	@ (80029ac <HAL_ADC_Start+0x168>)
 800284e:	f7ff fddd 	bl	800240c <LL_ADC_GetMultimode>
 8002852:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff fe7c 	bl	8002556 <LL_ADC_REG_IsConversionOngoing>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	f040 809c 	bne.w	800299e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_ADC_Start+0x30>
 8002870:	2302      	movs	r3, #2
 8002872:	e097      	b.n	80029a4 <HAL_ADC_Start+0x160>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 fd73 	bl	8003368 <ADC_Enable>
 8002882:	4603      	mov	r3, r0
 8002884:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002886:	7dfb      	ldrb	r3, [r7, #23]
 8002888:	2b00      	cmp	r3, #0
 800288a:	f040 8083 	bne.w	8002994 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002892:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a42      	ldr	r2, [pc, #264]	@ (80029b0 <HAL_ADC_Start+0x16c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d002      	beq.n	80028b2 <HAL_ADC_Start+0x6e>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	e000      	b.n	80028b4 <HAL_ADC_Start+0x70>
 80028b2:	4b40      	ldr	r3, [pc, #256]	@ (80029b4 <HAL_ADC_Start+0x170>)
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d002      	beq.n	80028c2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d105      	bne.n	80028ce <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028da:	d106      	bne.n	80028ea <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e0:	f023 0206 	bic.w	r2, r3, #6
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80028e8:	e002      	b.n	80028f0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	221c      	movs	r2, #28
 80028f6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a2a      	ldr	r2, [pc, #168]	@ (80029b0 <HAL_ADC_Start+0x16c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d002      	beq.n	8002910 <HAL_ADC_Start+0xcc>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	e000      	b.n	8002912 <HAL_ADC_Start+0xce>
 8002910:	4b28      	ldr	r3, [pc, #160]	@ (80029b4 <HAL_ADC_Start+0x170>)
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	4293      	cmp	r3, r2
 8002918:	d008      	beq.n	800292c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	2b05      	cmp	r3, #5
 8002924:	d002      	beq.n	800292c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	2b09      	cmp	r3, #9
 800292a:	d114      	bne.n	8002956 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d007      	beq.n	800294a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800293e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002942:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fded 	bl	800252e <LL_ADC_REG_StartConversion>
 8002954:	e025      	b.n	80029a2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a12      	ldr	r2, [pc, #72]	@ (80029b0 <HAL_ADC_Start+0x16c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d002      	beq.n	8002972 <HAL_ADC_Start+0x12e>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	e000      	b.n	8002974 <HAL_ADC_Start+0x130>
 8002972:	4b10      	ldr	r3, [pc, #64]	@ (80029b4 <HAL_ADC_Start+0x170>)
 8002974:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00f      	beq.n	80029a2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002986:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800298a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	655a      	str	r2, [r3, #84]	@ 0x54
 8002992:	e006      	b.n	80029a2 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800299c:	e001      	b.n	80029a2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800299e:	2302      	movs	r3, #2
 80029a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80029a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	50040300 	.word	0x50040300
 80029b0:	50040100 	.word	0x50040100
 80029b4:	50040000 	.word	0x50040000

080029b8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029c2:	4866      	ldr	r0, [pc, #408]	@ (8002b5c <HAL_ADC_PollForConversion+0x1a4>)
 80029c4:	f7ff fd22 	bl	800240c <LL_ADC_GetMultimode>
 80029c8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d102      	bne.n	80029d8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80029d2:	2308      	movs	r3, #8
 80029d4:	61fb      	str	r3, [r7, #28]
 80029d6:	e02a      	b.n	8002a2e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d005      	beq.n	80029ea <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b05      	cmp	r3, #5
 80029e2:	d002      	beq.n	80029ea <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	2b09      	cmp	r3, #9
 80029e8:	d111      	bne.n	8002a0e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d007      	beq.n	8002a08 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029fc:	f043 0220 	orr.w	r2, r3, #32
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0a4      	b.n	8002b52 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a08:	2304      	movs	r3, #4
 8002a0a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a0c:	e00f      	b.n	8002a2e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a0e:	4853      	ldr	r0, [pc, #332]	@ (8002b5c <HAL_ADC_PollForConversion+0x1a4>)
 8002a10:	f7ff fd0a 	bl	8002428 <LL_ADC_GetMultiDMATransfer>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d007      	beq.n	8002a2a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1e:	f043 0220 	orr.w	r2, r3, #32
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e093      	b.n	8002b52 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a2e:	f7ff fbc9 	bl	80021c4 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a34:	e021      	b.n	8002a7a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3c:	d01d      	beq.n	8002a7a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a3e:	f7ff fbc1 	bl	80021c4 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d302      	bcc.n	8002a54 <HAL_ADC_PollForConversion+0x9c>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d112      	bne.n	8002a7a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10b      	bne.n	8002a7a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a66:	f043 0204 	orr.w	r2, r3, #4
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e06b      	b.n	8002b52 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0d6      	beq.n	8002a36 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fc28 	bl	80022ee <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01c      	beq.n	8002ade <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	7e5b      	ldrb	r3, [r3, #25]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d118      	bne.n	8002ade <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d111      	bne.n	8002ade <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002abe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d105      	bne.n	8002ade <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad6:	f043 0201 	orr.w	r2, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8002b60 <HAL_ADC_PollForConversion+0x1a8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d002      	beq.n	8002aee <HAL_ADC_PollForConversion+0x136>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	e000      	b.n	8002af0 <HAL_ADC_PollForConversion+0x138>
 8002aee:	4b1d      	ldr	r3, [pc, #116]	@ (8002b64 <HAL_ADC_PollForConversion+0x1ac>)
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d008      	beq.n	8002b0a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b05      	cmp	r3, #5
 8002b02:	d002      	beq.n	8002b0a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	2b09      	cmp	r3, #9
 8002b08:	d104      	bne.n	8002b14 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	e00c      	b.n	8002b2e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a11      	ldr	r2, [pc, #68]	@ (8002b60 <HAL_ADC_PollForConversion+0x1a8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d002      	beq.n	8002b24 <HAL_ADC_PollForConversion+0x16c>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	e000      	b.n	8002b26 <HAL_ADC_PollForConversion+0x16e>
 8002b24:	4b0f      	ldr	r3, [pc, #60]	@ (8002b64 <HAL_ADC_PollForConversion+0x1ac>)
 8002b26:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d104      	bne.n	8002b3e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2208      	movs	r2, #8
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	e008      	b.n	8002b50 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d103      	bne.n	8002b50 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	220c      	movs	r2, #12
 8002b4e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3720      	adds	r7, #32
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	50040300 	.word	0x50040300
 8002b60:	50040100 	.word	0x50040100
 8002b64:	50040000 	.word	0x50040000

08002b68 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
	...

08002b84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b0b6      	sub	sp, #216	@ 0xd8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x22>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e3c9      	b.n	800333a <HAL_ADC_ConfigChannel+0x7b6>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff fccf 	bl	8002556 <LL_ADC_REG_IsConversionOngoing>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f040 83aa 	bne.w	8003314 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	d824      	bhi.n	8002c1a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	3b02      	subs	r3, #2
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d81b      	bhi.n	8002c12 <HAL_ADC_ConfigChannel+0x8e>
 8002bda:	a201      	add	r2, pc, #4	@ (adr r2, 8002be0 <HAL_ADC_ConfigChannel+0x5c>)
 8002bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be0:	08002bf1 	.word	0x08002bf1
 8002be4:	08002bf9 	.word	0x08002bf9
 8002be8:	08002c01 	.word	0x08002c01
 8002bec:	08002c09 	.word	0x08002c09
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002bf0:	230c      	movs	r3, #12
 8002bf2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002bf6:	e010      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002bf8:	2312      	movs	r3, #18
 8002bfa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002bfe:	e00c      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002c00:	2318      	movs	r3, #24
 8002c02:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c06:	e008      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002c08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c10:	e003      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002c12:	2306      	movs	r3, #6
 8002c14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c18:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002c28:	f7ff fb74 	bl	8002314 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff fc90 	bl	8002556 <LL_ADC_REG_IsConversionOngoing>
 8002c36:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fc9c 	bl	800257c <LL_ADC_INJ_IsConversionOngoing>
 8002c44:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f040 81a4 	bne.w	8002f9a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 819f 	bne.w	8002f9a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6818      	ldr	r0, [r3, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	6819      	ldr	r1, [r3, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	f7ff fb7f 	bl	800236c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	695a      	ldr	r2, [r3, #20]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	08db      	lsrs	r3, r3, #3
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6818      	ldr	r0, [r3, #0]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	6919      	ldr	r1, [r3, #16]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ca0:	f7ff fad0 	bl	8002244 <LL_ADC_SetOffset>
 8002ca4:	e179      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff faed 	bl	800228c <LL_ADC_GetOffsetChannel>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10a      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x14e>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fae2 	bl	800228c <LL_ADC_GetOffsetChannel>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	0e9b      	lsrs	r3, r3, #26
 8002ccc:	f003 021f 	and.w	r2, r3, #31
 8002cd0:	e01e      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x18c>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fad7 	bl	800228c <LL_ADC_GetOffsetChannel>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ce8:	fa93 f3a3 	rbit	r3, r3
 8002cec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cf0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cf8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002d00:	2320      	movs	r3, #32
 8002d02:	e004      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002d04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d08:	fab3 f383 	clz	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d105      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x1a4>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	0e9b      	lsrs	r3, r3, #26
 8002d22:	f003 031f 	and.w	r3, r3, #31
 8002d26:	e018      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x1d6>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d34:	fa93 f3a3 	rbit	r3, r3
 8002d38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002d3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002d44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002d4c:	2320      	movs	r3, #32
 8002d4e:	e004      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002d50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d54:	fab3 f383 	clz	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d106      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2200      	movs	r2, #0
 8002d64:	2100      	movs	r1, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff faa6 	bl	80022b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2101      	movs	r1, #1
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fa8a 	bl	800228c <LL_ADC_GetOffsetChannel>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10a      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x214>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2101      	movs	r1, #1
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fa7f 	bl	800228c <LL_ADC_GetOffsetChannel>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	0e9b      	lsrs	r3, r3, #26
 8002d92:	f003 021f 	and.w	r2, r3, #31
 8002d96:	e01e      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x252>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fa74 	bl	800228c <LL_ADC_GetOffsetChannel>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002db6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002dba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002dbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002dc6:	2320      	movs	r3, #32
 8002dc8:	e004      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002dca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d105      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x26a>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	0e9b      	lsrs	r3, r3, #26
 8002de8:	f003 031f 	and.w	r3, r3, #31
 8002dec:	e018      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x29c>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002e02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e06:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002e0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002e12:	2320      	movs	r3, #32
 8002e14:	e004      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002e16:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e1a:	fab3 f383 	clz	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d106      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fa43 	bl	80022b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2102      	movs	r1, #2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fa27 	bl	800228c <LL_ADC_GetOffsetChannel>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10a      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x2da>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2102      	movs	r1, #2
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fa1c 	bl	800228c <LL_ADC_GetOffsetChannel>
 8002e54:	4603      	mov	r3, r0
 8002e56:	0e9b      	lsrs	r3, r3, #26
 8002e58:	f003 021f 	and.w	r2, r3, #31
 8002e5c:	e01e      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x318>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2102      	movs	r1, #2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fa11 	bl	800228c <LL_ADC_GetOffsetChannel>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002e7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002e84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002e8c:	2320      	movs	r3, #32
 8002e8e:	e004      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e94:	fab3 f383 	clz	r3, r3
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d105      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x330>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	0e9b      	lsrs	r3, r3, #26
 8002eae:	f003 031f 	and.w	r3, r3, #31
 8002eb2:	e014      	b.n	8002ede <HAL_ADC_ConfigChannel+0x35a>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ebc:	fa93 f3a3 	rbit	r3, r3
 8002ec0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002ec2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ec4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002ec8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002ed0:	2320      	movs	r3, #32
 8002ed2:	e004      	b.n	8002ede <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002ed4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ed8:	fab3 f383 	clz	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d106      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2102      	movs	r1, #2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff f9e4 	bl	80022b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2103      	movs	r1, #3
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff f9c8 	bl	800228c <LL_ADC_GetOffsetChannel>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10a      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x398>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2103      	movs	r1, #3
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff f9bd 	bl	800228c <LL_ADC_GetOffsetChannel>
 8002f12:	4603      	mov	r3, r0
 8002f14:	0e9b      	lsrs	r3, r3, #26
 8002f16:	f003 021f 	and.w	r2, r3, #31
 8002f1a:	e017      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x3c8>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2103      	movs	r1, #3
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff f9b2 	bl	800228c <LL_ADC_GetOffsetChannel>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f2e:	fa93 f3a3 	rbit	r3, r3
 8002f32:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f36:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002f38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002f3e:	2320      	movs	r3, #32
 8002f40:	e003      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002f42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d105      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x3e0>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	0e9b      	lsrs	r3, r3, #26
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	e011      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x404>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f6c:	fa93 f3a3 	rbit	r3, r3
 8002f70:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002f72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f74:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002f76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002f7c:	2320      	movs	r3, #32
 8002f7e:	e003      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002f80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f82:	fab3 f383 	clz	r3, r3
 8002f86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d106      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2200      	movs	r2, #0
 8002f92:	2103      	movs	r1, #3
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff f98f 	bl	80022b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff fab2 	bl	8002508 <LL_ADC_IsEnabled>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f040 8140 	bne.w	800322c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	f7ff fa03 	bl	80023c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	4a8f      	ldr	r2, [pc, #572]	@ (8003200 <HAL_ADC_ConfigChannel+0x67c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	f040 8131 	bne.w	800322c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10b      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x46e>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	0e9b      	lsrs	r3, r3, #26
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	2b09      	cmp	r3, #9
 8002fe8:	bf94      	ite	ls
 8002fea:	2301      	movls	r3, #1
 8002fec:	2300      	movhi	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	e019      	b.n	8003026 <HAL_ADC_ConfigChannel+0x4a2>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ffa:	fa93 f3a3 	rbit	r3, r3
 8002ffe:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003002:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003004:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800300a:	2320      	movs	r3, #32
 800300c:	e003      	b.n	8003016 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800300e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003010:	fab3 f383 	clz	r3, r3
 8003014:	b2db      	uxtb	r3, r3
 8003016:	3301      	adds	r3, #1
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	2b09      	cmp	r3, #9
 800301e:	bf94      	ite	ls
 8003020:	2301      	movls	r3, #1
 8003022:	2300      	movhi	r3, #0
 8003024:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003026:	2b00      	cmp	r3, #0
 8003028:	d079      	beq.n	800311e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003032:	2b00      	cmp	r3, #0
 8003034:	d107      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x4c2>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	0e9b      	lsrs	r3, r3, #26
 800303c:	3301      	adds	r3, #1
 800303e:	069b      	lsls	r3, r3, #26
 8003040:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003044:	e015      	b.n	8003072 <HAL_ADC_ConfigChannel+0x4ee>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800304e:	fa93 f3a3 	rbit	r3, r3
 8003052:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003054:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003056:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003058:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800305e:	2320      	movs	r3, #32
 8003060:	e003      	b.n	800306a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003064:	fab3 f383 	clz	r3, r3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	3301      	adds	r3, #1
 800306c:	069b      	lsls	r3, r3, #26
 800306e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x50e>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	0e9b      	lsrs	r3, r3, #26
 8003084:	3301      	adds	r3, #1
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	2101      	movs	r1, #1
 800308c:	fa01 f303 	lsl.w	r3, r1, r3
 8003090:	e017      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x53e>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003098:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800309a:	fa93 f3a3 	rbit	r3, r3
 800309e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80030a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030a2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80030a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80030aa:	2320      	movs	r3, #32
 80030ac:	e003      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80030ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030b0:	fab3 f383 	clz	r3, r3
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	3301      	adds	r3, #1
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	2101      	movs	r1, #1
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	ea42 0103 	orr.w	r1, r2, r3
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10a      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x564>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	0e9b      	lsrs	r3, r3, #26
 80030d8:	3301      	adds	r3, #1
 80030da:	f003 021f 	and.w	r2, r3, #31
 80030de:	4613      	mov	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4413      	add	r3, r2
 80030e4:	051b      	lsls	r3, r3, #20
 80030e6:	e018      	b.n	800311a <HAL_ADC_ConfigChannel+0x596>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80030f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80030fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003100:	2320      	movs	r3, #32
 8003102:	e003      	b.n	800310c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	3301      	adds	r3, #1
 800310e:	f003 021f 	and.w	r2, r3, #31
 8003112:	4613      	mov	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	4413      	add	r3, r2
 8003118:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800311a:	430b      	orrs	r3, r1
 800311c:	e081      	b.n	8003222 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003126:	2b00      	cmp	r3, #0
 8003128:	d107      	bne.n	800313a <HAL_ADC_ConfigChannel+0x5b6>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	0e9b      	lsrs	r3, r3, #26
 8003130:	3301      	adds	r3, #1
 8003132:	069b      	lsls	r3, r3, #26
 8003134:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003138:	e015      	b.n	8003166 <HAL_ADC_ConfigChannel+0x5e2>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800314c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003152:	2320      	movs	r3, #32
 8003154:	e003      	b.n	800315e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003158:	fab3 f383 	clz	r3, r3
 800315c:	b2db      	uxtb	r3, r3
 800315e:	3301      	adds	r3, #1
 8003160:	069b      	lsls	r3, r3, #26
 8003162:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316e:	2b00      	cmp	r3, #0
 8003170:	d109      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x602>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	0e9b      	lsrs	r3, r3, #26
 8003178:	3301      	adds	r3, #1
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	2101      	movs	r1, #1
 8003180:	fa01 f303 	lsl.w	r3, r1, r3
 8003184:	e017      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x632>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	fa93 f3a3 	rbit	r3, r3
 8003192:	61bb      	str	r3, [r7, #24]
  return result;
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800319e:	2320      	movs	r3, #32
 80031a0:	e003      	b.n	80031aa <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	fab3 f383 	clz	r3, r3
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	3301      	adds	r3, #1
 80031ac:	f003 031f 	and.w	r3, r3, #31
 80031b0:	2101      	movs	r1, #1
 80031b2:	fa01 f303 	lsl.w	r3, r1, r3
 80031b6:	ea42 0103 	orr.w	r1, r2, r3
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10d      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x65e>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	0e9b      	lsrs	r3, r3, #26
 80031cc:	3301      	adds	r3, #1
 80031ce:	f003 021f 	and.w	r2, r3, #31
 80031d2:	4613      	mov	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4413      	add	r3, r2
 80031d8:	3b1e      	subs	r3, #30
 80031da:	051b      	lsls	r3, r3, #20
 80031dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031e0:	e01e      	b.n	8003220 <HAL_ADC_ConfigChannel+0x69c>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	fa93 f3a3 	rbit	r3, r3
 80031ee:	60fb      	str	r3, [r7, #12]
  return result;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d104      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80031fa:	2320      	movs	r3, #32
 80031fc:	e006      	b.n	800320c <HAL_ADC_ConfigChannel+0x688>
 80031fe:	bf00      	nop
 8003200:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	3301      	adds	r3, #1
 800320e:	f003 021f 	and.w	r2, r3, #31
 8003212:	4613      	mov	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4413      	add	r3, r2
 8003218:	3b1e      	subs	r3, #30
 800321a:	051b      	lsls	r3, r3, #20
 800321c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003220:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003226:	4619      	mov	r1, r3
 8003228:	f7ff f8a0 	bl	800236c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	4b44      	ldr	r3, [pc, #272]	@ (8003344 <HAL_ADC_ConfigChannel+0x7c0>)
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d07a      	beq.n	800332e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003238:	4843      	ldr	r0, [pc, #268]	@ (8003348 <HAL_ADC_ConfigChannel+0x7c4>)
 800323a:	f7fe fff5 	bl	8002228 <LL_ADC_GetCommonPathInternalCh>
 800323e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a41      	ldr	r2, [pc, #260]	@ (800334c <HAL_ADC_ConfigChannel+0x7c8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d12c      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800324c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003250:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d126      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a3c      	ldr	r2, [pc, #240]	@ (8003350 <HAL_ADC_ConfigChannel+0x7cc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d004      	beq.n	800326c <HAL_ADC_ConfigChannel+0x6e8>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a3b      	ldr	r2, [pc, #236]	@ (8003354 <HAL_ADC_ConfigChannel+0x7d0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d15d      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800326c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003270:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003274:	4619      	mov	r1, r3
 8003276:	4834      	ldr	r0, [pc, #208]	@ (8003348 <HAL_ADC_ConfigChannel+0x7c4>)
 8003278:	f7fe ffc3 	bl	8002202 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800327c:	4b36      	ldr	r3, [pc, #216]	@ (8003358 <HAL_ADC_ConfigChannel+0x7d4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	099b      	lsrs	r3, r3, #6
 8003282:	4a36      	ldr	r2, [pc, #216]	@ (800335c <HAL_ADC_ConfigChannel+0x7d8>)
 8003284:	fba2 2303 	umull	r2, r3, r2, r3
 8003288:	099b      	lsrs	r3, r3, #6
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	4613      	mov	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003296:	e002      	b.n	800329e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	3b01      	subs	r3, #1
 800329c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f9      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032a4:	e040      	b.n	8003328 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a2d      	ldr	r2, [pc, #180]	@ (8003360 <HAL_ADC_ConfigChannel+0x7dc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d118      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d112      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a23      	ldr	r2, [pc, #140]	@ (8003350 <HAL_ADC_ConfigChannel+0x7cc>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d004      	beq.n	80032d0 <HAL_ADC_ConfigChannel+0x74c>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a22      	ldr	r2, [pc, #136]	@ (8003354 <HAL_ADC_ConfigChannel+0x7d0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d12d      	bne.n	800332c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032d8:	4619      	mov	r1, r3
 80032da:	481b      	ldr	r0, [pc, #108]	@ (8003348 <HAL_ADC_ConfigChannel+0x7c4>)
 80032dc:	f7fe ff91 	bl	8002202 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032e0:	e024      	b.n	800332c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003364 <HAL_ADC_ConfigChannel+0x7e0>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d120      	bne.n	800332e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d11a      	bne.n	800332e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a14      	ldr	r2, [pc, #80]	@ (8003350 <HAL_ADC_ConfigChannel+0x7cc>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d115      	bne.n	800332e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003302:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003306:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800330a:	4619      	mov	r1, r3
 800330c:	480e      	ldr	r0, [pc, #56]	@ (8003348 <HAL_ADC_ConfigChannel+0x7c4>)
 800330e:	f7fe ff78 	bl	8002202 <LL_ADC_SetCommonPathInternalCh>
 8003312:	e00c      	b.n	800332e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003318:	f043 0220 	orr.w	r2, r3, #32
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003326:	e002      	b.n	800332e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003328:	bf00      	nop
 800332a:	e000      	b.n	800332e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800332c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003336:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800333a:	4618      	mov	r0, r3
 800333c:	37d8      	adds	r7, #216	@ 0xd8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	80080000 	.word	0x80080000
 8003348:	50040300 	.word	0x50040300
 800334c:	c7520000 	.word	0xc7520000
 8003350:	50040000 	.word	0x50040000
 8003354:	50040200 	.word	0x50040200
 8003358:	20000058 	.word	0x20000058
 800335c:	053e2d63 	.word	0x053e2d63
 8003360:	cb840000 	.word	0xcb840000
 8003364:	80000001 	.word	0x80000001

08003368 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003370:	2300      	movs	r3, #0
 8003372:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff f8c5 	bl	8002508 <LL_ADC_IsEnabled>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d169      	bne.n	8003458 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	4b36      	ldr	r3, [pc, #216]	@ (8003464 <ADC_Enable+0xfc>)
 800338c:	4013      	ands	r3, r2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00d      	beq.n	80033ae <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003396:	f043 0210 	orr.w	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a2:	f043 0201 	orr.w	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e055      	b.n	800345a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff f894 	bl	80024e0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033b8:	482b      	ldr	r0, [pc, #172]	@ (8003468 <ADC_Enable+0x100>)
 80033ba:	f7fe ff35 	bl	8002228 <LL_ADC_GetCommonPathInternalCh>
 80033be:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80033c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d013      	beq.n	80033f0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033c8:	4b28      	ldr	r3, [pc, #160]	@ (800346c <ADC_Enable+0x104>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	099b      	lsrs	r3, r3, #6
 80033ce:	4a28      	ldr	r2, [pc, #160]	@ (8003470 <ADC_Enable+0x108>)
 80033d0:	fba2 2303 	umull	r2, r3, r2, r3
 80033d4:	099b      	lsrs	r3, r3, #6
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	4613      	mov	r3, r2
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033e2:	e002      	b.n	80033ea <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f9      	bne.n	80033e4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80033f0:	f7fe fee8 	bl	80021c4 <HAL_GetTick>
 80033f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033f6:	e028      	b.n	800344a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff f883 	bl	8002508 <LL_ADC_IsEnabled>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d104      	bne.n	8003412 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff f867 	bl	80024e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003412:	f7fe fed7 	bl	80021c4 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d914      	bls.n	800344a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b01      	cmp	r3, #1
 800342c:	d00d      	beq.n	800344a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003432:	f043 0210 	orr.w	r2, r3, #16
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800343e:	f043 0201 	orr.w	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e007      	b.n	800345a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b01      	cmp	r3, #1
 8003456:	d1cf      	bne.n	80033f8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	8000003f 	.word	0x8000003f
 8003468:	50040300 	.word	0x50040300
 800346c:	20000058 	.word	0x20000058
 8003470:	053e2d63 	.word	0x053e2d63

08003474 <LL_ADC_IsEnabled>:
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <LL_ADC_IsEnabled+0x18>
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <LL_ADC_IsEnabled+0x1a>
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <LL_ADC_REG_IsConversionOngoing>:
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d101      	bne.n	80034b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b09f      	sub	sp, #124	@ 0x7c
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034da:	2302      	movs	r3, #2
 80034dc:	e093      	b.n	8003606 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80034e6:	2300      	movs	r3, #0
 80034e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80034ea:	2300      	movs	r3, #0
 80034ec:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a47      	ldr	r2, [pc, #284]	@ (8003610 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d102      	bne.n	80034fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80034f8:	4b46      	ldr	r3, [pc, #280]	@ (8003614 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	e001      	b.n	8003502 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80034fe:	2300      	movs	r3, #0
 8003500:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10b      	bne.n	8003520 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350c:	f043 0220 	orr.w	r2, r3, #32
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e072      	b.n	8003606 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff ffb9 	bl	800349a <LL_ADC_REG_IsConversionOngoing>
 8003528:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff ffb3 	bl	800349a <LL_ADC_REG_IsConversionOngoing>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d154      	bne.n	80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800353a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800353c:	2b00      	cmp	r3, #0
 800353e:	d151      	bne.n	80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003540:	4b35      	ldr	r3, [pc, #212]	@ (8003618 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003542:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d02c      	beq.n	80035a6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800354c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800355e:	035b      	lsls	r3, r3, #13
 8003560:	430b      	orrs	r3, r1
 8003562:	431a      	orrs	r2, r3
 8003564:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003566:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003568:	4829      	ldr	r0, [pc, #164]	@ (8003610 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800356a:	f7ff ff83 	bl	8003474 <LL_ADC_IsEnabled>
 800356e:	4604      	mov	r4, r0
 8003570:	4828      	ldr	r0, [pc, #160]	@ (8003614 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003572:	f7ff ff7f 	bl	8003474 <LL_ADC_IsEnabled>
 8003576:	4603      	mov	r3, r0
 8003578:	431c      	orrs	r4, r3
 800357a:	4828      	ldr	r0, [pc, #160]	@ (800361c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800357c:	f7ff ff7a 	bl	8003474 <LL_ADC_IsEnabled>
 8003580:	4603      	mov	r3, r0
 8003582:	4323      	orrs	r3, r4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d137      	bne.n	80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003588:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003590:	f023 030f 	bic.w	r3, r3, #15
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	6811      	ldr	r1, [r2, #0]
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	6892      	ldr	r2, [r2, #8]
 800359c:	430a      	orrs	r2, r1
 800359e:	431a      	orrs	r2, r3
 80035a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035a2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035a4:	e028      	b.n	80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80035a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035b0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035b2:	4817      	ldr	r0, [pc, #92]	@ (8003610 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80035b4:	f7ff ff5e 	bl	8003474 <LL_ADC_IsEnabled>
 80035b8:	4604      	mov	r4, r0
 80035ba:	4816      	ldr	r0, [pc, #88]	@ (8003614 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80035bc:	f7ff ff5a 	bl	8003474 <LL_ADC_IsEnabled>
 80035c0:	4603      	mov	r3, r0
 80035c2:	431c      	orrs	r4, r3
 80035c4:	4815      	ldr	r0, [pc, #84]	@ (800361c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80035c6:	f7ff ff55 	bl	8003474 <LL_ADC_IsEnabled>
 80035ca:	4603      	mov	r3, r0
 80035cc:	4323      	orrs	r3, r4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d112      	bne.n	80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80035da:	f023 030f 	bic.w	r3, r3, #15
 80035de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80035e0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035e2:	e009      	b.n	80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e8:	f043 0220 	orr.w	r2, r3, #32
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80035f6:	e000      	b.n	80035fa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003602:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003606:	4618      	mov	r0, r3
 8003608:	377c      	adds	r7, #124	@ 0x7c
 800360a:	46bd      	mov	sp, r7
 800360c:	bd90      	pop	{r4, r7, pc}
 800360e:	bf00      	nop
 8003610:	50040000 	.word	0x50040000
 8003614:	50040100 	.word	0x50040100
 8003618:	50040300 	.word	0x50040300
 800361c:	50040200 	.word	0x50040200

08003620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003630:	4b0c      	ldr	r3, [pc, #48]	@ (8003664 <__NVIC_SetPriorityGrouping+0x44>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800363c:	4013      	ands	r3, r2
 800363e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003648:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800364c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003652:	4a04      	ldr	r2, [pc, #16]	@ (8003664 <__NVIC_SetPriorityGrouping+0x44>)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	60d3      	str	r3, [r2, #12]
}
 8003658:	bf00      	nop
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800366c:	4b04      	ldr	r3, [pc, #16]	@ (8003680 <__NVIC_GetPriorityGrouping+0x18>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	0a1b      	lsrs	r3, r3, #8
 8003672:	f003 0307 	and.w	r3, r3, #7
}
 8003676:	4618      	mov	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	e000ed00 	.word	0xe000ed00

08003684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800368e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003692:	2b00      	cmp	r3, #0
 8003694:	db0b      	blt.n	80036ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	f003 021f 	and.w	r2, r3, #31
 800369c:	4907      	ldr	r1, [pc, #28]	@ (80036bc <__NVIC_EnableIRQ+0x38>)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	2001      	movs	r0, #1
 80036a6:	fa00 f202 	lsl.w	r2, r0, r2
 80036aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	e000e100 	.word	0xe000e100

080036c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4603      	mov	r3, r0
 80036c8:	6039      	str	r1, [r7, #0]
 80036ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	db0a      	blt.n	80036ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	490c      	ldr	r1, [pc, #48]	@ (800370c <__NVIC_SetPriority+0x4c>)
 80036da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036de:	0112      	lsls	r2, r2, #4
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	440b      	add	r3, r1
 80036e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036e8:	e00a      	b.n	8003700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4908      	ldr	r1, [pc, #32]	@ (8003710 <__NVIC_SetPriority+0x50>)
 80036f0:	79fb      	ldrb	r3, [r7, #7]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	3b04      	subs	r3, #4
 80036f8:	0112      	lsls	r2, r2, #4
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	440b      	add	r3, r1
 80036fe:	761a      	strb	r2, [r3, #24]
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	e000e100 	.word	0xe000e100
 8003710:	e000ed00 	.word	0xe000ed00

08003714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003714:	b480      	push	{r7}
 8003716:	b089      	sub	sp, #36	@ 0x24
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f1c3 0307 	rsb	r3, r3, #7
 800372e:	2b04      	cmp	r3, #4
 8003730:	bf28      	it	cs
 8003732:	2304      	movcs	r3, #4
 8003734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	3304      	adds	r3, #4
 800373a:	2b06      	cmp	r3, #6
 800373c:	d902      	bls.n	8003744 <NVIC_EncodePriority+0x30>
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	3b03      	subs	r3, #3
 8003742:	e000      	b.n	8003746 <NVIC_EncodePriority+0x32>
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003748:	f04f 32ff 	mov.w	r2, #4294967295
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43da      	mvns	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	401a      	ands	r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800375c:	f04f 31ff 	mov.w	r1, #4294967295
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	fa01 f303 	lsl.w	r3, r1, r3
 8003766:	43d9      	mvns	r1, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800376c:	4313      	orrs	r3, r2
         );
}
 800376e:	4618      	mov	r0, r3
 8003770:	3724      	adds	r7, #36	@ 0x24
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ff4c 	bl	8003620 <__NVIC_SetPriorityGrouping>
}
 8003788:	bf00      	nop
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037a2:	f7ff ff61 	bl	8003668 <__NVIC_GetPriorityGrouping>
 80037a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	6978      	ldr	r0, [r7, #20]
 80037ae:	f7ff ffb1 	bl	8003714 <NVIC_EncodePriority>
 80037b2:	4602      	mov	r2, r0
 80037b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b8:	4611      	mov	r1, r2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff ff80 	bl	80036c0 <__NVIC_SetPriority>
}
 80037c0:	bf00      	nop
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff ff54 	bl	8003684 <__NVIC_EnableIRQ>
}
 80037dc:	bf00      	nop
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037f2:	e17f      	b.n	8003af4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	2101      	movs	r1, #1
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003800:	4013      	ands	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 8171 	beq.w	8003aee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	2b01      	cmp	r3, #1
 8003816:	d005      	beq.n	8003824 <HAL_GPIO_Init+0x40>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 0303 	and.w	r3, r3, #3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d130      	bne.n	8003886 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	2203      	movs	r2, #3
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4013      	ands	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800385a:	2201      	movs	r2, #1
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43db      	mvns	r3, r3
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4013      	ands	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	091b      	lsrs	r3, r3, #4
 8003870:	f003 0201 	and.w	r2, r3, #1
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	2b03      	cmp	r3, #3
 8003890:	d118      	bne.n	80038c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003896:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003898:	2201      	movs	r2, #1
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4013      	ands	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	08db      	lsrs	r3, r3, #3
 80038ae:	f003 0201 	and.w	r2, r3, #1
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d017      	beq.n	8003900 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	2203      	movs	r2, #3
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	43db      	mvns	r3, r3
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4013      	ands	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d123      	bne.n	8003954 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	08da      	lsrs	r2, r3, #3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3208      	adds	r2, #8
 8003914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003918:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	220f      	movs	r2, #15
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4013      	ands	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	08da      	lsrs	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3208      	adds	r2, #8
 800394e:	6939      	ldr	r1, [r7, #16]
 8003950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	2203      	movs	r2, #3
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4013      	ands	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0203 	and.w	r2, r3, #3
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80ac 	beq.w	8003aee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003996:	4b5f      	ldr	r3, [pc, #380]	@ (8003b14 <HAL_GPIO_Init+0x330>)
 8003998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800399a:	4a5e      	ldr	r2, [pc, #376]	@ (8003b14 <HAL_GPIO_Init+0x330>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80039a2:	4b5c      	ldr	r3, [pc, #368]	@ (8003b14 <HAL_GPIO_Init+0x330>)
 80039a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039ae:	4a5a      	ldr	r2, [pc, #360]	@ (8003b18 <HAL_GPIO_Init+0x334>)
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	089b      	lsrs	r3, r3, #2
 80039b4:	3302      	adds	r3, #2
 80039b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	220f      	movs	r2, #15
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43db      	mvns	r3, r3
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4013      	ands	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80039d8:	d025      	beq.n	8003a26 <HAL_GPIO_Init+0x242>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a4f      	ldr	r2, [pc, #316]	@ (8003b1c <HAL_GPIO_Init+0x338>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01f      	beq.n	8003a22 <HAL_GPIO_Init+0x23e>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a4e      	ldr	r2, [pc, #312]	@ (8003b20 <HAL_GPIO_Init+0x33c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d019      	beq.n	8003a1e <HAL_GPIO_Init+0x23a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a4d      	ldr	r2, [pc, #308]	@ (8003b24 <HAL_GPIO_Init+0x340>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d013      	beq.n	8003a1a <HAL_GPIO_Init+0x236>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a4c      	ldr	r2, [pc, #304]	@ (8003b28 <HAL_GPIO_Init+0x344>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00d      	beq.n	8003a16 <HAL_GPIO_Init+0x232>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a4b      	ldr	r2, [pc, #300]	@ (8003b2c <HAL_GPIO_Init+0x348>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d007      	beq.n	8003a12 <HAL_GPIO_Init+0x22e>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a4a      	ldr	r2, [pc, #296]	@ (8003b30 <HAL_GPIO_Init+0x34c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d101      	bne.n	8003a0e <HAL_GPIO_Init+0x22a>
 8003a0a:	2306      	movs	r3, #6
 8003a0c:	e00c      	b.n	8003a28 <HAL_GPIO_Init+0x244>
 8003a0e:	2307      	movs	r3, #7
 8003a10:	e00a      	b.n	8003a28 <HAL_GPIO_Init+0x244>
 8003a12:	2305      	movs	r3, #5
 8003a14:	e008      	b.n	8003a28 <HAL_GPIO_Init+0x244>
 8003a16:	2304      	movs	r3, #4
 8003a18:	e006      	b.n	8003a28 <HAL_GPIO_Init+0x244>
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e004      	b.n	8003a28 <HAL_GPIO_Init+0x244>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e002      	b.n	8003a28 <HAL_GPIO_Init+0x244>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <HAL_GPIO_Init+0x244>
 8003a26:	2300      	movs	r3, #0
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	f002 0203 	and.w	r2, r2, #3
 8003a2e:	0092      	lsls	r2, r2, #2
 8003a30:	4093      	lsls	r3, r2
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a38:	4937      	ldr	r1, [pc, #220]	@ (8003b18 <HAL_GPIO_Init+0x334>)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	089b      	lsrs	r3, r3, #2
 8003a3e:	3302      	adds	r3, #2
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a46:	4b3b      	ldr	r3, [pc, #236]	@ (8003b34 <HAL_GPIO_Init+0x350>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4013      	ands	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a6a:	4a32      	ldr	r2, [pc, #200]	@ (8003b34 <HAL_GPIO_Init+0x350>)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a70:	4b30      	ldr	r3, [pc, #192]	@ (8003b34 <HAL_GPIO_Init+0x350>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a94:	4a27      	ldr	r2, [pc, #156]	@ (8003b34 <HAL_GPIO_Init+0x350>)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a9a:	4b26      	ldr	r3, [pc, #152]	@ (8003b34 <HAL_GPIO_Init+0x350>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003abe:	4a1d      	ldr	r2, [pc, #116]	@ (8003b34 <HAL_GPIO_Init+0x350>)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b34 <HAL_GPIO_Init+0x350>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	43db      	mvns	r3, r3
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ae8:	4a12      	ldr	r2, [pc, #72]	@ (8003b34 <HAL_GPIO_Init+0x350>)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	3301      	adds	r3, #1
 8003af2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	fa22 f303 	lsr.w	r3, r2, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f47f ae78 	bne.w	80037f4 <HAL_GPIO_Init+0x10>
  }
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	371c      	adds	r7, #28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40010000 	.word	0x40010000
 8003b1c:	48000400 	.word	0x48000400
 8003b20:	48000800 	.word	0x48000800
 8003b24:	48000c00 	.word	0x48000c00
 8003b28:	48001000 	.word	0x48001000
 8003b2c:	48001400 	.word	0x48001400
 8003b30:	48001800 	.word	0x48001800
 8003b34:	40010400 	.word	0x40010400

08003b38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	887b      	ldrh	r3, [r7, #2]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b50:	2301      	movs	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
 8003b54:	e001      	b.n	8003b5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b56:	2300      	movs	r3, #0
 8003b58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	807b      	strh	r3, [r7, #2]
 8003b74:	4613      	mov	r3, r2
 8003b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b78:	787b      	ldrb	r3, [r7, #1]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b7e:	887a      	ldrh	r2, [r7, #2]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b84:	e002      	b.n	8003b8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b86:	887a      	ldrh	r2, [r7, #2]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003baa:	887a      	ldrh	r2, [r7, #2]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	041a      	lsls	r2, r3, #16
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	43d9      	mvns	r1, r3
 8003bb6:	887b      	ldrh	r3, [r7, #2]
 8003bb8:	400b      	ands	r3, r1
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	619a      	str	r2, [r3, #24]
}
 8003bc0:	bf00      	nop
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003bd0:	4b04      	ldr	r3, [pc, #16]	@ (8003be4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40007000 	.word	0x40007000

08003be8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bf6:	d130      	bne.n	8003c5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bf8:	4b23      	ldr	r3, [pc, #140]	@ (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c04:	d038      	beq.n	8003c78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c06:	4b20      	ldr	r3, [pc, #128]	@ (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c0e:	4a1e      	ldr	r2, [pc, #120]	@ (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c16:	4b1d      	ldr	r3, [pc, #116]	@ (8003c8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2232      	movs	r2, #50	@ 0x32
 8003c1c:	fb02 f303 	mul.w	r3, r2, r3
 8003c20:	4a1b      	ldr	r2, [pc, #108]	@ (8003c90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	0c9b      	lsrs	r3, r3, #18
 8003c28:	3301      	adds	r3, #1
 8003c2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c2c:	e002      	b.n	8003c34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	3b01      	subs	r3, #1
 8003c32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c34:	4b14      	ldr	r3, [pc, #80]	@ (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c40:	d102      	bne.n	8003c48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1f2      	bne.n	8003c2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c48:	4b0f      	ldr	r3, [pc, #60]	@ (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c54:	d110      	bne.n	8003c78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e00f      	b.n	8003c7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c66:	d007      	beq.n	8003c78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c68:	4b07      	ldr	r3, [pc, #28]	@ (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c70:	4a05      	ldr	r2, [pc, #20]	@ (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40007000 	.word	0x40007000
 8003c8c:	20000058 	.word	0x20000058
 8003c90:	431bde83 	.word	0x431bde83

08003c94 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e3ca      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ca6:	4b97      	ldr	r3, [pc, #604]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cb0:	4b94      	ldr	r3, [pc, #592]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80e4 	beq.w	8003e90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d007      	beq.n	8003cde <HAL_RCC_OscConfig+0x4a>
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b0c      	cmp	r3, #12
 8003cd2:	f040 808b 	bne.w	8003dec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	f040 8087 	bne.w	8003dec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cde:	4b89      	ldr	r3, [pc, #548]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x62>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e3a2      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1a      	ldr	r2, [r3, #32]
 8003cfa:	4b82      	ldr	r3, [pc, #520]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d004      	beq.n	8003d10 <HAL_RCC_OscConfig+0x7c>
 8003d06:	4b7f      	ldr	r3, [pc, #508]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d0e:	e005      	b.n	8003d1c <HAL_RCC_OscConfig+0x88>
 8003d10:	4b7c      	ldr	r3, [pc, #496]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d223      	bcs.n	8003d68 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fd87 	bl	8004838 <RCC_SetFlashLatencyFromMSIRange>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e383      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d34:	4b73      	ldr	r3, [pc, #460]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a72      	ldr	r2, [pc, #456]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d3a:	f043 0308 	orr.w	r3, r3, #8
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	4b70      	ldr	r3, [pc, #448]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	496d      	ldr	r1, [pc, #436]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d52:	4b6c      	ldr	r3, [pc, #432]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	021b      	lsls	r3, r3, #8
 8003d60:	4968      	ldr	r1, [pc, #416]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	604b      	str	r3, [r1, #4]
 8003d66:	e025      	b.n	8003db4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d68:	4b66      	ldr	r3, [pc, #408]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a65      	ldr	r2, [pc, #404]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d6e:	f043 0308 	orr.w	r3, r3, #8
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	4b63      	ldr	r3, [pc, #396]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	4960      	ldr	r1, [pc, #384]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d86:	4b5f      	ldr	r3, [pc, #380]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	495b      	ldr	r1, [pc, #364]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d109      	bne.n	8003db4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fd47 	bl	8004838 <RCC_SetFlashLatencyFromMSIRange>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e343      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003db4:	f000 fc4a 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8003db8:	4602      	mov	r2, r0
 8003dba:	4b52      	ldr	r3, [pc, #328]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	091b      	lsrs	r3, r3, #4
 8003dc0:	f003 030f 	and.w	r3, r3, #15
 8003dc4:	4950      	ldr	r1, [pc, #320]	@ (8003f08 <HAL_RCC_OscConfig+0x274>)
 8003dc6:	5ccb      	ldrb	r3, [r1, r3]
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd0:	4a4e      	ldr	r2, [pc, #312]	@ (8003f0c <HAL_RCC_OscConfig+0x278>)
 8003dd2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003dd4:	4b4e      	ldr	r3, [pc, #312]	@ (8003f10 <HAL_RCC_OscConfig+0x27c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fe f829 	bl	8001e30 <HAL_InitTick>
 8003dde:	4603      	mov	r3, r0
 8003de0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d052      	beq.n	8003e8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	e327      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d032      	beq.n	8003e5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003df4:	4b43      	ldr	r3, [pc, #268]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a42      	ldr	r2, [pc, #264]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e00:	f7fe f9e0 	bl	80021c4 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e08:	f7fe f9dc 	bl	80021c4 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e310      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e1a:	4b3a      	ldr	r3, [pc, #232]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e26:	4b37      	ldr	r3, [pc, #220]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a36      	ldr	r2, [pc, #216]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e2c:	f043 0308 	orr.w	r3, r3, #8
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	4b34      	ldr	r3, [pc, #208]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	4931      	ldr	r1, [pc, #196]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e44:	4b2f      	ldr	r3, [pc, #188]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	492c      	ldr	r1, [pc, #176]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	604b      	str	r3, [r1, #4]
 8003e58:	e01a      	b.n	8003e90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a29      	ldr	r2, [pc, #164]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e66:	f7fe f9ad 	bl	80021c4 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e6e:	f7fe f9a9 	bl	80021c4 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e2dd      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e80:	4b20      	ldr	r3, [pc, #128]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1f0      	bne.n	8003e6e <HAL_RCC_OscConfig+0x1da>
 8003e8c:	e000      	b.n	8003e90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d074      	beq.n	8003f86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d005      	beq.n	8003eae <HAL_RCC_OscConfig+0x21a>
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b0c      	cmp	r3, #12
 8003ea6:	d10e      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d10b      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eae:	4b15      	ldr	r3, [pc, #84]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d064      	beq.n	8003f84 <HAL_RCC_OscConfig+0x2f0>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d160      	bne.n	8003f84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e2ba      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ece:	d106      	bne.n	8003ede <HAL_RCC_OscConfig+0x24a>
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003ed6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	e026      	b.n	8003f2c <HAL_RCC_OscConfig+0x298>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ee6:	d115      	bne.n	8003f14 <HAL_RCC_OscConfig+0x280>
 8003ee8:	4b06      	ldr	r3, [pc, #24]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a05      	ldr	r2, [pc, #20]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003eee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	4b03      	ldr	r3, [pc, #12]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a02      	ldr	r2, [pc, #8]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003efa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	e014      	b.n	8003f2c <HAL_RCC_OscConfig+0x298>
 8003f02:	bf00      	nop
 8003f04:	40021000 	.word	0x40021000
 8003f08:	0800b67c 	.word	0x0800b67c
 8003f0c:	20000058 	.word	0x20000058
 8003f10:	2000005c 	.word	0x2000005c
 8003f14:	4ba0      	ldr	r3, [pc, #640]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a9f      	ldr	r2, [pc, #636]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8003f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	4b9d      	ldr	r3, [pc, #628]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a9c      	ldr	r2, [pc, #624]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8003f26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d013      	beq.n	8003f5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7fe f946 	bl	80021c4 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f3c:	f7fe f942 	bl	80021c4 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b64      	cmp	r3, #100	@ 0x64
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e276      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f4e:	4b92      	ldr	r3, [pc, #584]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCC_OscConfig+0x2a8>
 8003f5a:	e014      	b.n	8003f86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fe f932 	bl	80021c4 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f64:	f7fe f92e 	bl	80021c4 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b64      	cmp	r3, #100	@ 0x64
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e262      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f76:	4b88      	ldr	r3, [pc, #544]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f0      	bne.n	8003f64 <HAL_RCC_OscConfig+0x2d0>
 8003f82:	e000      	b.n	8003f86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d060      	beq.n	8004054 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d005      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x310>
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	2b0c      	cmp	r3, #12
 8003f9c:	d119      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d116      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fa4:	4b7c      	ldr	r3, [pc, #496]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_OscConfig+0x328>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e23f      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fbc:	4b76      	ldr	r3, [pc, #472]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	061b      	lsls	r3, r3, #24
 8003fca:	4973      	ldr	r1, [pc, #460]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd0:	e040      	b.n	8004054 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d023      	beq.n	8004022 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fda:	4b6f      	ldr	r3, [pc, #444]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a6e      	ldr	r2, [pc, #440]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8003fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe6:	f7fe f8ed 	bl	80021c4 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fee:	f7fe f8e9 	bl	80021c4 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e21d      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004000:	4b65      	ldr	r3, [pc, #404]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400c:	4b62      	ldr	r3, [pc, #392]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	061b      	lsls	r3, r3, #24
 800401a:	495f      	ldr	r1, [pc, #380]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 800401c:	4313      	orrs	r3, r2
 800401e:	604b      	str	r3, [r1, #4]
 8004020:	e018      	b.n	8004054 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004022:	4b5d      	ldr	r3, [pc, #372]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a5c      	ldr	r2, [pc, #368]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8004028:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800402c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402e:	f7fe f8c9 	bl	80021c4 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004036:	f7fe f8c5 	bl	80021c4 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e1f9      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004048:	4b53      	ldr	r3, [pc, #332]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f0      	bne.n	8004036 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d03c      	beq.n	80040da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d01c      	beq.n	80040a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004068:	4b4b      	ldr	r3, [pc, #300]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 800406a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800406e:	4a4a      	ldr	r2, [pc, #296]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004078:	f7fe f8a4 	bl	80021c4 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004080:	f7fe f8a0 	bl	80021c4 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e1d4      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004092:	4b41      	ldr	r3, [pc, #260]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8004094:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0ef      	beq.n	8004080 <HAL_RCC_OscConfig+0x3ec>
 80040a0:	e01b      	b.n	80040da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040a2:	4b3d      	ldr	r3, [pc, #244]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 80040a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040a8:	4a3b      	ldr	r2, [pc, #236]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 80040aa:	f023 0301 	bic.w	r3, r3, #1
 80040ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b2:	f7fe f887 	bl	80021c4 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ba:	f7fe f883 	bl	80021c4 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e1b7      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040cc:	4b32      	ldr	r3, [pc, #200]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 80040ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1ef      	bne.n	80040ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 80a6 	beq.w	8004234 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040e8:	2300      	movs	r3, #0
 80040ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80040ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 80040ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10d      	bne.n	8004114 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f8:	4b27      	ldr	r3, [pc, #156]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 80040fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fc:	4a26      	ldr	r2, [pc, #152]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 80040fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004102:	6593      	str	r3, [r2, #88]	@ 0x58
 8004104:	4b24      	ldr	r3, [pc, #144]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8004106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004110:	2301      	movs	r3, #1
 8004112:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004114:	4b21      	ldr	r3, [pc, #132]	@ (800419c <HAL_RCC_OscConfig+0x508>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d118      	bne.n	8004152 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004120:	4b1e      	ldr	r3, [pc, #120]	@ (800419c <HAL_RCC_OscConfig+0x508>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a1d      	ldr	r2, [pc, #116]	@ (800419c <HAL_RCC_OscConfig+0x508>)
 8004126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800412a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800412c:	f7fe f84a 	bl	80021c4 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004134:	f7fe f846 	bl	80021c4 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e17a      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004146:	4b15      	ldr	r3, [pc, #84]	@ (800419c <HAL_RCC_OscConfig+0x508>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d108      	bne.n	800416c <HAL_RCC_OscConfig+0x4d8>
 800415a:	4b0f      	ldr	r3, [pc, #60]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004160:	4a0d      	ldr	r2, [pc, #52]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800416a:	e029      	b.n	80041c0 <HAL_RCC_OscConfig+0x52c>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b05      	cmp	r3, #5
 8004172:	d115      	bne.n	80041a0 <HAL_RCC_OscConfig+0x50c>
 8004174:	4b08      	ldr	r3, [pc, #32]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417a:	4a07      	ldr	r2, [pc, #28]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 800417c:	f043 0304 	orr.w	r3, r3, #4
 8004180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004184:	4b04      	ldr	r3, [pc, #16]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800418a:	4a03      	ldr	r2, [pc, #12]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004194:	e014      	b.n	80041c0 <HAL_RCC_OscConfig+0x52c>
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000
 800419c:	40007000 	.word	0x40007000
 80041a0:	4b9c      	ldr	r3, [pc, #624]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a6:	4a9b      	ldr	r2, [pc, #620]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80041a8:	f023 0301 	bic.w	r3, r3, #1
 80041ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041b0:	4b98      	ldr	r3, [pc, #608]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b6:	4a97      	ldr	r2, [pc, #604]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80041b8:	f023 0304 	bic.w	r3, r3, #4
 80041bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d016      	beq.n	80041f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c8:	f7fd fffc 	bl	80021c4 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ce:	e00a      	b.n	80041e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d0:	f7fd fff8 	bl	80021c4 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e12a      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e6:	4b8b      	ldr	r3, [pc, #556]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0ed      	beq.n	80041d0 <HAL_RCC_OscConfig+0x53c>
 80041f4:	e015      	b.n	8004222 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f6:	f7fd ffe5 	bl	80021c4 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041fc:	e00a      	b.n	8004214 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041fe:	f7fd ffe1 	bl	80021c4 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	f241 3288 	movw	r2, #5000	@ 0x1388
 800420c:	4293      	cmp	r3, r2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e113      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004214:	4b7f      	ldr	r3, [pc, #508]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1ed      	bne.n	80041fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004222:	7ffb      	ldrb	r3, [r7, #31]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d105      	bne.n	8004234 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004228:	4b7a      	ldr	r3, [pc, #488]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 800422a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800422c:	4a79      	ldr	r2, [pc, #484]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 800422e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004232:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 80fe 	beq.w	800443a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004242:	2b02      	cmp	r3, #2
 8004244:	f040 80d0 	bne.w	80043e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004248:	4b72      	ldr	r3, [pc, #456]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f003 0203 	and.w	r2, r3, #3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004258:	429a      	cmp	r2, r3
 800425a:	d130      	bne.n	80042be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004266:	3b01      	subs	r3, #1
 8004268:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d127      	bne.n	80042be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004278:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d11f      	bne.n	80042be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004288:	2a07      	cmp	r2, #7
 800428a:	bf14      	ite	ne
 800428c:	2201      	movne	r2, #1
 800428e:	2200      	moveq	r2, #0
 8004290:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004292:	4293      	cmp	r3, r2
 8004294:	d113      	bne.n	80042be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a0:	085b      	lsrs	r3, r3, #1
 80042a2:	3b01      	subs	r3, #1
 80042a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d109      	bne.n	80042be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b4:	085b      	lsrs	r3, r3, #1
 80042b6:	3b01      	subs	r3, #1
 80042b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d06e      	beq.n	800439c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	2b0c      	cmp	r3, #12
 80042c2:	d069      	beq.n	8004398 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042c4:	4b53      	ldr	r3, [pc, #332]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d105      	bne.n	80042dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80042d0:	4b50      	ldr	r3, [pc, #320]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0ad      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042e0:	4b4c      	ldr	r3, [pc, #304]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a4b      	ldr	r2, [pc, #300]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80042e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042ec:	f7fd ff6a 	bl	80021c4 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f4:	f7fd ff66 	bl	80021c4 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e09a      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004306:	4b43      	ldr	r3, [pc, #268]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004312:	4b40      	ldr	r3, [pc, #256]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	4b40      	ldr	r3, [pc, #256]	@ (8004418 <HAL_RCC_OscConfig+0x784>)
 8004318:	4013      	ands	r3, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004322:	3a01      	subs	r2, #1
 8004324:	0112      	lsls	r2, r2, #4
 8004326:	4311      	orrs	r1, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800432c:	0212      	lsls	r2, r2, #8
 800432e:	4311      	orrs	r1, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004334:	0852      	lsrs	r2, r2, #1
 8004336:	3a01      	subs	r2, #1
 8004338:	0552      	lsls	r2, r2, #21
 800433a:	4311      	orrs	r1, r2
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004340:	0852      	lsrs	r2, r2, #1
 8004342:	3a01      	subs	r2, #1
 8004344:	0652      	lsls	r2, r2, #25
 8004346:	4311      	orrs	r1, r2
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800434c:	0912      	lsrs	r2, r2, #4
 800434e:	0452      	lsls	r2, r2, #17
 8004350:	430a      	orrs	r2, r1
 8004352:	4930      	ldr	r1, [pc, #192]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 8004354:	4313      	orrs	r3, r2
 8004356:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004358:	4b2e      	ldr	r3, [pc, #184]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a2d      	ldr	r2, [pc, #180]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 800435e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004362:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004364:	4b2b      	ldr	r3, [pc, #172]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4a2a      	ldr	r2, [pc, #168]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 800436a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800436e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004370:	f7fd ff28 	bl	80021c4 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004378:	f7fd ff24 	bl	80021c4 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e058      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800438a:	4b22      	ldr	r3, [pc, #136]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0f0      	beq.n	8004378 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004396:	e050      	b.n	800443a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e04f      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439c:	4b1d      	ldr	r3, [pc, #116]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d148      	bne.n	800443a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80043a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a19      	ldr	r2, [pc, #100]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80043ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043b4:	4b17      	ldr	r3, [pc, #92]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4a16      	ldr	r2, [pc, #88]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80043ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043c0:	f7fd ff00 	bl	80021c4 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c8:	f7fd fefc 	bl	80021c4 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e030      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043da:	4b0e      	ldr	r3, [pc, #56]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0x734>
 80043e6:	e028      	b.n	800443a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2b0c      	cmp	r3, #12
 80043ec:	d023      	beq.n	8004436 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ee:	4b09      	ldr	r3, [pc, #36]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a08      	ldr	r2, [pc, #32]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80043f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fa:	f7fd fee3 	bl	80021c4 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004400:	e00c      	b.n	800441c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004402:	f7fd fedf 	bl	80021c4 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d905      	bls.n	800441c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e013      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
 8004414:	40021000 	.word	0x40021000
 8004418:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800441c:	4b09      	ldr	r3, [pc, #36]	@ (8004444 <HAL_RCC_OscConfig+0x7b0>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1ec      	bne.n	8004402 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004428:	4b06      	ldr	r3, [pc, #24]	@ (8004444 <HAL_RCC_OscConfig+0x7b0>)
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	4905      	ldr	r1, [pc, #20]	@ (8004444 <HAL_RCC_OscConfig+0x7b0>)
 800442e:	4b06      	ldr	r3, [pc, #24]	@ (8004448 <HAL_RCC_OscConfig+0x7b4>)
 8004430:	4013      	ands	r3, r2
 8004432:	60cb      	str	r3, [r1, #12]
 8004434:	e001      	b.n	800443a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3720      	adds	r7, #32
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40021000 	.word	0x40021000
 8004448:	feeefffc 	.word	0xfeeefffc

0800444c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0e7      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004460:	4b75      	ldr	r3, [pc, #468]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d910      	bls.n	8004490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446e:	4b72      	ldr	r3, [pc, #456]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f023 0207 	bic.w	r2, r3, #7
 8004476:	4970      	ldr	r1, [pc, #448]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	4313      	orrs	r3, r2
 800447c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b6e      	ldr	r3, [pc, #440]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0cf      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d010      	beq.n	80044be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	4b66      	ldr	r3, [pc, #408]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d908      	bls.n	80044be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ac:	4b63      	ldr	r3, [pc, #396]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	4960      	ldr	r1, [pc, #384]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d04c      	beq.n	8004564 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d107      	bne.n	80044e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044d2:	4b5a      	ldr	r3, [pc, #360]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d121      	bne.n	8004522 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e0a6      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d107      	bne.n	80044fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ea:	4b54      	ldr	r3, [pc, #336]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d115      	bne.n	8004522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e09a      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d107      	bne.n	8004512 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004502:	4b4e      	ldr	r3, [pc, #312]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e08e      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004512:	4b4a      	ldr	r3, [pc, #296]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e086      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004522:	4b46      	ldr	r3, [pc, #280]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f023 0203 	bic.w	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	4943      	ldr	r1, [pc, #268]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004530:	4313      	orrs	r3, r2
 8004532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004534:	f7fd fe46 	bl	80021c4 <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	e00a      	b.n	8004552 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800453c:	f7fd fe42 	bl	80021c4 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e06e      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004552:	4b3a      	ldr	r3, [pc, #232]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 020c 	and.w	r2, r3, #12
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	429a      	cmp	r2, r3
 8004562:	d1eb      	bne.n	800453c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d010      	beq.n	8004592 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	4b31      	ldr	r3, [pc, #196]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800457c:	429a      	cmp	r2, r3
 800457e:	d208      	bcs.n	8004592 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004580:	4b2e      	ldr	r3, [pc, #184]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	492b      	ldr	r1, [pc, #172]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 800458e:	4313      	orrs	r3, r2
 8004590:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004592:	4b29      	ldr	r3, [pc, #164]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d210      	bcs.n	80045c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a0:	4b25      	ldr	r3, [pc, #148]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f023 0207 	bic.w	r2, r3, #7
 80045a8:	4923      	ldr	r1, [pc, #140]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b0:	4b21      	ldr	r3, [pc, #132]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d001      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e036      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d008      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045ce:	4b1b      	ldr	r3, [pc, #108]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	4918      	ldr	r1, [pc, #96]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d009      	beq.n	8004600 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ec:	4b13      	ldr	r3, [pc, #76]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	4910      	ldr	r1, [pc, #64]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004600:	f000 f824 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8004604:	4602      	mov	r2, r0
 8004606:	4b0d      	ldr	r3, [pc, #52]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	091b      	lsrs	r3, r3, #4
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	490b      	ldr	r1, [pc, #44]	@ (8004640 <HAL_RCC_ClockConfig+0x1f4>)
 8004612:	5ccb      	ldrb	r3, [r1, r3]
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
 800461c:	4a09      	ldr	r2, [pc, #36]	@ (8004644 <HAL_RCC_ClockConfig+0x1f8>)
 800461e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004620:	4b09      	ldr	r3, [pc, #36]	@ (8004648 <HAL_RCC_ClockConfig+0x1fc>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f7fd fc03 	bl	8001e30 <HAL_InitTick>
 800462a:	4603      	mov	r3, r0
 800462c:	72fb      	strb	r3, [r7, #11]

  return status;
 800462e:	7afb      	ldrb	r3, [r7, #11]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40022000 	.word	0x40022000
 800463c:	40021000 	.word	0x40021000
 8004640:	0800b67c 	.word	0x0800b67c
 8004644:	20000058 	.word	0x20000058
 8004648:	2000005c 	.word	0x2000005c

0800464c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800464c:	b480      	push	{r7}
 800464e:	b089      	sub	sp, #36	@ 0x24
 8004650:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	2300      	movs	r3, #0
 8004658:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800465a:	4b3e      	ldr	r3, [pc, #248]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
 8004662:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004664:	4b3b      	ldr	r3, [pc, #236]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f003 0303 	and.w	r3, r3, #3
 800466c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <HAL_RCC_GetSysClockFreq+0x34>
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	2b0c      	cmp	r3, #12
 8004678:	d121      	bne.n	80046be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d11e      	bne.n	80046be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004680:	4b34      	ldr	r3, [pc, #208]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d107      	bne.n	800469c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800468c:	4b31      	ldr	r3, [pc, #196]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 800468e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004692:	0a1b      	lsrs	r3, r3, #8
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	61fb      	str	r3, [r7, #28]
 800469a:	e005      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800469c:	4b2d      	ldr	r3, [pc, #180]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	091b      	lsrs	r3, r3, #4
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x10c>)
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10d      	bne.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046bc:	e00a      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	d102      	bne.n	80046ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046c4:	4b25      	ldr	r3, [pc, #148]	@ (800475c <HAL_RCC_GetSysClockFreq+0x110>)
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	e004      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d101      	bne.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046d0:	4b23      	ldr	r3, [pc, #140]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x114>)
 80046d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	2b0c      	cmp	r3, #12
 80046d8:	d134      	bne.n	8004744 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046da:	4b1e      	ldr	r3, [pc, #120]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d003      	beq.n	80046f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d003      	beq.n	80046f8 <HAL_RCC_GetSysClockFreq+0xac>
 80046f0:	e005      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046f2:	4b1a      	ldr	r3, [pc, #104]	@ (800475c <HAL_RCC_GetSysClockFreq+0x110>)
 80046f4:	617b      	str	r3, [r7, #20]
      break;
 80046f6:	e005      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046f8:	4b19      	ldr	r3, [pc, #100]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x114>)
 80046fa:	617b      	str	r3, [r7, #20]
      break;
 80046fc:	e002      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	617b      	str	r3, [r7, #20]
      break;
 8004702:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004704:	4b13      	ldr	r3, [pc, #76]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	091b      	lsrs	r3, r3, #4
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	3301      	adds	r3, #1
 8004710:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004712:	4b10      	ldr	r3, [pc, #64]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	0a1b      	lsrs	r3, r3, #8
 8004718:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	fb03 f202 	mul.w	r2, r3, r2
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	fbb2 f3f3 	udiv	r3, r2, r3
 8004728:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800472a:	4b0a      	ldr	r3, [pc, #40]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	0e5b      	lsrs	r3, r3, #25
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	3301      	adds	r3, #1
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004742:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004744:	69bb      	ldr	r3, [r7, #24]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3724      	adds	r7, #36	@ 0x24
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000
 8004758:	0800b694 	.word	0x0800b694
 800475c:	00f42400 	.word	0x00f42400
 8004760:	007a1200 	.word	0x007a1200

08004764 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004768:	4b03      	ldr	r3, [pc, #12]	@ (8004778 <HAL_RCC_GetHCLKFreq+0x14>)
 800476a:	681b      	ldr	r3, [r3, #0]
}
 800476c:	4618      	mov	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	20000058 	.word	0x20000058

0800477c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004780:	f7ff fff0 	bl	8004764 <HAL_RCC_GetHCLKFreq>
 8004784:	4602      	mov	r2, r0
 8004786:	4b06      	ldr	r3, [pc, #24]	@ (80047a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	0a1b      	lsrs	r3, r3, #8
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	4904      	ldr	r1, [pc, #16]	@ (80047a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004792:	5ccb      	ldrb	r3, [r1, r3]
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800479c:	4618      	mov	r0, r3
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40021000 	.word	0x40021000
 80047a4:	0800b68c 	.word	0x0800b68c

080047a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047ac:	f7ff ffda 	bl	8004764 <HAL_RCC_GetHCLKFreq>
 80047b0:	4602      	mov	r2, r0
 80047b2:	4b06      	ldr	r3, [pc, #24]	@ (80047cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	0adb      	lsrs	r3, r3, #11
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	4904      	ldr	r1, [pc, #16]	@ (80047d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047be:	5ccb      	ldrb	r3, [r1, r3]
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40021000 	.word	0x40021000
 80047d0:	0800b68c 	.word	0x0800b68c

080047d4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	220f      	movs	r2, #15
 80047e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80047e4:	4b12      	ldr	r3, [pc, #72]	@ (8004830 <HAL_RCC_GetClockConfig+0x5c>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 0203 	and.w	r2, r3, #3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80047f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004830 <HAL_RCC_GetClockConfig+0x5c>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80047fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004830 <HAL_RCC_GetClockConfig+0x5c>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004808:	4b09      	ldr	r3, [pc, #36]	@ (8004830 <HAL_RCC_GetClockConfig+0x5c>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	08db      	lsrs	r3, r3, #3
 800480e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004816:	4b07      	ldr	r3, [pc, #28]	@ (8004834 <HAL_RCC_GetClockConfig+0x60>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0207 	and.w	r2, r3, #7
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	601a      	str	r2, [r3, #0]
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40021000 	.word	0x40021000
 8004834:	40022000 	.word	0x40022000

08004838 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004840:	2300      	movs	r3, #0
 8004842:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004844:	4b2a      	ldr	r3, [pc, #168]	@ (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004850:	f7ff f9bc 	bl	8003bcc <HAL_PWREx_GetVoltageRange>
 8004854:	6178      	str	r0, [r7, #20]
 8004856:	e014      	b.n	8004882 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004858:	4b25      	ldr	r3, [pc, #148]	@ (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800485a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800485c:	4a24      	ldr	r2, [pc, #144]	@ (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800485e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004862:	6593      	str	r3, [r2, #88]	@ 0x58
 8004864:	4b22      	ldr	r3, [pc, #136]	@ (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004870:	f7ff f9ac 	bl	8003bcc <HAL_PWREx_GetVoltageRange>
 8004874:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004876:	4b1e      	ldr	r3, [pc, #120]	@ (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800487a:	4a1d      	ldr	r2, [pc, #116]	@ (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800487c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004880:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004888:	d10b      	bne.n	80048a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b80      	cmp	r3, #128	@ 0x80
 800488e:	d919      	bls.n	80048c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2ba0      	cmp	r3, #160	@ 0xa0
 8004894:	d902      	bls.n	800489c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004896:	2302      	movs	r3, #2
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	e013      	b.n	80048c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800489c:	2301      	movs	r3, #1
 800489e:	613b      	str	r3, [r7, #16]
 80048a0:	e010      	b.n	80048c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b80      	cmp	r3, #128	@ 0x80
 80048a6:	d902      	bls.n	80048ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80048a8:	2303      	movs	r3, #3
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	e00a      	b.n	80048c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b80      	cmp	r3, #128	@ 0x80
 80048b2:	d102      	bne.n	80048ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048b4:	2302      	movs	r3, #2
 80048b6:	613b      	str	r3, [r7, #16]
 80048b8:	e004      	b.n	80048c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b70      	cmp	r3, #112	@ 0x70
 80048be:	d101      	bne.n	80048c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048c0:	2301      	movs	r3, #1
 80048c2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048c4:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f023 0207 	bic.w	r2, r3, #7
 80048cc:	4909      	ldr	r1, [pc, #36]	@ (80048f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048d4:	4b07      	ldr	r3, [pc, #28]	@ (80048f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d001      	beq.n	80048e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40021000 	.word	0x40021000
 80048f4:	40022000 	.word	0x40022000

080048f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004900:	2300      	movs	r3, #0
 8004902:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004904:	2300      	movs	r3, #0
 8004906:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004910:	2b00      	cmp	r3, #0
 8004912:	d041      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004918:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800491c:	d02a      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800491e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004922:	d824      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004924:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004928:	d008      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800492a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800492e:	d81e      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004934:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004938:	d010      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800493a:	e018      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800493c:	4b86      	ldr	r3, [pc, #536]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	4a85      	ldr	r2, [pc, #532]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004942:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004946:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004948:	e015      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3304      	adds	r3, #4
 800494e:	2100      	movs	r1, #0
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fabb 	bl	8004ecc <RCCEx_PLLSAI1_Config>
 8004956:	4603      	mov	r3, r0
 8004958:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800495a:	e00c      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3320      	adds	r3, #32
 8004960:	2100      	movs	r1, #0
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fba6 	bl	80050b4 <RCCEx_PLLSAI2_Config>
 8004968:	4603      	mov	r3, r0
 800496a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800496c:	e003      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	74fb      	strb	r3, [r7, #19]
      break;
 8004972:	e000      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004974:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004976:	7cfb      	ldrb	r3, [r7, #19]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10b      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800497c:	4b76      	ldr	r3, [pc, #472]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004982:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800498a:	4973      	ldr	r1, [pc, #460]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004992:	e001      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004994:	7cfb      	ldrb	r3, [r7, #19]
 8004996:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d041      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80049ac:	d02a      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80049ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80049b2:	d824      	bhi.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80049b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049b8:	d008      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049be:	d81e      	bhi.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80049c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049c8:	d010      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80049ca:	e018      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049cc:	4b62      	ldr	r3, [pc, #392]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4a61      	ldr	r2, [pc, #388]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80049d8:	e015      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3304      	adds	r3, #4
 80049de:	2100      	movs	r1, #0
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fa73 	bl	8004ecc <RCCEx_PLLSAI1_Config>
 80049e6:	4603      	mov	r3, r0
 80049e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80049ea:	e00c      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3320      	adds	r3, #32
 80049f0:	2100      	movs	r1, #0
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fb5e 	bl	80050b4 <RCCEx_PLLSAI2_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80049fc:	e003      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	74fb      	strb	r3, [r7, #19]
      break;
 8004a02:	e000      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004a04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a06:	7cfb      	ldrb	r3, [r7, #19]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10b      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a0c:	4b52      	ldr	r3, [pc, #328]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a12:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a1a:	494f      	ldr	r1, [pc, #316]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004a22:	e001      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a24:	7cfb      	ldrb	r3, [r7, #19]
 8004a26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 80a0 	beq.w	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a36:	2300      	movs	r3, #0
 8004a38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a3a:	4b47      	ldr	r3, [pc, #284]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00d      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a50:	4b41      	ldr	r3, [pc, #260]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a54:	4a40      	ldr	r2, [pc, #256]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a5c:	4b3e      	ldr	r3, [pc, #248]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a64:	60bb      	str	r3, [r7, #8]
 8004a66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a3a      	ldr	r2, [pc, #232]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a78:	f7fd fba4 	bl	80021c4 <HAL_GetTick>
 8004a7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a7e:	e009      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a80:	f7fd fba0 	bl	80021c4 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d902      	bls.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	74fb      	strb	r3, [r7, #19]
        break;
 8004a92:	e005      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a94:	4b31      	ldr	r3, [pc, #196]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0ef      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004aa0:	7cfb      	ldrb	r3, [r7, #19]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d15c      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ab0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01f      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d019      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ac4:	4b24      	ldr	r3, [pc, #144]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ace:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ad0:	4b21      	ldr	r3, [pc, #132]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad6:	4a20      	ldr	r2, [pc, #128]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004af0:	4a19      	ldr	r2, [pc, #100]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d016      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b02:	f7fd fb5f 	bl	80021c4 <HAL_GetTick>
 8004b06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b08:	e00b      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b0a:	f7fd fb5b 	bl	80021c4 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d902      	bls.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	74fb      	strb	r3, [r7, #19]
            break;
 8004b20:	e006      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b22:	4b0d      	ldr	r3, [pc, #52]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0ec      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004b30:	7cfb      	ldrb	r3, [r7, #19]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10c      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b36:	4b08      	ldr	r3, [pc, #32]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b46:	4904      	ldr	r1, [pc, #16]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004b4e:	e009      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b50:	7cfb      	ldrb	r3, [r7, #19]
 8004b52:	74bb      	strb	r3, [r7, #18]
 8004b54:	e006      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004b56:	bf00      	nop
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b60:	7cfb      	ldrb	r3, [r7, #19]
 8004b62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b64:	7c7b      	ldrb	r3, [r7, #17]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d105      	bne.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b6a:	4b9e      	ldr	r3, [pc, #632]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b6e:	4a9d      	ldr	r2, [pc, #628]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b74:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00a      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b82:	4b98      	ldr	r3, [pc, #608]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b88:	f023 0203 	bic.w	r2, r3, #3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b90:	4994      	ldr	r1, [pc, #592]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00a      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ba4:	4b8f      	ldr	r3, [pc, #572]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004baa:	f023 020c 	bic.w	r2, r3, #12
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb2:	498c      	ldr	r1, [pc, #560]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bc6:	4b87      	ldr	r3, [pc, #540]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bcc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd4:	4983      	ldr	r1, [pc, #524]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004be8:	4b7e      	ldr	r3, [pc, #504]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf6:	497b      	ldr	r1, [pc, #492]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0310 	and.w	r3, r3, #16
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c0a:	4b76      	ldr	r3, [pc, #472]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c18:	4972      	ldr	r1, [pc, #456]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0320 	and.w	r3, r3, #32
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00a      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c2c:	4b6d      	ldr	r3, [pc, #436]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c3a:	496a      	ldr	r1, [pc, #424]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c4e:	4b65      	ldr	r3, [pc, #404]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c5c:	4961      	ldr	r1, [pc, #388]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c70:	4b5c      	ldr	r3, [pc, #368]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c7e:	4959      	ldr	r1, [pc, #356]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c92:	4b54      	ldr	r3, [pc, #336]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c98:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ca0:	4950      	ldr	r1, [pc, #320]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cb4:	4b4b      	ldr	r3, [pc, #300]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc2:	4948      	ldr	r1, [pc, #288]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cd6:	4b43      	ldr	r3, [pc, #268]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cdc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce4:	493f      	ldr	r1, [pc, #252]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d028      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d06:	4937      	ldr	r1, [pc, #220]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d16:	d106      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d18:	4b32      	ldr	r3, [pc, #200]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4a31      	ldr	r2, [pc, #196]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d22:	60d3      	str	r3, [r2, #12]
 8004d24:	e011      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d2e:	d10c      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3304      	adds	r3, #4
 8004d34:	2101      	movs	r1, #1
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 f8c8 	bl	8004ecc <RCCEx_PLLSAI1_Config>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d40:	7cfb      	ldrb	r3, [r7, #19]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004d46:	7cfb      	ldrb	r3, [r7, #19]
 8004d48:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d028      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d56:	4b23      	ldr	r3, [pc, #140]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d5c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d64:	491f      	ldr	r1, [pc, #124]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d74:	d106      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d76:	4b1b      	ldr	r3, [pc, #108]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d80:	60d3      	str	r3, [r2, #12]
 8004d82:	e011      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3304      	adds	r3, #4
 8004d92:	2101      	movs	r1, #1
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 f899 	bl	8004ecc <RCCEx_PLLSAI1_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d9e:	7cfb      	ldrb	r3, [r7, #19]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004da4:	7cfb      	ldrb	r3, [r7, #19]
 8004da6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d02b      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004db4:	4b0b      	ldr	r3, [pc, #44]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dc2:	4908      	ldr	r1, [pc, #32]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dd2:	d109      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dd4:	4b03      	ldr	r3, [pc, #12]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4a02      	ldr	r2, [pc, #8]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dde:	60d3      	str	r3, [r2, #12]
 8004de0:	e014      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004de2:	bf00      	nop
 8004de4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004df0:	d10c      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3304      	adds	r3, #4
 8004df6:	2101      	movs	r1, #1
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 f867 	bl	8004ecc <RCCEx_PLLSAI1_Config>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e02:	7cfb      	ldrb	r3, [r7, #19]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004e08:	7cfb      	ldrb	r3, [r7, #19]
 8004e0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d02f      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e18:	4b2b      	ldr	r3, [pc, #172]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e26:	4928      	ldr	r1, [pc, #160]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e36:	d10d      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	2102      	movs	r1, #2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 f844 	bl	8004ecc <RCCEx_PLLSAI1_Config>
 8004e44:	4603      	mov	r3, r0
 8004e46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e48:	7cfb      	ldrb	r3, [r7, #19]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d014      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e4e:	7cfb      	ldrb	r3, [r7, #19]
 8004e50:	74bb      	strb	r3, [r7, #18]
 8004e52:	e011      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3320      	adds	r3, #32
 8004e62:	2102      	movs	r1, #2
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 f925 	bl	80050b4 <RCCEx_PLLSAI2_Config>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e6e:	7cfb      	ldrb	r3, [r7, #19]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e74:	7cfb      	ldrb	r3, [r7, #19]
 8004e76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00a      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e84:	4b10      	ldr	r3, [pc, #64]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e8a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e92:	490d      	ldr	r1, [pc, #52]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00b      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ea6:	4b08      	ldr	r3, [pc, #32]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eb6:	4904      	ldr	r1, [pc, #16]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ebe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40021000 	.word	0x40021000

08004ecc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004eda:	4b75      	ldr	r3, [pc, #468]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d018      	beq.n	8004f18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ee6:	4b72      	ldr	r3, [pc, #456]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f003 0203 	and.w	r2, r3, #3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d10d      	bne.n	8004f12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
       ||
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d009      	beq.n	8004f12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004efe:	4b6c      	ldr	r3, [pc, #432]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	091b      	lsrs	r3, r3, #4
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
       ||
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d047      	beq.n	8004fa2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	73fb      	strb	r3, [r7, #15]
 8004f16:	e044      	b.n	8004fa2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d018      	beq.n	8004f52 <RCCEx_PLLSAI1_Config+0x86>
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d825      	bhi.n	8004f70 <RCCEx_PLLSAI1_Config+0xa4>
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d002      	beq.n	8004f2e <RCCEx_PLLSAI1_Config+0x62>
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d009      	beq.n	8004f40 <RCCEx_PLLSAI1_Config+0x74>
 8004f2c:	e020      	b.n	8004f70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f2e:	4b60      	ldr	r3, [pc, #384]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d11d      	bne.n	8004f76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f3e:	e01a      	b.n	8004f76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f40:	4b5b      	ldr	r3, [pc, #364]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d116      	bne.n	8004f7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f50:	e013      	b.n	8004f7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f52:	4b57      	ldr	r3, [pc, #348]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10f      	bne.n	8004f7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f5e:	4b54      	ldr	r3, [pc, #336]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d109      	bne.n	8004f7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f6e:	e006      	b.n	8004f7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	73fb      	strb	r3, [r7, #15]
      break;
 8004f74:	e004      	b.n	8004f80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f76:	bf00      	nop
 8004f78:	e002      	b.n	8004f80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f7a:	bf00      	nop
 8004f7c:	e000      	b.n	8004f80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10d      	bne.n	8004fa2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f86:	4b4a      	ldr	r3, [pc, #296]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6819      	ldr	r1, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	011b      	lsls	r3, r3, #4
 8004f9a:	430b      	orrs	r3, r1
 8004f9c:	4944      	ldr	r1, [pc, #272]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d17d      	bne.n	80050a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004fa8:	4b41      	ldr	r3, [pc, #260]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a40      	ldr	r2, [pc, #256]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb4:	f7fd f906 	bl	80021c4 <HAL_GetTick>
 8004fb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fba:	e009      	b.n	8004fd0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fbc:	f7fd f902 	bl	80021c4 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d902      	bls.n	8004fd0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	73fb      	strb	r3, [r7, #15]
        break;
 8004fce:	e005      	b.n	8004fdc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fd0:	4b37      	ldr	r3, [pc, #220]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1ef      	bne.n	8004fbc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d160      	bne.n	80050a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d111      	bne.n	800500c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fe8:	4b31      	ldr	r3, [pc, #196]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6892      	ldr	r2, [r2, #8]
 8004ff8:	0211      	lsls	r1, r2, #8
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	68d2      	ldr	r2, [r2, #12]
 8004ffe:	0912      	lsrs	r2, r2, #4
 8005000:	0452      	lsls	r2, r2, #17
 8005002:	430a      	orrs	r2, r1
 8005004:	492a      	ldr	r1, [pc, #168]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005006:	4313      	orrs	r3, r2
 8005008:	610b      	str	r3, [r1, #16]
 800500a:	e027      	b.n	800505c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d112      	bne.n	8005038 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005012:	4b27      	ldr	r3, [pc, #156]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800501a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6892      	ldr	r2, [r2, #8]
 8005022:	0211      	lsls	r1, r2, #8
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6912      	ldr	r2, [r2, #16]
 8005028:	0852      	lsrs	r2, r2, #1
 800502a:	3a01      	subs	r2, #1
 800502c:	0552      	lsls	r2, r2, #21
 800502e:	430a      	orrs	r2, r1
 8005030:	491f      	ldr	r1, [pc, #124]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005032:	4313      	orrs	r3, r2
 8005034:	610b      	str	r3, [r1, #16]
 8005036:	e011      	b.n	800505c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005038:	4b1d      	ldr	r3, [pc, #116]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005040:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6892      	ldr	r2, [r2, #8]
 8005048:	0211      	lsls	r1, r2, #8
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	6952      	ldr	r2, [r2, #20]
 800504e:	0852      	lsrs	r2, r2, #1
 8005050:	3a01      	subs	r2, #1
 8005052:	0652      	lsls	r2, r2, #25
 8005054:	430a      	orrs	r2, r1
 8005056:	4916      	ldr	r1, [pc, #88]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005058:	4313      	orrs	r3, r2
 800505a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800505c:	4b14      	ldr	r3, [pc, #80]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a13      	ldr	r2, [pc, #76]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005062:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005066:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005068:	f7fd f8ac 	bl	80021c4 <HAL_GetTick>
 800506c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800506e:	e009      	b.n	8005084 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005070:	f7fd f8a8 	bl	80021c4 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d902      	bls.n	8005084 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	73fb      	strb	r3, [r7, #15]
          break;
 8005082:	e005      	b.n	8005090 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005084:	4b0a      	ldr	r3, [pc, #40]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0ef      	beq.n	8005070 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005096:	4b06      	ldr	r3, [pc, #24]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005098:	691a      	ldr	r2, [r3, #16]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	4904      	ldr	r1, [pc, #16]	@ (80050b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40021000 	.word	0x40021000

080050b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050c2:	4b6a      	ldr	r3, [pc, #424]	@ (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d018      	beq.n	8005100 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80050ce:	4b67      	ldr	r3, [pc, #412]	@ (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f003 0203 	and.w	r2, r3, #3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d10d      	bne.n	80050fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
       ||
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d009      	beq.n	80050fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80050e6:	4b61      	ldr	r3, [pc, #388]	@ (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	091b      	lsrs	r3, r3, #4
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
       ||
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d047      	beq.n	800518a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	73fb      	strb	r3, [r7, #15]
 80050fe:	e044      	b.n	800518a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2b03      	cmp	r3, #3
 8005106:	d018      	beq.n	800513a <RCCEx_PLLSAI2_Config+0x86>
 8005108:	2b03      	cmp	r3, #3
 800510a:	d825      	bhi.n	8005158 <RCCEx_PLLSAI2_Config+0xa4>
 800510c:	2b01      	cmp	r3, #1
 800510e:	d002      	beq.n	8005116 <RCCEx_PLLSAI2_Config+0x62>
 8005110:	2b02      	cmp	r3, #2
 8005112:	d009      	beq.n	8005128 <RCCEx_PLLSAI2_Config+0x74>
 8005114:	e020      	b.n	8005158 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005116:	4b55      	ldr	r3, [pc, #340]	@ (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d11d      	bne.n	800515e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005126:	e01a      	b.n	800515e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005128:	4b50      	ldr	r3, [pc, #320]	@ (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005130:	2b00      	cmp	r3, #0
 8005132:	d116      	bne.n	8005162 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005138:	e013      	b.n	8005162 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800513a:	4b4c      	ldr	r3, [pc, #304]	@ (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10f      	bne.n	8005166 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005146:	4b49      	ldr	r3, [pc, #292]	@ (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d109      	bne.n	8005166 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005156:	e006      	b.n	8005166 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	73fb      	strb	r3, [r7, #15]
      break;
 800515c:	e004      	b.n	8005168 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800515e:	bf00      	nop
 8005160:	e002      	b.n	8005168 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005162:	bf00      	nop
 8005164:	e000      	b.n	8005168 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005166:	bf00      	nop
    }

    if(status == HAL_OK)
 8005168:	7bfb      	ldrb	r3, [r7, #15]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10d      	bne.n	800518a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800516e:	4b3f      	ldr	r3, [pc, #252]	@ (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6819      	ldr	r1, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	3b01      	subs	r3, #1
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	430b      	orrs	r3, r1
 8005184:	4939      	ldr	r1, [pc, #228]	@ (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005186:	4313      	orrs	r3, r2
 8005188:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800518a:	7bfb      	ldrb	r3, [r7, #15]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d167      	bne.n	8005260 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005190:	4b36      	ldr	r3, [pc, #216]	@ (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a35      	ldr	r2, [pc, #212]	@ (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005196:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800519a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800519c:	f7fd f812 	bl	80021c4 <HAL_GetTick>
 80051a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051a2:	e009      	b.n	80051b8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051a4:	f7fd f80e 	bl	80021c4 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d902      	bls.n	80051b8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	73fb      	strb	r3, [r7, #15]
        break;
 80051b6:	e005      	b.n	80051c4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051b8:	4b2c      	ldr	r3, [pc, #176]	@ (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1ef      	bne.n	80051a4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d14a      	bne.n	8005260 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d111      	bne.n	80051f4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051d0:	4b26      	ldr	r3, [pc, #152]	@ (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80051d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6892      	ldr	r2, [r2, #8]
 80051e0:	0211      	lsls	r1, r2, #8
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	68d2      	ldr	r2, [r2, #12]
 80051e6:	0912      	lsrs	r2, r2, #4
 80051e8:	0452      	lsls	r2, r2, #17
 80051ea:	430a      	orrs	r2, r1
 80051ec:	491f      	ldr	r1, [pc, #124]	@ (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	614b      	str	r3, [r1, #20]
 80051f2:	e011      	b.n	8005218 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051f4:	4b1d      	ldr	r3, [pc, #116]	@ (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80051fc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6892      	ldr	r2, [r2, #8]
 8005204:	0211      	lsls	r1, r2, #8
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6912      	ldr	r2, [r2, #16]
 800520a:	0852      	lsrs	r2, r2, #1
 800520c:	3a01      	subs	r2, #1
 800520e:	0652      	lsls	r2, r2, #25
 8005210:	430a      	orrs	r2, r1
 8005212:	4916      	ldr	r1, [pc, #88]	@ (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005214:	4313      	orrs	r3, r2
 8005216:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005218:	4b14      	ldr	r3, [pc, #80]	@ (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a13      	ldr	r2, [pc, #76]	@ (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 800521e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005222:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005224:	f7fc ffce 	bl	80021c4 <HAL_GetTick>
 8005228:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800522a:	e009      	b.n	8005240 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800522c:	f7fc ffca 	bl	80021c4 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d902      	bls.n	8005240 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	73fb      	strb	r3, [r7, #15]
          break;
 800523e:	e005      	b.n	800524c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005240:	4b0a      	ldr	r3, [pc, #40]	@ (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0ef      	beq.n	800522c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800524c:	7bfb      	ldrb	r3, [r7, #15]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005252:	4b06      	ldr	r3, [pc, #24]	@ (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005254:	695a      	ldr	r2, [r3, #20]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	4904      	ldr	r1, [pc, #16]	@ (800526c <RCCEx_PLLSAI2_Config+0x1b8>)
 800525c:	4313      	orrs	r3, r2
 800525e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005260:	7bfb      	ldrb	r3, [r7, #15]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40021000 	.word	0x40021000

08005270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e049      	b.n	8005316 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f841 	bl	800531e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3304      	adds	r3, #4
 80052ac:	4619      	mov	r1, r3
 80052ae:	4610      	mov	r0, r2
 80052b0:	f000 fc52 	bl	8005b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
	...

08005334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b01      	cmp	r3, #1
 8005346:	d001      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e04f      	b.n	80053ec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0201 	orr.w	r2, r2, #1
 8005362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a23      	ldr	r2, [pc, #140]	@ (80053f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d01d      	beq.n	80053aa <HAL_TIM_Base_Start_IT+0x76>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005376:	d018      	beq.n	80053aa <HAL_TIM_Base_Start_IT+0x76>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a1f      	ldr	r2, [pc, #124]	@ (80053fc <HAL_TIM_Base_Start_IT+0xc8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d013      	beq.n	80053aa <HAL_TIM_Base_Start_IT+0x76>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a1e      	ldr	r2, [pc, #120]	@ (8005400 <HAL_TIM_Base_Start_IT+0xcc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00e      	beq.n	80053aa <HAL_TIM_Base_Start_IT+0x76>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1c      	ldr	r2, [pc, #112]	@ (8005404 <HAL_TIM_Base_Start_IT+0xd0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d009      	beq.n	80053aa <HAL_TIM_Base_Start_IT+0x76>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1b      	ldr	r2, [pc, #108]	@ (8005408 <HAL_TIM_Base_Start_IT+0xd4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d004      	beq.n	80053aa <HAL_TIM_Base_Start_IT+0x76>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a19      	ldr	r2, [pc, #100]	@ (800540c <HAL_TIM_Base_Start_IT+0xd8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d115      	bne.n	80053d6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	4b17      	ldr	r3, [pc, #92]	@ (8005410 <HAL_TIM_Base_Start_IT+0xdc>)
 80053b2:	4013      	ands	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b06      	cmp	r3, #6
 80053ba:	d015      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0xb4>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053c2:	d011      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0201 	orr.w	r2, r2, #1
 80053d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d4:	e008      	b.n	80053e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0201 	orr.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	e000      	b.n	80053ea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	40012c00 	.word	0x40012c00
 80053fc:	40000400 	.word	0x40000400
 8005400:	40000800 	.word	0x40000800
 8005404:	40000c00 	.word	0x40000c00
 8005408:	40013400 	.word	0x40013400
 800540c:	40014000 	.word	0x40014000
 8005410:	00010007 	.word	0x00010007

08005414 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e049      	b.n	80054ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d106      	bne.n	8005440 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fc fc26 	bl	8001c8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3304      	adds	r3, #4
 8005450:	4619      	mov	r1, r3
 8005452:	4610      	mov	r0, r2
 8005454:	f000 fb80 	bl	8005b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d109      	bne.n	80054e8 <HAL_TIM_PWM_Start+0x24>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	bf14      	ite	ne
 80054e0:	2301      	movne	r3, #1
 80054e2:	2300      	moveq	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	e03c      	b.n	8005562 <HAL_TIM_PWM_Start+0x9e>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d109      	bne.n	8005502 <HAL_TIM_PWM_Start+0x3e>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	bf14      	ite	ne
 80054fa:	2301      	movne	r3, #1
 80054fc:	2300      	moveq	r3, #0
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	e02f      	b.n	8005562 <HAL_TIM_PWM_Start+0x9e>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b08      	cmp	r3, #8
 8005506:	d109      	bne.n	800551c <HAL_TIM_PWM_Start+0x58>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	bf14      	ite	ne
 8005514:	2301      	movne	r3, #1
 8005516:	2300      	moveq	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	e022      	b.n	8005562 <HAL_TIM_PWM_Start+0x9e>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b0c      	cmp	r3, #12
 8005520:	d109      	bne.n	8005536 <HAL_TIM_PWM_Start+0x72>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b01      	cmp	r3, #1
 800552c:	bf14      	ite	ne
 800552e:	2301      	movne	r3, #1
 8005530:	2300      	moveq	r3, #0
 8005532:	b2db      	uxtb	r3, r3
 8005534:	e015      	b.n	8005562 <HAL_TIM_PWM_Start+0x9e>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b10      	cmp	r3, #16
 800553a:	d109      	bne.n	8005550 <HAL_TIM_PWM_Start+0x8c>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b01      	cmp	r3, #1
 8005546:	bf14      	ite	ne
 8005548:	2301      	movne	r3, #1
 800554a:	2300      	moveq	r3, #0
 800554c:	b2db      	uxtb	r3, r3
 800554e:	e008      	b.n	8005562 <HAL_TIM_PWM_Start+0x9e>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b01      	cmp	r3, #1
 800555a:	bf14      	ite	ne
 800555c:	2301      	movne	r3, #1
 800555e:	2300      	moveq	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e09c      	b.n	80056a4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d104      	bne.n	800557a <HAL_TIM_PWM_Start+0xb6>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005578:	e023      	b.n	80055c2 <HAL_TIM_PWM_Start+0xfe>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b04      	cmp	r3, #4
 800557e:	d104      	bne.n	800558a <HAL_TIM_PWM_Start+0xc6>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005588:	e01b      	b.n	80055c2 <HAL_TIM_PWM_Start+0xfe>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b08      	cmp	r3, #8
 800558e:	d104      	bne.n	800559a <HAL_TIM_PWM_Start+0xd6>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005598:	e013      	b.n	80055c2 <HAL_TIM_PWM_Start+0xfe>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b0c      	cmp	r3, #12
 800559e:	d104      	bne.n	80055aa <HAL_TIM_PWM_Start+0xe6>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055a8:	e00b      	b.n	80055c2 <HAL_TIM_PWM_Start+0xfe>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d104      	bne.n	80055ba <HAL_TIM_PWM_Start+0xf6>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055b8:	e003      	b.n	80055c2 <HAL_TIM_PWM_Start+0xfe>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2201      	movs	r2, #1
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fe40 	bl	8006250 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a35      	ldr	r2, [pc, #212]	@ (80056ac <HAL_TIM_PWM_Start+0x1e8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d013      	beq.n	8005602 <HAL_TIM_PWM_Start+0x13e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a34      	ldr	r2, [pc, #208]	@ (80056b0 <HAL_TIM_PWM_Start+0x1ec>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00e      	beq.n	8005602 <HAL_TIM_PWM_Start+0x13e>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a32      	ldr	r2, [pc, #200]	@ (80056b4 <HAL_TIM_PWM_Start+0x1f0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d009      	beq.n	8005602 <HAL_TIM_PWM_Start+0x13e>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a31      	ldr	r2, [pc, #196]	@ (80056b8 <HAL_TIM_PWM_Start+0x1f4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d004      	beq.n	8005602 <HAL_TIM_PWM_Start+0x13e>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a2f      	ldr	r2, [pc, #188]	@ (80056bc <HAL_TIM_PWM_Start+0x1f8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d101      	bne.n	8005606 <HAL_TIM_PWM_Start+0x142>
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <HAL_TIM_PWM_Start+0x144>
 8005606:	2300      	movs	r3, #0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d007      	beq.n	800561c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800561a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a22      	ldr	r2, [pc, #136]	@ (80056ac <HAL_TIM_PWM_Start+0x1e8>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d01d      	beq.n	8005662 <HAL_TIM_PWM_Start+0x19e>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800562e:	d018      	beq.n	8005662 <HAL_TIM_PWM_Start+0x19e>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a22      	ldr	r2, [pc, #136]	@ (80056c0 <HAL_TIM_PWM_Start+0x1fc>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d013      	beq.n	8005662 <HAL_TIM_PWM_Start+0x19e>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a21      	ldr	r2, [pc, #132]	@ (80056c4 <HAL_TIM_PWM_Start+0x200>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00e      	beq.n	8005662 <HAL_TIM_PWM_Start+0x19e>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a1f      	ldr	r2, [pc, #124]	@ (80056c8 <HAL_TIM_PWM_Start+0x204>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d009      	beq.n	8005662 <HAL_TIM_PWM_Start+0x19e>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a17      	ldr	r2, [pc, #92]	@ (80056b0 <HAL_TIM_PWM_Start+0x1ec>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d004      	beq.n	8005662 <HAL_TIM_PWM_Start+0x19e>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a15      	ldr	r2, [pc, #84]	@ (80056b4 <HAL_TIM_PWM_Start+0x1f0>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d115      	bne.n	800568e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	4b18      	ldr	r3, [pc, #96]	@ (80056cc <HAL_TIM_PWM_Start+0x208>)
 800566a:	4013      	ands	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b06      	cmp	r3, #6
 8005672:	d015      	beq.n	80056a0 <HAL_TIM_PWM_Start+0x1dc>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800567a:	d011      	beq.n	80056a0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800568c:	e008      	b.n	80056a0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f042 0201 	orr.w	r2, r2, #1
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	e000      	b.n	80056a2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40012c00 	.word	0x40012c00
 80056b0:	40013400 	.word	0x40013400
 80056b4:	40014000 	.word	0x40014000
 80056b8:	40014400 	.word	0x40014400
 80056bc:	40014800 	.word	0x40014800
 80056c0:	40000400 	.word	0x40000400
 80056c4:	40000800 	.word	0x40000800
 80056c8:	40000c00 	.word	0x40000c00
 80056cc:	00010007 	.word	0x00010007

080056d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d020      	beq.n	8005734 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d01b      	beq.n	8005734 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f06f 0202 	mvn.w	r2, #2
 8005704:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f9fe 	bl	8005b1c <HAL_TIM_IC_CaptureCallback>
 8005720:	e005      	b.n	800572e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f9f0 	bl	8005b08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fa01 	bl	8005b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f003 0304 	and.w	r3, r3, #4
 800573a:	2b00      	cmp	r3, #0
 800573c:	d020      	beq.n	8005780 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01b      	beq.n	8005780 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f06f 0204 	mvn.w	r2, #4
 8005750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2202      	movs	r2, #2
 8005756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f9d8 	bl	8005b1c <HAL_TIM_IC_CaptureCallback>
 800576c:	e005      	b.n	800577a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f9ca 	bl	8005b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f9db 	bl	8005b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f003 0308 	and.w	r3, r3, #8
 8005786:	2b00      	cmp	r3, #0
 8005788:	d020      	beq.n	80057cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01b      	beq.n	80057cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f06f 0208 	mvn.w	r2, #8
 800579c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2204      	movs	r2, #4
 80057a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f9b2 	bl	8005b1c <HAL_TIM_IC_CaptureCallback>
 80057b8:	e005      	b.n	80057c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f9a4 	bl	8005b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f9b5 	bl	8005b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f003 0310 	and.w	r3, r3, #16
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d020      	beq.n	8005818 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d01b      	beq.n	8005818 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f06f 0210 	mvn.w	r2, #16
 80057e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2208      	movs	r2, #8
 80057ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f98c 	bl	8005b1c <HAL_TIM_IC_CaptureCallback>
 8005804:	e005      	b.n	8005812 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f97e 	bl	8005b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f98f 	bl	8005b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00c      	beq.n	800583c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d007      	beq.n	800583c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f06f 0201 	mvn.w	r2, #1
 8005834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fc f97e 	bl	8001b38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005842:	2b00      	cmp	r3, #0
 8005844:	d104      	bne.n	8005850 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00c      	beq.n	800586a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005856:	2b00      	cmp	r3, #0
 8005858:	d007      	beq.n	800586a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 fdab 	bl	80063c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00c      	beq.n	800588e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800587a:	2b00      	cmp	r3, #0
 800587c:	d007      	beq.n	800588e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fda3 	bl	80063d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00c      	beq.n	80058b2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d007      	beq.n	80058b2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80058aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f949 	bl	8005b44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00c      	beq.n	80058d6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d007      	beq.n	80058d6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f06f 0220 	mvn.w	r2, #32
 80058ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 fd6b 	bl	80063ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058d6:	bf00      	nop
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d101      	bne.n	80058fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058fa:	2302      	movs	r3, #2
 80058fc:	e0ff      	b.n	8005afe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b14      	cmp	r3, #20
 800590a:	f200 80f0 	bhi.w	8005aee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800590e:	a201      	add	r2, pc, #4	@ (adr r2, 8005914 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005914:	08005969 	.word	0x08005969
 8005918:	08005aef 	.word	0x08005aef
 800591c:	08005aef 	.word	0x08005aef
 8005920:	08005aef 	.word	0x08005aef
 8005924:	080059a9 	.word	0x080059a9
 8005928:	08005aef 	.word	0x08005aef
 800592c:	08005aef 	.word	0x08005aef
 8005930:	08005aef 	.word	0x08005aef
 8005934:	080059eb 	.word	0x080059eb
 8005938:	08005aef 	.word	0x08005aef
 800593c:	08005aef 	.word	0x08005aef
 8005940:	08005aef 	.word	0x08005aef
 8005944:	08005a2b 	.word	0x08005a2b
 8005948:	08005aef 	.word	0x08005aef
 800594c:	08005aef 	.word	0x08005aef
 8005950:	08005aef 	.word	0x08005aef
 8005954:	08005a6d 	.word	0x08005a6d
 8005958:	08005aef 	.word	0x08005aef
 800595c:	08005aef 	.word	0x08005aef
 8005960:	08005aef 	.word	0x08005aef
 8005964:	08005aad 	.word	0x08005aad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68b9      	ldr	r1, [r7, #8]
 800596e:	4618      	mov	r0, r3
 8005970:	f000 f998 	bl	8005ca4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699a      	ldr	r2, [r3, #24]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f042 0208 	orr.w	r2, r2, #8
 8005982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699a      	ldr	r2, [r3, #24]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0204 	bic.w	r2, r2, #4
 8005992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6999      	ldr	r1, [r3, #24]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	691a      	ldr	r2, [r3, #16]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	619a      	str	r2, [r3, #24]
      break;
 80059a6:	e0a5      	b.n	8005af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68b9      	ldr	r1, [r7, #8]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fa08 	bl	8005dc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699a      	ldr	r2, [r3, #24]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6999      	ldr	r1, [r3, #24]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	021a      	lsls	r2, r3, #8
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	619a      	str	r2, [r3, #24]
      break;
 80059e8:	e084      	b.n	8005af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68b9      	ldr	r1, [r7, #8]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 fa71 	bl	8005ed8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69da      	ldr	r2, [r3, #28]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f042 0208 	orr.w	r2, r2, #8
 8005a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	69da      	ldr	r2, [r3, #28]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0204 	bic.w	r2, r2, #4
 8005a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	69d9      	ldr	r1, [r3, #28]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	691a      	ldr	r2, [r3, #16]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	61da      	str	r2, [r3, #28]
      break;
 8005a28:	e064      	b.n	8005af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68b9      	ldr	r1, [r7, #8]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fad9 	bl	8005fe8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69da      	ldr	r2, [r3, #28]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69da      	ldr	r2, [r3, #28]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69d9      	ldr	r1, [r3, #28]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	021a      	lsls	r2, r3, #8
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	61da      	str	r2, [r3, #28]
      break;
 8005a6a:	e043      	b.n	8005af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68b9      	ldr	r1, [r7, #8]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fb22 	bl	80060bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0208 	orr.w	r2, r2, #8
 8005a86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0204 	bic.w	r2, r2, #4
 8005a96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	691a      	ldr	r2, [r3, #16]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005aaa:	e023      	b.n	8005af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68b9      	ldr	r1, [r7, #8]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fb66 	bl	8006184 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ac6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ad6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	021a      	lsls	r2, r3, #8
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005aec:	e002      	b.n	8005af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	75fb      	strb	r3, [r7, #23]
      break;
 8005af2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop

08005b08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a46      	ldr	r2, [pc, #280]	@ (8005c84 <TIM_Base_SetConfig+0x12c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d013      	beq.n	8005b98 <TIM_Base_SetConfig+0x40>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b76:	d00f      	beq.n	8005b98 <TIM_Base_SetConfig+0x40>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a43      	ldr	r2, [pc, #268]	@ (8005c88 <TIM_Base_SetConfig+0x130>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00b      	beq.n	8005b98 <TIM_Base_SetConfig+0x40>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a42      	ldr	r2, [pc, #264]	@ (8005c8c <TIM_Base_SetConfig+0x134>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d007      	beq.n	8005b98 <TIM_Base_SetConfig+0x40>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a41      	ldr	r2, [pc, #260]	@ (8005c90 <TIM_Base_SetConfig+0x138>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d003      	beq.n	8005b98 <TIM_Base_SetConfig+0x40>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a40      	ldr	r2, [pc, #256]	@ (8005c94 <TIM_Base_SetConfig+0x13c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d108      	bne.n	8005baa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a35      	ldr	r2, [pc, #212]	@ (8005c84 <TIM_Base_SetConfig+0x12c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d01f      	beq.n	8005bf2 <TIM_Base_SetConfig+0x9a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bb8:	d01b      	beq.n	8005bf2 <TIM_Base_SetConfig+0x9a>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a32      	ldr	r2, [pc, #200]	@ (8005c88 <TIM_Base_SetConfig+0x130>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d017      	beq.n	8005bf2 <TIM_Base_SetConfig+0x9a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a31      	ldr	r2, [pc, #196]	@ (8005c8c <TIM_Base_SetConfig+0x134>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d013      	beq.n	8005bf2 <TIM_Base_SetConfig+0x9a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a30      	ldr	r2, [pc, #192]	@ (8005c90 <TIM_Base_SetConfig+0x138>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d00f      	beq.n	8005bf2 <TIM_Base_SetConfig+0x9a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a2f      	ldr	r2, [pc, #188]	@ (8005c94 <TIM_Base_SetConfig+0x13c>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00b      	beq.n	8005bf2 <TIM_Base_SetConfig+0x9a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a2e      	ldr	r2, [pc, #184]	@ (8005c98 <TIM_Base_SetConfig+0x140>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d007      	beq.n	8005bf2 <TIM_Base_SetConfig+0x9a>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a2d      	ldr	r2, [pc, #180]	@ (8005c9c <TIM_Base_SetConfig+0x144>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d003      	beq.n	8005bf2 <TIM_Base_SetConfig+0x9a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a2c      	ldr	r2, [pc, #176]	@ (8005ca0 <TIM_Base_SetConfig+0x148>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d108      	bne.n	8005c04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a16      	ldr	r2, [pc, #88]	@ (8005c84 <TIM_Base_SetConfig+0x12c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d00f      	beq.n	8005c50 <TIM_Base_SetConfig+0xf8>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a18      	ldr	r2, [pc, #96]	@ (8005c94 <TIM_Base_SetConfig+0x13c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d00b      	beq.n	8005c50 <TIM_Base_SetConfig+0xf8>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a17      	ldr	r2, [pc, #92]	@ (8005c98 <TIM_Base_SetConfig+0x140>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d007      	beq.n	8005c50 <TIM_Base_SetConfig+0xf8>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a16      	ldr	r2, [pc, #88]	@ (8005c9c <TIM_Base_SetConfig+0x144>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d003      	beq.n	8005c50 <TIM_Base_SetConfig+0xf8>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a15      	ldr	r2, [pc, #84]	@ (8005ca0 <TIM_Base_SetConfig+0x148>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d103      	bne.n	8005c58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	691a      	ldr	r2, [r3, #16]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d105      	bne.n	8005c76 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	f023 0201 	bic.w	r2, r3, #1
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	611a      	str	r2, [r3, #16]
  }
}
 8005c76:	bf00      	nop
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	40012c00 	.word	0x40012c00
 8005c88:	40000400 	.word	0x40000400
 8005c8c:	40000800 	.word	0x40000800
 8005c90:	40000c00 	.word	0x40000c00
 8005c94:	40013400 	.word	0x40013400
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	40014400 	.word	0x40014400
 8005ca0:	40014800 	.word	0x40014800

08005ca4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f023 0201 	bic.w	r2, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0303 	bic.w	r3, r3, #3
 8005cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f023 0302 	bic.w	r3, r3, #2
 8005cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a2c      	ldr	r2, [pc, #176]	@ (8005db0 <TIM_OC1_SetConfig+0x10c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00f      	beq.n	8005d24 <TIM_OC1_SetConfig+0x80>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a2b      	ldr	r2, [pc, #172]	@ (8005db4 <TIM_OC1_SetConfig+0x110>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00b      	beq.n	8005d24 <TIM_OC1_SetConfig+0x80>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a2a      	ldr	r2, [pc, #168]	@ (8005db8 <TIM_OC1_SetConfig+0x114>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d007      	beq.n	8005d24 <TIM_OC1_SetConfig+0x80>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a29      	ldr	r2, [pc, #164]	@ (8005dbc <TIM_OC1_SetConfig+0x118>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d003      	beq.n	8005d24 <TIM_OC1_SetConfig+0x80>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a28      	ldr	r2, [pc, #160]	@ (8005dc0 <TIM_OC1_SetConfig+0x11c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d10c      	bne.n	8005d3e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f023 0308 	bic.w	r3, r3, #8
 8005d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f023 0304 	bic.w	r3, r3, #4
 8005d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a1b      	ldr	r2, [pc, #108]	@ (8005db0 <TIM_OC1_SetConfig+0x10c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d00f      	beq.n	8005d66 <TIM_OC1_SetConfig+0xc2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a1a      	ldr	r2, [pc, #104]	@ (8005db4 <TIM_OC1_SetConfig+0x110>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00b      	beq.n	8005d66 <TIM_OC1_SetConfig+0xc2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a19      	ldr	r2, [pc, #100]	@ (8005db8 <TIM_OC1_SetConfig+0x114>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d007      	beq.n	8005d66 <TIM_OC1_SetConfig+0xc2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a18      	ldr	r2, [pc, #96]	@ (8005dbc <TIM_OC1_SetConfig+0x118>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d003      	beq.n	8005d66 <TIM_OC1_SetConfig+0xc2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a17      	ldr	r2, [pc, #92]	@ (8005dc0 <TIM_OC1_SetConfig+0x11c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d111      	bne.n	8005d8a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	621a      	str	r2, [r3, #32]
}
 8005da4:	bf00      	nop
 8005da6:	371c      	adds	r7, #28
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	40012c00 	.word	0x40012c00
 8005db4:	40013400 	.word	0x40013400
 8005db8:	40014000 	.word	0x40014000
 8005dbc:	40014400 	.word	0x40014400
 8005dc0:	40014800 	.word	0x40014800

08005dc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	f023 0210 	bic.w	r2, r3, #16
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005df2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	021b      	lsls	r3, r3, #8
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f023 0320 	bic.w	r3, r3, #32
 8005e12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	011b      	lsls	r3, r3, #4
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a28      	ldr	r2, [pc, #160]	@ (8005ec4 <TIM_OC2_SetConfig+0x100>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d003      	beq.n	8005e30 <TIM_OC2_SetConfig+0x6c>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a27      	ldr	r2, [pc, #156]	@ (8005ec8 <TIM_OC2_SetConfig+0x104>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d10d      	bne.n	8005e4c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ec4 <TIM_OC2_SetConfig+0x100>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d00f      	beq.n	8005e74 <TIM_OC2_SetConfig+0xb0>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a1c      	ldr	r2, [pc, #112]	@ (8005ec8 <TIM_OC2_SetConfig+0x104>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d00b      	beq.n	8005e74 <TIM_OC2_SetConfig+0xb0>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8005ecc <TIM_OC2_SetConfig+0x108>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d007      	beq.n	8005e74 <TIM_OC2_SetConfig+0xb0>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a1a      	ldr	r2, [pc, #104]	@ (8005ed0 <TIM_OC2_SetConfig+0x10c>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d003      	beq.n	8005e74 <TIM_OC2_SetConfig+0xb0>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a19      	ldr	r2, [pc, #100]	@ (8005ed4 <TIM_OC2_SetConfig+0x110>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d113      	bne.n	8005e9c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	621a      	str	r2, [r3, #32]
}
 8005eb6:	bf00      	nop
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40012c00 	.word	0x40012c00
 8005ec8:	40013400 	.word	0x40013400
 8005ecc:	40014000 	.word	0x40014000
 8005ed0:	40014400 	.word	0x40014400
 8005ed4:	40014800 	.word	0x40014800

08005ed8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0303 	bic.w	r3, r3, #3
 8005f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	021b      	lsls	r3, r3, #8
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a27      	ldr	r2, [pc, #156]	@ (8005fd4 <TIM_OC3_SetConfig+0xfc>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d003      	beq.n	8005f42 <TIM_OC3_SetConfig+0x6a>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a26      	ldr	r2, [pc, #152]	@ (8005fd8 <TIM_OC3_SetConfig+0x100>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d10d      	bne.n	8005f5e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	021b      	lsls	r3, r3, #8
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a1c      	ldr	r2, [pc, #112]	@ (8005fd4 <TIM_OC3_SetConfig+0xfc>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00f      	beq.n	8005f86 <TIM_OC3_SetConfig+0xae>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a1b      	ldr	r2, [pc, #108]	@ (8005fd8 <TIM_OC3_SetConfig+0x100>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d00b      	beq.n	8005f86 <TIM_OC3_SetConfig+0xae>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a1a      	ldr	r2, [pc, #104]	@ (8005fdc <TIM_OC3_SetConfig+0x104>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d007      	beq.n	8005f86 <TIM_OC3_SetConfig+0xae>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a19      	ldr	r2, [pc, #100]	@ (8005fe0 <TIM_OC3_SetConfig+0x108>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d003      	beq.n	8005f86 <TIM_OC3_SetConfig+0xae>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a18      	ldr	r2, [pc, #96]	@ (8005fe4 <TIM_OC3_SetConfig+0x10c>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d113      	bne.n	8005fae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	011b      	lsls	r3, r3, #4
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	621a      	str	r2, [r3, #32]
}
 8005fc8:	bf00      	nop
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	40012c00 	.word	0x40012c00
 8005fd8:	40013400 	.word	0x40013400
 8005fdc:	40014000 	.word	0x40014000
 8005fe0:	40014400 	.word	0x40014400
 8005fe4:	40014800 	.word	0x40014800

08005fe8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006016:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800601a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	021b      	lsls	r3, r3, #8
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4313      	orrs	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	031b      	lsls	r3, r3, #12
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	4313      	orrs	r3, r2
 8006042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a18      	ldr	r2, [pc, #96]	@ (80060a8 <TIM_OC4_SetConfig+0xc0>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d00f      	beq.n	800606c <TIM_OC4_SetConfig+0x84>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a17      	ldr	r2, [pc, #92]	@ (80060ac <TIM_OC4_SetConfig+0xc4>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d00b      	beq.n	800606c <TIM_OC4_SetConfig+0x84>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a16      	ldr	r2, [pc, #88]	@ (80060b0 <TIM_OC4_SetConfig+0xc8>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d007      	beq.n	800606c <TIM_OC4_SetConfig+0x84>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a15      	ldr	r2, [pc, #84]	@ (80060b4 <TIM_OC4_SetConfig+0xcc>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d003      	beq.n	800606c <TIM_OC4_SetConfig+0x84>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a14      	ldr	r2, [pc, #80]	@ (80060b8 <TIM_OC4_SetConfig+0xd0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d109      	bne.n	8006080 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006072:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	019b      	lsls	r3, r3, #6
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	4313      	orrs	r3, r2
 800607e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	621a      	str	r2, [r3, #32]
}
 800609a:	bf00      	nop
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	40012c00 	.word	0x40012c00
 80060ac:	40013400 	.word	0x40013400
 80060b0:	40014000 	.word	0x40014000
 80060b4:	40014400 	.word	0x40014400
 80060b8:	40014800 	.word	0x40014800

080060bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006100:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	041b      	lsls	r3, r3, #16
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	4313      	orrs	r3, r2
 800610c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a17      	ldr	r2, [pc, #92]	@ (8006170 <TIM_OC5_SetConfig+0xb4>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00f      	beq.n	8006136 <TIM_OC5_SetConfig+0x7a>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a16      	ldr	r2, [pc, #88]	@ (8006174 <TIM_OC5_SetConfig+0xb8>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00b      	beq.n	8006136 <TIM_OC5_SetConfig+0x7a>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a15      	ldr	r2, [pc, #84]	@ (8006178 <TIM_OC5_SetConfig+0xbc>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d007      	beq.n	8006136 <TIM_OC5_SetConfig+0x7a>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a14      	ldr	r2, [pc, #80]	@ (800617c <TIM_OC5_SetConfig+0xc0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d003      	beq.n	8006136 <TIM_OC5_SetConfig+0x7a>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a13      	ldr	r2, [pc, #76]	@ (8006180 <TIM_OC5_SetConfig+0xc4>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d109      	bne.n	800614a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800613c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	621a      	str	r2, [r3, #32]
}
 8006164:	bf00      	nop
 8006166:	371c      	adds	r7, #28
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	40012c00 	.word	0x40012c00
 8006174:	40013400 	.word	0x40013400
 8006178:	40014000 	.word	0x40014000
 800617c:	40014400 	.word	0x40014400
 8006180:	40014800 	.word	0x40014800

08006184 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	021b      	lsls	r3, r3, #8
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80061ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	051b      	lsls	r3, r3, #20
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a18      	ldr	r2, [pc, #96]	@ (800623c <TIM_OC6_SetConfig+0xb8>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d00f      	beq.n	8006200 <TIM_OC6_SetConfig+0x7c>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a17      	ldr	r2, [pc, #92]	@ (8006240 <TIM_OC6_SetConfig+0xbc>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d00b      	beq.n	8006200 <TIM_OC6_SetConfig+0x7c>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a16      	ldr	r2, [pc, #88]	@ (8006244 <TIM_OC6_SetConfig+0xc0>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d007      	beq.n	8006200 <TIM_OC6_SetConfig+0x7c>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a15      	ldr	r2, [pc, #84]	@ (8006248 <TIM_OC6_SetConfig+0xc4>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d003      	beq.n	8006200 <TIM_OC6_SetConfig+0x7c>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a14      	ldr	r2, [pc, #80]	@ (800624c <TIM_OC6_SetConfig+0xc8>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d109      	bne.n	8006214 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006206:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	029b      	lsls	r3, r3, #10
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	4313      	orrs	r3, r2
 8006212:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	621a      	str	r2, [r3, #32]
}
 800622e:	bf00      	nop
 8006230:	371c      	adds	r7, #28
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	40012c00 	.word	0x40012c00
 8006240:	40013400 	.word	0x40013400
 8006244:	40014000 	.word	0x40014000
 8006248:	40014400 	.word	0x40014400
 800624c:	40014800 	.word	0x40014800

08006250 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f003 031f 	and.w	r3, r3, #31
 8006262:	2201      	movs	r2, #1
 8006264:	fa02 f303 	lsl.w	r3, r2, r3
 8006268:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6a1a      	ldr	r2, [r3, #32]
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	43db      	mvns	r3, r3
 8006272:	401a      	ands	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a1a      	ldr	r2, [r3, #32]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f003 031f 	and.w	r3, r3, #31
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	fa01 f303 	lsl.w	r3, r1, r3
 8006288:	431a      	orrs	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	621a      	str	r2, [r3, #32]
}
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
	...

0800629c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e068      	b.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a2e      	ldr	r2, [pc, #184]	@ (8006394 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d004      	beq.n	80062e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a2d      	ldr	r2, [pc, #180]	@ (8006398 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d108      	bne.n	80062fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80062ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006300:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1e      	ldr	r2, [pc, #120]	@ (8006394 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d01d      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006326:	d018      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a1b      	ldr	r2, [pc, #108]	@ (800639c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d013      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a1a      	ldr	r2, [pc, #104]	@ (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00e      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a18      	ldr	r2, [pc, #96]	@ (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d009      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a13      	ldr	r2, [pc, #76]	@ (8006398 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d004      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a14      	ldr	r2, [pc, #80]	@ (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d10c      	bne.n	8006374 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	4313      	orrs	r3, r2
 800636a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40012c00 	.word	0x40012c00
 8006398:	40013400 	.word	0x40013400
 800639c:	40000400 	.word	0x40000400
 80063a0:	40000800 	.word	0x40000800
 80063a4:	40000c00 	.word	0x40000c00
 80063a8:	40014000 	.word	0x40014000

080063ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e040      	b.n	800647c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d106      	bne.n	8006410 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7fb fcb4 	bl	8001d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2224      	movs	r2, #36	@ 0x24
 8006414:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0201 	bic.w	r2, r2, #1
 8006424:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fc32 	bl	8006c98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 f977 	bl	8006728 <UART_SetConfig>
 800643a:	4603      	mov	r3, r0
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e01b      	b.n	800647c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689a      	ldr	r2, [r3, #8]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006462:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0201 	orr.w	r2, r2, #1
 8006472:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fcb1 	bl	8006ddc <UART_CheckIdleState>
 800647a:	4603      	mov	r3, r0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b08a      	sub	sp, #40	@ 0x28
 8006488:	af02      	add	r7, sp, #8
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	603b      	str	r3, [r7, #0]
 8006490:	4613      	mov	r3, r2
 8006492:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006498:	2b20      	cmp	r3, #32
 800649a:	d177      	bne.n	800658c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <HAL_UART_Transmit+0x24>
 80064a2:	88fb      	ldrh	r3, [r7, #6]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e070      	b.n	800658e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2221      	movs	r2, #33	@ 0x21
 80064b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064ba:	f7fb fe83 	bl	80021c4 <HAL_GetTick>
 80064be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	88fa      	ldrh	r2, [r7, #6]
 80064c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	88fa      	ldrh	r2, [r7, #6]
 80064cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064d8:	d108      	bne.n	80064ec <HAL_UART_Transmit+0x68>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d104      	bne.n	80064ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	61bb      	str	r3, [r7, #24]
 80064ea:	e003      	b.n	80064f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064f4:	e02f      	b.n	8006556 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2200      	movs	r2, #0
 80064fe:	2180      	movs	r1, #128	@ 0x80
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f000 fd13 	bl	8006f2c <UART_WaitOnFlagUntilTimeout>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d004      	beq.n	8006516 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2220      	movs	r2, #32
 8006510:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e03b      	b.n	800658e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10b      	bne.n	8006534 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	881a      	ldrh	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006528:	b292      	uxth	r2, r2
 800652a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	3302      	adds	r3, #2
 8006530:	61bb      	str	r3, [r7, #24]
 8006532:	e007      	b.n	8006544 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	781a      	ldrb	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	3301      	adds	r3, #1
 8006542:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800654a:	b29b      	uxth	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800655c:	b29b      	uxth	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1c9      	bne.n	80064f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2200      	movs	r2, #0
 800656a:	2140      	movs	r1, #64	@ 0x40
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 fcdd 	bl	8006f2c <UART_WaitOnFlagUntilTimeout>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d004      	beq.n	8006582 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2220      	movs	r2, #32
 800657c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e005      	b.n	800658e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2220      	movs	r2, #32
 8006586:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	e000      	b.n	800658e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800658c:	2302      	movs	r3, #2
  }
}
 800658e:	4618      	mov	r0, r3
 8006590:	3720      	adds	r7, #32
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b08a      	sub	sp, #40	@ 0x28
 800659a:	af02      	add	r7, sp, #8
 800659c:	60f8      	str	r0, [r7, #12]
 800659e:	60b9      	str	r1, [r7, #8]
 80065a0:	603b      	str	r3, [r7, #0]
 80065a2:	4613      	mov	r3, r2
 80065a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065ac:	2b20      	cmp	r3, #32
 80065ae:	f040 80b6 	bne.w	800671e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <HAL_UART_Receive+0x28>
 80065b8:	88fb      	ldrh	r3, [r7, #6]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e0ae      	b.n	8006720 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2222      	movs	r2, #34	@ 0x22
 80065ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065d8:	f7fb fdf4 	bl	80021c4 <HAL_GetTick>
 80065dc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	88fa      	ldrh	r2, [r7, #6]
 80065e2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	88fa      	ldrh	r2, [r7, #6]
 80065ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065f6:	d10e      	bne.n	8006616 <HAL_UART_Receive+0x80>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d105      	bne.n	800660c <HAL_UART_Receive+0x76>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006606:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800660a:	e02d      	b.n	8006668 <HAL_UART_Receive+0xd2>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	22ff      	movs	r2, #255	@ 0xff
 8006610:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006614:	e028      	b.n	8006668 <HAL_UART_Receive+0xd2>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10d      	bne.n	800663a <HAL_UART_Receive+0xa4>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d104      	bne.n	8006630 <HAL_UART_Receive+0x9a>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	22ff      	movs	r2, #255	@ 0xff
 800662a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800662e:	e01b      	b.n	8006668 <HAL_UART_Receive+0xd2>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	227f      	movs	r2, #127	@ 0x7f
 8006634:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006638:	e016      	b.n	8006668 <HAL_UART_Receive+0xd2>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006642:	d10d      	bne.n	8006660 <HAL_UART_Receive+0xca>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d104      	bne.n	8006656 <HAL_UART_Receive+0xc0>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	227f      	movs	r2, #127	@ 0x7f
 8006650:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006654:	e008      	b.n	8006668 <HAL_UART_Receive+0xd2>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	223f      	movs	r2, #63	@ 0x3f
 800665a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800665e:	e003      	b.n	8006668 <HAL_UART_Receive+0xd2>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800666e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006678:	d108      	bne.n	800668c <HAL_UART_Receive+0xf6>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d104      	bne.n	800668c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006682:	2300      	movs	r3, #0
 8006684:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	61bb      	str	r3, [r7, #24]
 800668a:	e003      	b.n	8006694 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006690:	2300      	movs	r3, #0
 8006692:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006694:	e037      	b.n	8006706 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2200      	movs	r2, #0
 800669e:	2120      	movs	r1, #32
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 fc43 	bl	8006f2c <UART_WaitOnFlagUntilTimeout>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d005      	beq.n	80066b8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e033      	b.n	8006720 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10c      	bne.n	80066d8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	8a7b      	ldrh	r3, [r7, #18]
 80066c8:	4013      	ands	r3, r2
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	3302      	adds	r3, #2
 80066d4:	61bb      	str	r3, [r7, #24]
 80066d6:	e00d      	b.n	80066f4 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80066de:	b29b      	uxth	r3, r3
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	8a7b      	ldrh	r3, [r7, #18]
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	4013      	ands	r3, r2
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	3301      	adds	r3, #1
 80066f2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	3b01      	subs	r3, #1
 80066fe:	b29a      	uxth	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1c1      	bne.n	8006696 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2220      	movs	r2, #32
 8006716:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	e000      	b.n	8006720 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800671e:	2302      	movs	r3, #2
  }
}
 8006720:	4618      	mov	r0, r3
 8006722:	3720      	adds	r7, #32
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800672c:	b08a      	sub	sp, #40	@ 0x28
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	689a      	ldr	r2, [r3, #8]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	431a      	orrs	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	431a      	orrs	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	69db      	ldr	r3, [r3, #28]
 800674c:	4313      	orrs	r3, r2
 800674e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	4ba4      	ldr	r3, [pc, #656]	@ (80069e8 <UART_SetConfig+0x2c0>)
 8006758:	4013      	ands	r3, r2
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	6812      	ldr	r2, [r2, #0]
 800675e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006760:	430b      	orrs	r3, r1
 8006762:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a99      	ldr	r2, [pc, #612]	@ (80069ec <UART_SetConfig+0x2c4>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d004      	beq.n	8006794 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006790:	4313      	orrs	r3, r2
 8006792:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067a4:	430a      	orrs	r2, r1
 80067a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a90      	ldr	r2, [pc, #576]	@ (80069f0 <UART_SetConfig+0x2c8>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d126      	bne.n	8006800 <UART_SetConfig+0xd8>
 80067b2:	4b90      	ldr	r3, [pc, #576]	@ (80069f4 <UART_SetConfig+0x2cc>)
 80067b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b8:	f003 0303 	and.w	r3, r3, #3
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d81b      	bhi.n	80067f8 <UART_SetConfig+0xd0>
 80067c0:	a201      	add	r2, pc, #4	@ (adr r2, 80067c8 <UART_SetConfig+0xa0>)
 80067c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c6:	bf00      	nop
 80067c8:	080067d9 	.word	0x080067d9
 80067cc:	080067e9 	.word	0x080067e9
 80067d0:	080067e1 	.word	0x080067e1
 80067d4:	080067f1 	.word	0x080067f1
 80067d8:	2301      	movs	r3, #1
 80067da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067de:	e116      	b.n	8006a0e <UART_SetConfig+0x2e6>
 80067e0:	2302      	movs	r3, #2
 80067e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067e6:	e112      	b.n	8006a0e <UART_SetConfig+0x2e6>
 80067e8:	2304      	movs	r3, #4
 80067ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ee:	e10e      	b.n	8006a0e <UART_SetConfig+0x2e6>
 80067f0:	2308      	movs	r3, #8
 80067f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067f6:	e10a      	b.n	8006a0e <UART_SetConfig+0x2e6>
 80067f8:	2310      	movs	r3, #16
 80067fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067fe:	e106      	b.n	8006a0e <UART_SetConfig+0x2e6>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a7c      	ldr	r2, [pc, #496]	@ (80069f8 <UART_SetConfig+0x2d0>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d138      	bne.n	800687c <UART_SetConfig+0x154>
 800680a:	4b7a      	ldr	r3, [pc, #488]	@ (80069f4 <UART_SetConfig+0x2cc>)
 800680c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006810:	f003 030c 	and.w	r3, r3, #12
 8006814:	2b0c      	cmp	r3, #12
 8006816:	d82d      	bhi.n	8006874 <UART_SetConfig+0x14c>
 8006818:	a201      	add	r2, pc, #4	@ (adr r2, 8006820 <UART_SetConfig+0xf8>)
 800681a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681e:	bf00      	nop
 8006820:	08006855 	.word	0x08006855
 8006824:	08006875 	.word	0x08006875
 8006828:	08006875 	.word	0x08006875
 800682c:	08006875 	.word	0x08006875
 8006830:	08006865 	.word	0x08006865
 8006834:	08006875 	.word	0x08006875
 8006838:	08006875 	.word	0x08006875
 800683c:	08006875 	.word	0x08006875
 8006840:	0800685d 	.word	0x0800685d
 8006844:	08006875 	.word	0x08006875
 8006848:	08006875 	.word	0x08006875
 800684c:	08006875 	.word	0x08006875
 8006850:	0800686d 	.word	0x0800686d
 8006854:	2300      	movs	r3, #0
 8006856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800685a:	e0d8      	b.n	8006a0e <UART_SetConfig+0x2e6>
 800685c:	2302      	movs	r3, #2
 800685e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006862:	e0d4      	b.n	8006a0e <UART_SetConfig+0x2e6>
 8006864:	2304      	movs	r3, #4
 8006866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800686a:	e0d0      	b.n	8006a0e <UART_SetConfig+0x2e6>
 800686c:	2308      	movs	r3, #8
 800686e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006872:	e0cc      	b.n	8006a0e <UART_SetConfig+0x2e6>
 8006874:	2310      	movs	r3, #16
 8006876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800687a:	e0c8      	b.n	8006a0e <UART_SetConfig+0x2e6>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a5e      	ldr	r2, [pc, #376]	@ (80069fc <UART_SetConfig+0x2d4>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d125      	bne.n	80068d2 <UART_SetConfig+0x1aa>
 8006886:	4b5b      	ldr	r3, [pc, #364]	@ (80069f4 <UART_SetConfig+0x2cc>)
 8006888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800688c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006890:	2b30      	cmp	r3, #48	@ 0x30
 8006892:	d016      	beq.n	80068c2 <UART_SetConfig+0x19a>
 8006894:	2b30      	cmp	r3, #48	@ 0x30
 8006896:	d818      	bhi.n	80068ca <UART_SetConfig+0x1a2>
 8006898:	2b20      	cmp	r3, #32
 800689a:	d00a      	beq.n	80068b2 <UART_SetConfig+0x18a>
 800689c:	2b20      	cmp	r3, #32
 800689e:	d814      	bhi.n	80068ca <UART_SetConfig+0x1a2>
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d002      	beq.n	80068aa <UART_SetConfig+0x182>
 80068a4:	2b10      	cmp	r3, #16
 80068a6:	d008      	beq.n	80068ba <UART_SetConfig+0x192>
 80068a8:	e00f      	b.n	80068ca <UART_SetConfig+0x1a2>
 80068aa:	2300      	movs	r3, #0
 80068ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068b0:	e0ad      	b.n	8006a0e <UART_SetConfig+0x2e6>
 80068b2:	2302      	movs	r3, #2
 80068b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068b8:	e0a9      	b.n	8006a0e <UART_SetConfig+0x2e6>
 80068ba:	2304      	movs	r3, #4
 80068bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068c0:	e0a5      	b.n	8006a0e <UART_SetConfig+0x2e6>
 80068c2:	2308      	movs	r3, #8
 80068c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068c8:	e0a1      	b.n	8006a0e <UART_SetConfig+0x2e6>
 80068ca:	2310      	movs	r3, #16
 80068cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068d0:	e09d      	b.n	8006a0e <UART_SetConfig+0x2e6>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a4a      	ldr	r2, [pc, #296]	@ (8006a00 <UART_SetConfig+0x2d8>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d125      	bne.n	8006928 <UART_SetConfig+0x200>
 80068dc:	4b45      	ldr	r3, [pc, #276]	@ (80069f4 <UART_SetConfig+0x2cc>)
 80068de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80068e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80068e8:	d016      	beq.n	8006918 <UART_SetConfig+0x1f0>
 80068ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80068ec:	d818      	bhi.n	8006920 <UART_SetConfig+0x1f8>
 80068ee:	2b80      	cmp	r3, #128	@ 0x80
 80068f0:	d00a      	beq.n	8006908 <UART_SetConfig+0x1e0>
 80068f2:	2b80      	cmp	r3, #128	@ 0x80
 80068f4:	d814      	bhi.n	8006920 <UART_SetConfig+0x1f8>
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <UART_SetConfig+0x1d8>
 80068fa:	2b40      	cmp	r3, #64	@ 0x40
 80068fc:	d008      	beq.n	8006910 <UART_SetConfig+0x1e8>
 80068fe:	e00f      	b.n	8006920 <UART_SetConfig+0x1f8>
 8006900:	2300      	movs	r3, #0
 8006902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006906:	e082      	b.n	8006a0e <UART_SetConfig+0x2e6>
 8006908:	2302      	movs	r3, #2
 800690a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800690e:	e07e      	b.n	8006a0e <UART_SetConfig+0x2e6>
 8006910:	2304      	movs	r3, #4
 8006912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006916:	e07a      	b.n	8006a0e <UART_SetConfig+0x2e6>
 8006918:	2308      	movs	r3, #8
 800691a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800691e:	e076      	b.n	8006a0e <UART_SetConfig+0x2e6>
 8006920:	2310      	movs	r3, #16
 8006922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006926:	e072      	b.n	8006a0e <UART_SetConfig+0x2e6>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a35      	ldr	r2, [pc, #212]	@ (8006a04 <UART_SetConfig+0x2dc>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d12a      	bne.n	8006988 <UART_SetConfig+0x260>
 8006932:	4b30      	ldr	r3, [pc, #192]	@ (80069f4 <UART_SetConfig+0x2cc>)
 8006934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006938:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800693c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006940:	d01a      	beq.n	8006978 <UART_SetConfig+0x250>
 8006942:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006946:	d81b      	bhi.n	8006980 <UART_SetConfig+0x258>
 8006948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800694c:	d00c      	beq.n	8006968 <UART_SetConfig+0x240>
 800694e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006952:	d815      	bhi.n	8006980 <UART_SetConfig+0x258>
 8006954:	2b00      	cmp	r3, #0
 8006956:	d003      	beq.n	8006960 <UART_SetConfig+0x238>
 8006958:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800695c:	d008      	beq.n	8006970 <UART_SetConfig+0x248>
 800695e:	e00f      	b.n	8006980 <UART_SetConfig+0x258>
 8006960:	2300      	movs	r3, #0
 8006962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006966:	e052      	b.n	8006a0e <UART_SetConfig+0x2e6>
 8006968:	2302      	movs	r3, #2
 800696a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800696e:	e04e      	b.n	8006a0e <UART_SetConfig+0x2e6>
 8006970:	2304      	movs	r3, #4
 8006972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006976:	e04a      	b.n	8006a0e <UART_SetConfig+0x2e6>
 8006978:	2308      	movs	r3, #8
 800697a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800697e:	e046      	b.n	8006a0e <UART_SetConfig+0x2e6>
 8006980:	2310      	movs	r3, #16
 8006982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006986:	e042      	b.n	8006a0e <UART_SetConfig+0x2e6>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a17      	ldr	r2, [pc, #92]	@ (80069ec <UART_SetConfig+0x2c4>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d13a      	bne.n	8006a08 <UART_SetConfig+0x2e0>
 8006992:	4b18      	ldr	r3, [pc, #96]	@ (80069f4 <UART_SetConfig+0x2cc>)
 8006994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006998:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800699c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069a0:	d01a      	beq.n	80069d8 <UART_SetConfig+0x2b0>
 80069a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069a6:	d81b      	bhi.n	80069e0 <UART_SetConfig+0x2b8>
 80069a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069ac:	d00c      	beq.n	80069c8 <UART_SetConfig+0x2a0>
 80069ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069b2:	d815      	bhi.n	80069e0 <UART_SetConfig+0x2b8>
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <UART_SetConfig+0x298>
 80069b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069bc:	d008      	beq.n	80069d0 <UART_SetConfig+0x2a8>
 80069be:	e00f      	b.n	80069e0 <UART_SetConfig+0x2b8>
 80069c0:	2300      	movs	r3, #0
 80069c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069c6:	e022      	b.n	8006a0e <UART_SetConfig+0x2e6>
 80069c8:	2302      	movs	r3, #2
 80069ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069ce:	e01e      	b.n	8006a0e <UART_SetConfig+0x2e6>
 80069d0:	2304      	movs	r3, #4
 80069d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069d6:	e01a      	b.n	8006a0e <UART_SetConfig+0x2e6>
 80069d8:	2308      	movs	r3, #8
 80069da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069de:	e016      	b.n	8006a0e <UART_SetConfig+0x2e6>
 80069e0:	2310      	movs	r3, #16
 80069e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069e6:	e012      	b.n	8006a0e <UART_SetConfig+0x2e6>
 80069e8:	efff69f3 	.word	0xefff69f3
 80069ec:	40008000 	.word	0x40008000
 80069f0:	40013800 	.word	0x40013800
 80069f4:	40021000 	.word	0x40021000
 80069f8:	40004400 	.word	0x40004400
 80069fc:	40004800 	.word	0x40004800
 8006a00:	40004c00 	.word	0x40004c00
 8006a04:	40005000 	.word	0x40005000
 8006a08:	2310      	movs	r3, #16
 8006a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a9f      	ldr	r2, [pc, #636]	@ (8006c90 <UART_SetConfig+0x568>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d17a      	bne.n	8006b0e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a1c:	2b08      	cmp	r3, #8
 8006a1e:	d824      	bhi.n	8006a6a <UART_SetConfig+0x342>
 8006a20:	a201      	add	r2, pc, #4	@ (adr r2, 8006a28 <UART_SetConfig+0x300>)
 8006a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a26:	bf00      	nop
 8006a28:	08006a4d 	.word	0x08006a4d
 8006a2c:	08006a6b 	.word	0x08006a6b
 8006a30:	08006a55 	.word	0x08006a55
 8006a34:	08006a6b 	.word	0x08006a6b
 8006a38:	08006a5b 	.word	0x08006a5b
 8006a3c:	08006a6b 	.word	0x08006a6b
 8006a40:	08006a6b 	.word	0x08006a6b
 8006a44:	08006a6b 	.word	0x08006a6b
 8006a48:	08006a63 	.word	0x08006a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a4c:	f7fd fe96 	bl	800477c <HAL_RCC_GetPCLK1Freq>
 8006a50:	61f8      	str	r0, [r7, #28]
        break;
 8006a52:	e010      	b.n	8006a76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a54:	4b8f      	ldr	r3, [pc, #572]	@ (8006c94 <UART_SetConfig+0x56c>)
 8006a56:	61fb      	str	r3, [r7, #28]
        break;
 8006a58:	e00d      	b.n	8006a76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a5a:	f7fd fdf7 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8006a5e:	61f8      	str	r0, [r7, #28]
        break;
 8006a60:	e009      	b.n	8006a76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a66:	61fb      	str	r3, [r7, #28]
        break;
 8006a68:	e005      	b.n	8006a76 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006a74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 80fb 	beq.w	8006c74 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	4613      	mov	r3, r2
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	4413      	add	r3, r2
 8006a88:	69fa      	ldr	r2, [r7, #28]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d305      	bcc.n	8006a9a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a94:	69fa      	ldr	r2, [r7, #28]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d903      	bls.n	8006aa2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006aa0:	e0e8      	b.n	8006c74 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	461c      	mov	r4, r3
 8006aa8:	4615      	mov	r5, r2
 8006aaa:	f04f 0200 	mov.w	r2, #0
 8006aae:	f04f 0300 	mov.w	r3, #0
 8006ab2:	022b      	lsls	r3, r5, #8
 8006ab4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006ab8:	0222      	lsls	r2, r4, #8
 8006aba:	68f9      	ldr	r1, [r7, #12]
 8006abc:	6849      	ldr	r1, [r1, #4]
 8006abe:	0849      	lsrs	r1, r1, #1
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	4688      	mov	r8, r1
 8006ac4:	4681      	mov	r9, r0
 8006ac6:	eb12 0a08 	adds.w	sl, r2, r8
 8006aca:	eb43 0b09 	adc.w	fp, r3, r9
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	603b      	str	r3, [r7, #0]
 8006ad6:	607a      	str	r2, [r7, #4]
 8006ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006adc:	4650      	mov	r0, sl
 8006ade:	4659      	mov	r1, fp
 8006ae0:	f7fa f862 	bl	8000ba8 <__aeabi_uldivmod>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4613      	mov	r3, r2
 8006aea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006af2:	d308      	bcc.n	8006b06 <UART_SetConfig+0x3de>
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006afa:	d204      	bcs.n	8006b06 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	60da      	str	r2, [r3, #12]
 8006b04:	e0b6      	b.n	8006c74 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006b0c:	e0b2      	b.n	8006c74 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b16:	d15e      	bne.n	8006bd6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006b18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b1c:	2b08      	cmp	r3, #8
 8006b1e:	d828      	bhi.n	8006b72 <UART_SetConfig+0x44a>
 8006b20:	a201      	add	r2, pc, #4	@ (adr r2, 8006b28 <UART_SetConfig+0x400>)
 8006b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b26:	bf00      	nop
 8006b28:	08006b4d 	.word	0x08006b4d
 8006b2c:	08006b55 	.word	0x08006b55
 8006b30:	08006b5d 	.word	0x08006b5d
 8006b34:	08006b73 	.word	0x08006b73
 8006b38:	08006b63 	.word	0x08006b63
 8006b3c:	08006b73 	.word	0x08006b73
 8006b40:	08006b73 	.word	0x08006b73
 8006b44:	08006b73 	.word	0x08006b73
 8006b48:	08006b6b 	.word	0x08006b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b4c:	f7fd fe16 	bl	800477c <HAL_RCC_GetPCLK1Freq>
 8006b50:	61f8      	str	r0, [r7, #28]
        break;
 8006b52:	e014      	b.n	8006b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b54:	f7fd fe28 	bl	80047a8 <HAL_RCC_GetPCLK2Freq>
 8006b58:	61f8      	str	r0, [r7, #28]
        break;
 8006b5a:	e010      	b.n	8006b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b5c:	4b4d      	ldr	r3, [pc, #308]	@ (8006c94 <UART_SetConfig+0x56c>)
 8006b5e:	61fb      	str	r3, [r7, #28]
        break;
 8006b60:	e00d      	b.n	8006b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b62:	f7fd fd73 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8006b66:	61f8      	str	r0, [r7, #28]
        break;
 8006b68:	e009      	b.n	8006b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b6e:	61fb      	str	r3, [r7, #28]
        break;
 8006b70:	e005      	b.n	8006b7e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006b7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d077      	beq.n	8006c74 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	005a      	lsls	r2, r3, #1
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	085b      	lsrs	r3, r3, #1
 8006b8e:	441a      	add	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b98:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	2b0f      	cmp	r3, #15
 8006b9e:	d916      	bls.n	8006bce <UART_SetConfig+0x4a6>
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ba6:	d212      	bcs.n	8006bce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	f023 030f 	bic.w	r3, r3, #15
 8006bb0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	085b      	lsrs	r3, r3, #1
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f003 0307 	and.w	r3, r3, #7
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	8afb      	ldrh	r3, [r7, #22]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	8afa      	ldrh	r2, [r7, #22]
 8006bca:	60da      	str	r2, [r3, #12]
 8006bcc:	e052      	b.n	8006c74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006bd4:	e04e      	b.n	8006c74 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bd6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006bda:	2b08      	cmp	r3, #8
 8006bdc:	d827      	bhi.n	8006c2e <UART_SetConfig+0x506>
 8006bde:	a201      	add	r2, pc, #4	@ (adr r2, 8006be4 <UART_SetConfig+0x4bc>)
 8006be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be4:	08006c09 	.word	0x08006c09
 8006be8:	08006c11 	.word	0x08006c11
 8006bec:	08006c19 	.word	0x08006c19
 8006bf0:	08006c2f 	.word	0x08006c2f
 8006bf4:	08006c1f 	.word	0x08006c1f
 8006bf8:	08006c2f 	.word	0x08006c2f
 8006bfc:	08006c2f 	.word	0x08006c2f
 8006c00:	08006c2f 	.word	0x08006c2f
 8006c04:	08006c27 	.word	0x08006c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c08:	f7fd fdb8 	bl	800477c <HAL_RCC_GetPCLK1Freq>
 8006c0c:	61f8      	str	r0, [r7, #28]
        break;
 8006c0e:	e014      	b.n	8006c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c10:	f7fd fdca 	bl	80047a8 <HAL_RCC_GetPCLK2Freq>
 8006c14:	61f8      	str	r0, [r7, #28]
        break;
 8006c16:	e010      	b.n	8006c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c18:	4b1e      	ldr	r3, [pc, #120]	@ (8006c94 <UART_SetConfig+0x56c>)
 8006c1a:	61fb      	str	r3, [r7, #28]
        break;
 8006c1c:	e00d      	b.n	8006c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c1e:	f7fd fd15 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8006c22:	61f8      	str	r0, [r7, #28]
        break;
 8006c24:	e009      	b.n	8006c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c2a:	61fb      	str	r3, [r7, #28]
        break;
 8006c2c:	e005      	b.n	8006c3a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006c38:	bf00      	nop
    }

    if (pclk != 0U)
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d019      	beq.n	8006c74 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	085a      	lsrs	r2, r3, #1
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	441a      	add	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c52:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	2b0f      	cmp	r3, #15
 8006c58:	d909      	bls.n	8006c6e <UART_SetConfig+0x546>
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c60:	d205      	bcs.n	8006c6e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	60da      	str	r2, [r3, #12]
 8006c6c:	e002      	b.n	8006c74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006c80:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3728      	adds	r7, #40	@ 0x28
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c8e:	bf00      	nop
 8006c90:	40008000 	.word	0x40008000
 8006c94:	00f42400 	.word	0x00f42400

08006c98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca4:	f003 0308 	and.w	r3, r3, #8
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00a      	beq.n	8006cc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00a      	beq.n	8006d06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0a:	f003 0304 	and.w	r3, r3, #4
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00a      	beq.n	8006d28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d2c:	f003 0310 	and.w	r3, r3, #16
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00a      	beq.n	8006d4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4e:	f003 0320 	and.w	r3, r3, #32
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00a      	beq.n	8006d6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d01a      	beq.n	8006dae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d96:	d10a      	bne.n	8006dae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	430a      	orrs	r2, r1
 8006dac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00a      	beq.n	8006dd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	605a      	str	r2, [r3, #4]
  }
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b098      	sub	sp, #96	@ 0x60
 8006de0:	af02      	add	r7, sp, #8
 8006de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006dec:	f7fb f9ea 	bl	80021c4 <HAL_GetTick>
 8006df0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0308 	and.w	r3, r3, #8
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d12e      	bne.n	8006e5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f88c 	bl	8006f2c <UART_WaitOnFlagUntilTimeout>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d021      	beq.n	8006e5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e22:	e853 3f00 	ldrex	r3, [r3]
 8006e26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	461a      	mov	r2, r3
 8006e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e38:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e3a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e40:	e841 2300 	strex	r3, r2, [r1]
 8006e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1e6      	bne.n	8006e1a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e062      	b.n	8006f24 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0304 	and.w	r3, r3, #4
 8006e68:	2b04      	cmp	r3, #4
 8006e6a:	d149      	bne.n	8006f00 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e74:	2200      	movs	r2, #0
 8006e76:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f856 	bl	8006f2c <UART_WaitOnFlagUntilTimeout>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d03c      	beq.n	8006f00 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8e:	e853 3f00 	ldrex	r3, [r3]
 8006e92:	623b      	str	r3, [r7, #32]
   return(result);
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ea4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ea6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eac:	e841 2300 	strex	r3, r2, [r1]
 8006eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1e6      	bne.n	8006e86 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3308      	adds	r3, #8
 8006ebe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	e853 3f00 	ldrex	r3, [r3]
 8006ec6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 0301 	bic.w	r3, r3, #1
 8006ece:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3308      	adds	r3, #8
 8006ed6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ed8:	61fa      	str	r2, [r7, #28]
 8006eda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006edc:	69b9      	ldr	r1, [r7, #24]
 8006ede:	69fa      	ldr	r2, [r7, #28]
 8006ee0:	e841 2300 	strex	r3, r2, [r1]
 8006ee4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1e5      	bne.n	8006eb8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e011      	b.n	8006f24 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2220      	movs	r2, #32
 8006f04:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3758      	adds	r7, #88	@ 0x58
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	603b      	str	r3, [r7, #0]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f3c:	e04f      	b.n	8006fde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f44:	d04b      	beq.n	8006fde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f46:	f7fb f93d 	bl	80021c4 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d302      	bcc.n	8006f5c <UART_WaitOnFlagUntilTimeout+0x30>
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e04e      	b.n	8006ffe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0304 	and.w	r3, r3, #4
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d037      	beq.n	8006fde <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2b80      	cmp	r3, #128	@ 0x80
 8006f72:	d034      	beq.n	8006fde <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2b40      	cmp	r3, #64	@ 0x40
 8006f78:	d031      	beq.n	8006fde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	f003 0308 	and.w	r3, r3, #8
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d110      	bne.n	8006faa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2208      	movs	r2, #8
 8006f8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 f838 	bl	8007006 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2208      	movs	r2, #8
 8006f9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e029      	b.n	8006ffe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fb8:	d111      	bne.n	8006fde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f000 f81e 	bl	8007006 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e00f      	b.n	8006ffe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	69da      	ldr	r2, [r3, #28]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	bf0c      	ite	eq
 8006fee:	2301      	moveq	r3, #1
 8006ff0:	2300      	movne	r3, #0
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	79fb      	ldrb	r3, [r7, #7]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d0a0      	beq.n	8006f3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007006:	b480      	push	{r7}
 8007008:	b095      	sub	sp, #84	@ 0x54
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007016:	e853 3f00 	ldrex	r3, [r3]
 800701a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800701c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	461a      	mov	r2, r3
 800702a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800702c:	643b      	str	r3, [r7, #64]	@ 0x40
 800702e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007030:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007032:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007034:	e841 2300 	strex	r3, r2, [r1]
 8007038:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800703a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1e6      	bne.n	800700e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3308      	adds	r3, #8
 8007046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	e853 3f00 	ldrex	r3, [r3]
 800704e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	f023 0301 	bic.w	r3, r3, #1
 8007056:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3308      	adds	r3, #8
 800705e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007060:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007062:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007068:	e841 2300 	strex	r3, r2, [r1]
 800706c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800706e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1e5      	bne.n	8007040 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007078:	2b01      	cmp	r3, #1
 800707a:	d118      	bne.n	80070ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	e853 3f00 	ldrex	r3, [r3]
 8007088:	60bb      	str	r3, [r7, #8]
   return(result);
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	f023 0310 	bic.w	r3, r3, #16
 8007090:	647b      	str	r3, [r7, #68]	@ 0x44
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800709a:	61bb      	str	r3, [r7, #24]
 800709c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709e:	6979      	ldr	r1, [r7, #20]
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	e841 2300 	strex	r3, r2, [r1]
 80070a6:	613b      	str	r3, [r7, #16]
   return(result);
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1e6      	bne.n	800707c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2220      	movs	r2, #32
 80070b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80070c2:	bf00      	nop
 80070c4:	3754      	adds	r7, #84	@ 0x54
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr

080070ce <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b085      	sub	sp, #20
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	4603      	mov	r3, r0
 80070d6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80070d8:	2300      	movs	r3, #0
 80070da:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80070dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070e0:	2b84      	cmp	r3, #132	@ 0x84
 80070e2:	d005      	beq.n	80070f0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80070e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4413      	add	r3, r2
 80070ec:	3303      	adds	r3, #3
 80070ee:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80070f0:	68fb      	ldr	r3, [r7, #12]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007102:	f000 fbdb 	bl	80078bc <vTaskStartScheduler>
  
  return osOK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	bd80      	pop	{r7, pc}

0800710c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800710c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800710e:	b089      	sub	sp, #36	@ 0x24
 8007110:	af04      	add	r7, sp, #16
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d020      	beq.n	8007160 <osThreadCreate+0x54>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d01c      	beq.n	8007160 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685c      	ldr	r4, [r3, #4]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	691e      	ldr	r6, [r3, #16]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007138:	4618      	mov	r0, r3
 800713a:	f7ff ffc8 	bl	80070ce <makeFreeRtosPriority>
 800713e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007148:	9202      	str	r2, [sp, #8]
 800714a:	9301      	str	r3, [sp, #4]
 800714c:	9100      	str	r1, [sp, #0]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	4632      	mov	r2, r6
 8007152:	4629      	mov	r1, r5
 8007154:	4620      	mov	r0, r4
 8007156:	f000 f9cc 	bl	80074f2 <xTaskCreateStatic>
 800715a:	4603      	mov	r3, r0
 800715c:	60fb      	str	r3, [r7, #12]
 800715e:	e01c      	b.n	800719a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685c      	ldr	r4, [r3, #4]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800716c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007174:	4618      	mov	r0, r3
 8007176:	f7ff ffaa 	bl	80070ce <makeFreeRtosPriority>
 800717a:	4602      	mov	r2, r0
 800717c:	f107 030c 	add.w	r3, r7, #12
 8007180:	9301      	str	r3, [sp, #4]
 8007182:	9200      	str	r2, [sp, #0]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	4632      	mov	r2, r6
 8007188:	4629      	mov	r1, r5
 800718a:	4620      	mov	r0, r4
 800718c:	f000 fa11 	bl	80075b2 <xTaskCreate>
 8007190:	4603      	mov	r3, r0
 8007192:	2b01      	cmp	r3, #1
 8007194:	d001      	beq.n	800719a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007196:	2300      	movs	r3, #0
 8007198:	e000      	b.n	800719c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800719a:	68fb      	ldr	r3, [r7, #12]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071a4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <osDelay+0x16>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	e000      	b.n	80071bc <osDelay+0x18>
 80071ba:	2301      	movs	r3, #1
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 fb47 	bl	8007850 <vTaskDelay>
  
  return osOK;
 80071c2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80071d2:	201c      	movs	r0, #28
 80071d4:	f001 f960 	bl	8008498 <pvPortMalloc>
 80071d8:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00a      	beq.n	80071f6 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	3304      	adds	r3, #4
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 f8cd 	bl	800738a <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80071f6:	687b      	ldr	r3, [r7, #4]
	}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10b      	bne.n	800722c <xEventGroupClearBits+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007218:	f383 8811 	msr	BASEPRI, r3
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007226:	bf00      	nop
 8007228:	bf00      	nop
 800722a:	e7fd      	b.n	8007228 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007232:	d30b      	bcc.n	800724c <xEventGroupClearBits+0x4c>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	60bb      	str	r3, [r7, #8]
}
 8007246:	bf00      	nop
 8007248:	bf00      	nop
 800724a:	e7fd      	b.n	8007248 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 800724c:	f001 f844 	bl	80082d8 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	43db      	mvns	r3, r3
 800725e:	401a      	ands	r2, r3
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8007264:	f001 f86a 	bl	800833c <vPortExitCritical>

	return uxReturn;
 8007268:	693b      	ldr	r3, [r7, #16]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b08e      	sub	sp, #56	@ 0x38
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800727c:	2300      	movs	r3, #0
 800727e:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8007284:	2300      	movs	r3, #0
 8007286:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10b      	bne.n	80072a6 <xEventGroupSetBits+0x34>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	613b      	str	r3, [r7, #16]
}
 80072a0:	bf00      	nop
 80072a2:	bf00      	nop
 80072a4:	e7fd      	b.n	80072a2 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072ac:	d30b      	bcc.n	80072c6 <xEventGroupSetBits+0x54>
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	60fb      	str	r3, [r7, #12]
}
 80072c0:	bf00      	nop
 80072c2:	bf00      	nop
 80072c4:	e7fd      	b.n	80072c2 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80072c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c8:	3304      	adds	r3, #4
 80072ca:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ce:	3308      	adds	r3, #8
 80072d0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80072d2:	f000 fb5d 	bl	8007990 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80072d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80072dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	431a      	orrs	r2, r3
 80072e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80072e8:	e03c      	b.n	8007364 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 80072ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80072f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80072f6:	2300      	movs	r3, #0
 80072f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007300:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007308:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d108      	bne.n	8007326 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	4013      	ands	r3, r2
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00b      	beq.n	8007338 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8007320:	2301      	movs	r3, #1
 8007322:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007324:	e008      	b.n	8007338 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8007326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	4013      	ands	r3, r2
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	429a      	cmp	r2, r3
 8007332:	d101      	bne.n	8007338 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007334:	2301      	movs	r3, #1
 8007336:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733a:	2b00      	cmp	r3, #0
 800733c:	d010      	beq.n	8007360 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d003      	beq.n	8007350 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8007348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	4313      	orrs	r3, r2
 800734e:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8007350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007358:	4619      	mov	r1, r3
 800735a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800735c:	f000 fce2 	bl	8007d24 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8007364:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	429a      	cmp	r2, r3
 800736a:	d1be      	bne.n	80072ea <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800736c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007372:	43db      	mvns	r3, r3
 8007374:	401a      	ands	r2, r3
 8007376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007378:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800737a:	f000 fb17 	bl	80079ac <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800737e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007380:	681b      	ldr	r3, [r3, #0]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3738      	adds	r7, #56	@ 0x38
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800738a:	b480      	push	{r7}
 800738c:	b083      	sub	sp, #12
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f103 0208 	add.w	r2, r3, #8
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f04f 32ff 	mov.w	r2, #4294967295
 80073a2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f103 0208 	add.w	r2, r3, #8
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f103 0208 	add.w	r2, r3, #8
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073be:	bf00      	nop
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80073ca:	b480      	push	{r7}
 80073cc:	b083      	sub	sp, #12
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	689a      	ldr	r2, [r3, #8]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	683a      	ldr	r2, [r7, #0]
 800740e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	601a      	str	r2, [r3, #0]
}
 8007420:	bf00      	nop
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007442:	d103      	bne.n	800744c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	60fb      	str	r3, [r7, #12]
 800744a:	e00c      	b.n	8007466 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3308      	adds	r3, #8
 8007450:	60fb      	str	r3, [r7, #12]
 8007452:	e002      	b.n	800745a <vListInsert+0x2e>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	60fb      	str	r3, [r7, #12]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	429a      	cmp	r2, r3
 8007464:	d2f6      	bcs.n	8007454 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	601a      	str	r2, [r3, #0]
}
 8007492:	bf00      	nop
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800749e:	b480      	push	{r7}
 80074a0:	b085      	sub	sp, #20
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	6892      	ldr	r2, [r2, #8]
 80074b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	6852      	ldr	r2, [r2, #4]
 80074be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d103      	bne.n	80074d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689a      	ldr	r2, [r3, #8]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	1e5a      	subs	r2, r3, #1
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b08e      	sub	sp, #56	@ 0x38
 80074f6:	af04      	add	r7, sp, #16
 80074f8:	60f8      	str	r0, [r7, #12]
 80074fa:	60b9      	str	r1, [r7, #8]
 80074fc:	607a      	str	r2, [r7, #4]
 80074fe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10b      	bne.n	800751e <xTaskCreateStatic+0x2c>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	623b      	str	r3, [r7, #32]
}
 8007518:	bf00      	nop
 800751a:	bf00      	nop
 800751c:	e7fd      	b.n	800751a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800751e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10b      	bne.n	800753c <xTaskCreateStatic+0x4a>
	__asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	61fb      	str	r3, [r7, #28]
}
 8007536:	bf00      	nop
 8007538:	bf00      	nop
 800753a:	e7fd      	b.n	8007538 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800753c:	23a0      	movs	r3, #160	@ 0xa0
 800753e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	2ba0      	cmp	r3, #160	@ 0xa0
 8007544:	d00b      	beq.n	800755e <xTaskCreateStatic+0x6c>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	61bb      	str	r3, [r7, #24]
}
 8007558:	bf00      	nop
 800755a:	bf00      	nop
 800755c:	e7fd      	b.n	800755a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800755e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007562:	2b00      	cmp	r3, #0
 8007564:	d01e      	beq.n	80075a4 <xTaskCreateStatic+0xb2>
 8007566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007568:	2b00      	cmp	r3, #0
 800756a:	d01b      	beq.n	80075a4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800756c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800756e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007572:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007574:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007578:	2202      	movs	r2, #2
 800757a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800757e:	2300      	movs	r3, #0
 8007580:	9303      	str	r3, [sp, #12]
 8007582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007584:	9302      	str	r3, [sp, #8]
 8007586:	f107 0314 	add.w	r3, r7, #20
 800758a:	9301      	str	r3, [sp, #4]
 800758c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	68b9      	ldr	r1, [r7, #8]
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f000 f850 	bl	800763c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800759c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800759e:	f000 f8ed 	bl	800777c <prvAddNewTaskToReadyList>
 80075a2:	e001      	b.n	80075a8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80075a4:	2300      	movs	r3, #0
 80075a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075a8:	697b      	ldr	r3, [r7, #20]
	}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3728      	adds	r7, #40	@ 0x28
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b08c      	sub	sp, #48	@ 0x30
 80075b6:	af04      	add	r7, sp, #16
 80075b8:	60f8      	str	r0, [r7, #12]
 80075ba:	60b9      	str	r1, [r7, #8]
 80075bc:	603b      	str	r3, [r7, #0]
 80075be:	4613      	mov	r3, r2
 80075c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80075c2:	88fb      	ldrh	r3, [r7, #6]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 ff66 	bl	8008498 <pvPortMalloc>
 80075cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00e      	beq.n	80075f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80075d4:	20a0      	movs	r0, #160	@ 0xa0
 80075d6:	f000 ff5f 	bl	8008498 <pvPortMalloc>
 80075da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d003      	beq.n	80075ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80075e8:	e005      	b.n	80075f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075ea:	6978      	ldr	r0, [r7, #20]
 80075ec:	f001 f822 	bl	8008634 <vPortFree>
 80075f0:	e001      	b.n	80075f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075f2:	2300      	movs	r3, #0
 80075f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d017      	beq.n	800762c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007604:	88fa      	ldrh	r2, [r7, #6]
 8007606:	2300      	movs	r3, #0
 8007608:	9303      	str	r3, [sp, #12]
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	9302      	str	r3, [sp, #8]
 800760e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007610:	9301      	str	r3, [sp, #4]
 8007612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	68b9      	ldr	r1, [r7, #8]
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 f80e 	bl	800763c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007620:	69f8      	ldr	r0, [r7, #28]
 8007622:	f000 f8ab 	bl	800777c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007626:	2301      	movs	r3, #1
 8007628:	61bb      	str	r3, [r7, #24]
 800762a:	e002      	b.n	8007632 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800762c:	f04f 33ff 	mov.w	r3, #4294967295
 8007630:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007632:	69bb      	ldr	r3, [r7, #24]
	}
 8007634:	4618      	mov	r0, r3
 8007636:	3720      	adds	r7, #32
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b088      	sub	sp, #32
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
 8007648:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800764a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007654:	3b01      	subs	r3, #1
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	f023 0307 	bic.w	r3, r3, #7
 8007662:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	f003 0307 	and.w	r3, r3, #7
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00b      	beq.n	8007686 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	617b      	str	r3, [r7, #20]
}
 8007680:	bf00      	nop
 8007682:	bf00      	nop
 8007684:	e7fd      	b.n	8007682 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d01f      	beq.n	80076cc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800768c:	2300      	movs	r3, #0
 800768e:	61fb      	str	r3, [r7, #28]
 8007690:	e012      	b.n	80076b8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	4413      	add	r3, r2
 8007698:	7819      	ldrb	r1, [r3, #0]
 800769a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	4413      	add	r3, r2
 80076a0:	3334      	adds	r3, #52	@ 0x34
 80076a2:	460a      	mov	r2, r1
 80076a4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	4413      	add	r3, r2
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d006      	beq.n	80076c0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	3301      	adds	r3, #1
 80076b6:	61fb      	str	r3, [r7, #28]
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	2b0f      	cmp	r3, #15
 80076bc:	d9e9      	bls.n	8007692 <prvInitialiseNewTask+0x56>
 80076be:	e000      	b.n	80076c2 <prvInitialiseNewTask+0x86>
			{
				break;
 80076c0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80076c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80076ca:	e003      	b.n	80076d4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80076cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d6:	2b06      	cmp	r3, #6
 80076d8:	d901      	bls.n	80076de <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80076da:	2306      	movs	r3, #6
 80076dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80076de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80076e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076e8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80076ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ec:	2200      	movs	r2, #0
 80076ee:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f2:	3304      	adds	r3, #4
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7ff fe68 	bl	80073ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fc:	3318      	adds	r3, #24
 80076fe:	4618      	mov	r0, r3
 8007700:	f7ff fe63 	bl	80073ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007706:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007708:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800770a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800770c:	f1c3 0207 	rsb	r2, r3, #7
 8007710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007712:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007716:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007718:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800771a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771c:	2200      	movs	r2, #0
 800771e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007724:	2200      	movs	r2, #0
 8007726:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800772a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772c:	334c      	adds	r3, #76	@ 0x4c
 800772e:	224c      	movs	r2, #76	@ 0x4c
 8007730:	2100      	movs	r1, #0
 8007732:	4618      	mov	r0, r3
 8007734:	f001 fe1b 	bl	800936e <memset>
 8007738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773a:	4a0d      	ldr	r2, [pc, #52]	@ (8007770 <prvInitialiseNewTask+0x134>)
 800773c:	651a      	str	r2, [r3, #80]	@ 0x50
 800773e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007740:	4a0c      	ldr	r2, [pc, #48]	@ (8007774 <prvInitialiseNewTask+0x138>)
 8007742:	655a      	str	r2, [r3, #84]	@ 0x54
 8007744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007746:	4a0c      	ldr	r2, [pc, #48]	@ (8007778 <prvInitialiseNewTask+0x13c>)
 8007748:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	68f9      	ldr	r1, [r7, #12]
 800774e:	69b8      	ldr	r0, [r7, #24]
 8007750:	f000 fc8e 	bl	8008070 <pxPortInitialiseStack>
 8007754:	4602      	mov	r2, r0
 8007756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007758:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800775a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007766:	bf00      	nop
 8007768:	3720      	adds	r7, #32
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	200047f0 	.word	0x200047f0
 8007774:	20004858 	.word	0x20004858
 8007778:	200048c0 	.word	0x200048c0

0800777c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007784:	f000 fda8 	bl	80082d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007788:	4b2a      	ldr	r3, [pc, #168]	@ (8007834 <prvAddNewTaskToReadyList+0xb8>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3301      	adds	r3, #1
 800778e:	4a29      	ldr	r2, [pc, #164]	@ (8007834 <prvAddNewTaskToReadyList+0xb8>)
 8007790:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007792:	4b29      	ldr	r3, [pc, #164]	@ (8007838 <prvAddNewTaskToReadyList+0xbc>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d109      	bne.n	80077ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800779a:	4a27      	ldr	r2, [pc, #156]	@ (8007838 <prvAddNewTaskToReadyList+0xbc>)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077a0:	4b24      	ldr	r3, [pc, #144]	@ (8007834 <prvAddNewTaskToReadyList+0xb8>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d110      	bne.n	80077ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077a8:	f000 fb38 	bl	8007e1c <prvInitialiseTaskLists>
 80077ac:	e00d      	b.n	80077ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077ae:	4b23      	ldr	r3, [pc, #140]	@ (800783c <prvAddNewTaskToReadyList+0xc0>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d109      	bne.n	80077ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077b6:	4b20      	ldr	r3, [pc, #128]	@ (8007838 <prvAddNewTaskToReadyList+0xbc>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d802      	bhi.n	80077ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80077c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007838 <prvAddNewTaskToReadyList+0xbc>)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80077ca:	4b1d      	ldr	r3, [pc, #116]	@ (8007840 <prvAddNewTaskToReadyList+0xc4>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3301      	adds	r3, #1
 80077d0:	4a1b      	ldr	r2, [pc, #108]	@ (8007840 <prvAddNewTaskToReadyList+0xc4>)
 80077d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d8:	2201      	movs	r2, #1
 80077da:	409a      	lsls	r2, r3
 80077dc:	4b19      	ldr	r3, [pc, #100]	@ (8007844 <prvAddNewTaskToReadyList+0xc8>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	4a18      	ldr	r2, [pc, #96]	@ (8007844 <prvAddNewTaskToReadyList+0xc8>)
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ea:	4613      	mov	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4a15      	ldr	r2, [pc, #84]	@ (8007848 <prvAddNewTaskToReadyList+0xcc>)
 80077f4:	441a      	add	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	3304      	adds	r3, #4
 80077fa:	4619      	mov	r1, r3
 80077fc:	4610      	mov	r0, r2
 80077fe:	f7ff fdf1 	bl	80073e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007802:	f000 fd9b 	bl	800833c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007806:	4b0d      	ldr	r3, [pc, #52]	@ (800783c <prvAddNewTaskToReadyList+0xc0>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00e      	beq.n	800782c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800780e:	4b0a      	ldr	r3, [pc, #40]	@ (8007838 <prvAddNewTaskToReadyList+0xbc>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007818:	429a      	cmp	r2, r3
 800781a:	d207      	bcs.n	800782c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800781c:	4b0b      	ldr	r3, [pc, #44]	@ (800784c <prvAddNewTaskToReadyList+0xd0>)
 800781e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800782c:	bf00      	nop
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	2000079c 	.word	0x2000079c
 8007838:	2000069c 	.word	0x2000069c
 800783c:	200007a8 	.word	0x200007a8
 8007840:	200007b8 	.word	0x200007b8
 8007844:	200007a4 	.word	0x200007a4
 8007848:	200006a0 	.word	0x200006a0
 800784c:	e000ed04 	.word	0xe000ed04

08007850 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007858:	2300      	movs	r3, #0
 800785a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d018      	beq.n	8007894 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007862:	4b14      	ldr	r3, [pc, #80]	@ (80078b4 <vTaskDelay+0x64>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00b      	beq.n	8007882 <vTaskDelay+0x32>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	60bb      	str	r3, [r7, #8]
}
 800787c:	bf00      	nop
 800787e:	bf00      	nop
 8007880:	e7fd      	b.n	800787e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007882:	f000 f885 	bl	8007990 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007886:	2100      	movs	r1, #0
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fb8b 	bl	8007fa4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800788e:	f000 f88d 	bl	80079ac <xTaskResumeAll>
 8007892:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d107      	bne.n	80078aa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800789a:	4b07      	ldr	r3, [pc, #28]	@ (80078b8 <vTaskDelay+0x68>)
 800789c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078aa:	bf00      	nop
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	200007c4 	.word	0x200007c4
 80078b8:	e000ed04 	.word	0xe000ed04

080078bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08a      	sub	sp, #40	@ 0x28
 80078c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078c2:	2300      	movs	r3, #0
 80078c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078ca:	463a      	mov	r2, r7
 80078cc:	1d39      	adds	r1, r7, #4
 80078ce:	f107 0308 	add.w	r3, r7, #8
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7f9 fafe 	bl	8000ed4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	9202      	str	r2, [sp, #8]
 80078e0:	9301      	str	r3, [sp, #4]
 80078e2:	2300      	movs	r3, #0
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	2300      	movs	r3, #0
 80078e8:	460a      	mov	r2, r1
 80078ea:	4921      	ldr	r1, [pc, #132]	@ (8007970 <vTaskStartScheduler+0xb4>)
 80078ec:	4821      	ldr	r0, [pc, #132]	@ (8007974 <vTaskStartScheduler+0xb8>)
 80078ee:	f7ff fe00 	bl	80074f2 <xTaskCreateStatic>
 80078f2:	4603      	mov	r3, r0
 80078f4:	4a20      	ldr	r2, [pc, #128]	@ (8007978 <vTaskStartScheduler+0xbc>)
 80078f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80078f8:	4b1f      	ldr	r3, [pc, #124]	@ (8007978 <vTaskStartScheduler+0xbc>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007900:	2301      	movs	r3, #1
 8007902:	617b      	str	r3, [r7, #20]
 8007904:	e001      	b.n	800790a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007906:	2300      	movs	r3, #0
 8007908:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d11b      	bne.n	8007948 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	613b      	str	r3, [r7, #16]
}
 8007922:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007924:	4b15      	ldr	r3, [pc, #84]	@ (800797c <vTaskStartScheduler+0xc0>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	334c      	adds	r3, #76	@ 0x4c
 800792a:	4a15      	ldr	r2, [pc, #84]	@ (8007980 <vTaskStartScheduler+0xc4>)
 800792c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800792e:	4b15      	ldr	r3, [pc, #84]	@ (8007984 <vTaskStartScheduler+0xc8>)
 8007930:	f04f 32ff 	mov.w	r2, #4294967295
 8007934:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007936:	4b14      	ldr	r3, [pc, #80]	@ (8007988 <vTaskStartScheduler+0xcc>)
 8007938:	2201      	movs	r2, #1
 800793a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800793c:	4b13      	ldr	r3, [pc, #76]	@ (800798c <vTaskStartScheduler+0xd0>)
 800793e:	2200      	movs	r2, #0
 8007940:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007942:	f000 fc25 	bl	8008190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007946:	e00f      	b.n	8007968 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794e:	d10b      	bne.n	8007968 <vTaskStartScheduler+0xac>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	60fb      	str	r3, [r7, #12]
}
 8007962:	bf00      	nop
 8007964:	bf00      	nop
 8007966:	e7fd      	b.n	8007964 <vTaskStartScheduler+0xa8>
}
 8007968:	bf00      	nop
 800796a:	3718      	adds	r7, #24
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	0800b674 	.word	0x0800b674
 8007974:	08007ded 	.word	0x08007ded
 8007978:	200007c0 	.word	0x200007c0
 800797c:	2000069c 	.word	0x2000069c
 8007980:	20000074 	.word	0x20000074
 8007984:	200007bc 	.word	0x200007bc
 8007988:	200007a8 	.word	0x200007a8
 800798c:	200007a0 	.word	0x200007a0

08007990 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007990:	b480      	push	{r7}
 8007992:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007994:	4b04      	ldr	r3, [pc, #16]	@ (80079a8 <vTaskSuspendAll+0x18>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3301      	adds	r3, #1
 800799a:	4a03      	ldr	r2, [pc, #12]	@ (80079a8 <vTaskSuspendAll+0x18>)
 800799c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800799e:	bf00      	nop
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	200007c4 	.word	0x200007c4

080079ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079b2:	2300      	movs	r3, #0
 80079b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079b6:	2300      	movs	r3, #0
 80079b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079ba:	4b42      	ldr	r3, [pc, #264]	@ (8007ac4 <xTaskResumeAll+0x118>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10b      	bne.n	80079da <xTaskResumeAll+0x2e>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	603b      	str	r3, [r7, #0]
}
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop
 80079d8:	e7fd      	b.n	80079d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079da:	f000 fc7d 	bl	80082d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079de:	4b39      	ldr	r3, [pc, #228]	@ (8007ac4 <xTaskResumeAll+0x118>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3b01      	subs	r3, #1
 80079e4:	4a37      	ldr	r2, [pc, #220]	@ (8007ac4 <xTaskResumeAll+0x118>)
 80079e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079e8:	4b36      	ldr	r3, [pc, #216]	@ (8007ac4 <xTaskResumeAll+0x118>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d161      	bne.n	8007ab4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079f0:	4b35      	ldr	r3, [pc, #212]	@ (8007ac8 <xTaskResumeAll+0x11c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d05d      	beq.n	8007ab4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079f8:	e02e      	b.n	8007a58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079fa:	4b34      	ldr	r3, [pc, #208]	@ (8007acc <xTaskResumeAll+0x120>)
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3318      	adds	r3, #24
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff fd49 	bl	800749e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff fd44 	bl	800749e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	409a      	lsls	r2, r3
 8007a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8007ad0 <xTaskResumeAll+0x124>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	4a2a      	ldr	r2, [pc, #168]	@ (8007ad0 <xTaskResumeAll+0x124>)
 8007a26:	6013      	str	r3, [r2, #0]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	4a27      	ldr	r2, [pc, #156]	@ (8007ad4 <xTaskResumeAll+0x128>)
 8007a36:	441a      	add	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	3304      	adds	r3, #4
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	4610      	mov	r0, r2
 8007a40:	f7ff fcd0 	bl	80073e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a48:	4b23      	ldr	r3, [pc, #140]	@ (8007ad8 <xTaskResumeAll+0x12c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d302      	bcc.n	8007a58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007a52:	4b22      	ldr	r3, [pc, #136]	@ (8007adc <xTaskResumeAll+0x130>)
 8007a54:	2201      	movs	r2, #1
 8007a56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a58:	4b1c      	ldr	r3, [pc, #112]	@ (8007acc <xTaskResumeAll+0x120>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1cc      	bne.n	80079fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a66:	f000 fa7d 	bl	8007f64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8007ae0 <xTaskResumeAll+0x134>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d010      	beq.n	8007a98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a76:	f000 f837 	bl	8007ae8 <xTaskIncrementTick>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d002      	beq.n	8007a86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007a80:	4b16      	ldr	r3, [pc, #88]	@ (8007adc <xTaskResumeAll+0x130>)
 8007a82:	2201      	movs	r2, #1
 8007a84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1f1      	bne.n	8007a76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007a92:	4b13      	ldr	r3, [pc, #76]	@ (8007ae0 <xTaskResumeAll+0x134>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a98:	4b10      	ldr	r3, [pc, #64]	@ (8007adc <xTaskResumeAll+0x130>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d009      	beq.n	8007ab4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8007ae4 <xTaskResumeAll+0x138>)
 8007aa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ab4:	f000 fc42 	bl	800833c <vPortExitCritical>

	return xAlreadyYielded;
 8007ab8:	68bb      	ldr	r3, [r7, #8]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	200007c4 	.word	0x200007c4
 8007ac8:	2000079c 	.word	0x2000079c
 8007acc:	2000075c 	.word	0x2000075c
 8007ad0:	200007a4 	.word	0x200007a4
 8007ad4:	200006a0 	.word	0x200006a0
 8007ad8:	2000069c 	.word	0x2000069c
 8007adc:	200007b0 	.word	0x200007b0
 8007ae0:	200007ac 	.word	0x200007ac
 8007ae4:	e000ed04 	.word	0xe000ed04

08007ae8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007aee:	2300      	movs	r3, #0
 8007af0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007af2:	4b4f      	ldr	r3, [pc, #316]	@ (8007c30 <xTaskIncrementTick+0x148>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f040 808f 	bne.w	8007c1a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007afc:	4b4d      	ldr	r3, [pc, #308]	@ (8007c34 <xTaskIncrementTick+0x14c>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3301      	adds	r3, #1
 8007b02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b04:	4a4b      	ldr	r2, [pc, #300]	@ (8007c34 <xTaskIncrementTick+0x14c>)
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d121      	bne.n	8007b54 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b10:	4b49      	ldr	r3, [pc, #292]	@ (8007c38 <xTaskIncrementTick+0x150>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00b      	beq.n	8007b32 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	603b      	str	r3, [r7, #0]
}
 8007b2c:	bf00      	nop
 8007b2e:	bf00      	nop
 8007b30:	e7fd      	b.n	8007b2e <xTaskIncrementTick+0x46>
 8007b32:	4b41      	ldr	r3, [pc, #260]	@ (8007c38 <xTaskIncrementTick+0x150>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	60fb      	str	r3, [r7, #12]
 8007b38:	4b40      	ldr	r3, [pc, #256]	@ (8007c3c <xTaskIncrementTick+0x154>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a3e      	ldr	r2, [pc, #248]	@ (8007c38 <xTaskIncrementTick+0x150>)
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	4a3e      	ldr	r2, [pc, #248]	@ (8007c3c <xTaskIncrementTick+0x154>)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	4b3e      	ldr	r3, [pc, #248]	@ (8007c40 <xTaskIncrementTick+0x158>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	4a3c      	ldr	r2, [pc, #240]	@ (8007c40 <xTaskIncrementTick+0x158>)
 8007b4e:	6013      	str	r3, [r2, #0]
 8007b50:	f000 fa08 	bl	8007f64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b54:	4b3b      	ldr	r3, [pc, #236]	@ (8007c44 <xTaskIncrementTick+0x15c>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d348      	bcc.n	8007bf0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b5e:	4b36      	ldr	r3, [pc, #216]	@ (8007c38 <xTaskIncrementTick+0x150>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d104      	bne.n	8007b72 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b68:	4b36      	ldr	r3, [pc, #216]	@ (8007c44 <xTaskIncrementTick+0x15c>)
 8007b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b6e:	601a      	str	r2, [r3, #0]
					break;
 8007b70:	e03e      	b.n	8007bf0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b72:	4b31      	ldr	r3, [pc, #196]	@ (8007c38 <xTaskIncrementTick+0x150>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d203      	bcs.n	8007b92 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b8a:	4a2e      	ldr	r2, [pc, #184]	@ (8007c44 <xTaskIncrementTick+0x15c>)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b90:	e02e      	b.n	8007bf0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	3304      	adds	r3, #4
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7ff fc81 	bl	800749e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d004      	beq.n	8007bae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	3318      	adds	r3, #24
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7ff fc78 	bl	800749e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	409a      	lsls	r2, r3
 8007bb6:	4b24      	ldr	r3, [pc, #144]	@ (8007c48 <xTaskIncrementTick+0x160>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	4a22      	ldr	r2, [pc, #136]	@ (8007c48 <xTaskIncrementTick+0x160>)
 8007bbe:	6013      	str	r3, [r2, #0]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8007c4c <xTaskIncrementTick+0x164>)
 8007bce:	441a      	add	r2, r3
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	f7ff fc04 	bl	80073e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007be0:	4b1b      	ldr	r3, [pc, #108]	@ (8007c50 <xTaskIncrementTick+0x168>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d3b9      	bcc.n	8007b5e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007bea:	2301      	movs	r3, #1
 8007bec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bee:	e7b6      	b.n	8007b5e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007bf0:	4b17      	ldr	r3, [pc, #92]	@ (8007c50 <xTaskIncrementTick+0x168>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bf6:	4915      	ldr	r1, [pc, #84]	@ (8007c4c <xTaskIncrementTick+0x164>)
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	440b      	add	r3, r1
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d901      	bls.n	8007c0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c0c:	4b11      	ldr	r3, [pc, #68]	@ (8007c54 <xTaskIncrementTick+0x16c>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d007      	beq.n	8007c24 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007c14:	2301      	movs	r3, #1
 8007c16:	617b      	str	r3, [r7, #20]
 8007c18:	e004      	b.n	8007c24 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8007c58 <xTaskIncrementTick+0x170>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	4a0d      	ldr	r2, [pc, #52]	@ (8007c58 <xTaskIncrementTick+0x170>)
 8007c22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c24:	697b      	ldr	r3, [r7, #20]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3718      	adds	r7, #24
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	200007c4 	.word	0x200007c4
 8007c34:	200007a0 	.word	0x200007a0
 8007c38:	20000754 	.word	0x20000754
 8007c3c:	20000758 	.word	0x20000758
 8007c40:	200007b4 	.word	0x200007b4
 8007c44:	200007bc 	.word	0x200007bc
 8007c48:	200007a4 	.word	0x200007a4
 8007c4c:	200006a0 	.word	0x200006a0
 8007c50:	2000069c 	.word	0x2000069c
 8007c54:	200007b0 	.word	0x200007b0
 8007c58:	200007ac 	.word	0x200007ac

08007c5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c62:	4b2a      	ldr	r3, [pc, #168]	@ (8007d0c <vTaskSwitchContext+0xb0>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c6a:	4b29      	ldr	r3, [pc, #164]	@ (8007d10 <vTaskSwitchContext+0xb4>)
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c70:	e045      	b.n	8007cfe <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007c72:	4b27      	ldr	r3, [pc, #156]	@ (8007d10 <vTaskSwitchContext+0xb4>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c78:	4b26      	ldr	r3, [pc, #152]	@ (8007d14 <vTaskSwitchContext+0xb8>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	fab3 f383 	clz	r3, r3
 8007c84:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007c86:	7afb      	ldrb	r3, [r7, #11]
 8007c88:	f1c3 031f 	rsb	r3, r3, #31
 8007c8c:	617b      	str	r3, [r7, #20]
 8007c8e:	4922      	ldr	r1, [pc, #136]	@ (8007d18 <vTaskSwitchContext+0xbc>)
 8007c90:	697a      	ldr	r2, [r7, #20]
 8007c92:	4613      	mov	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4413      	add	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	440b      	add	r3, r1
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10b      	bne.n	8007cba <vTaskSwitchContext+0x5e>
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	607b      	str	r3, [r7, #4]
}
 8007cb4:	bf00      	nop
 8007cb6:	bf00      	nop
 8007cb8:	e7fd      	b.n	8007cb6 <vTaskSwitchContext+0x5a>
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	4413      	add	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4a14      	ldr	r2, [pc, #80]	@ (8007d18 <vTaskSwitchContext+0xbc>)
 8007cc6:	4413      	add	r3, r2
 8007cc8:	613b      	str	r3, [r7, #16]
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	605a      	str	r2, [r3, #4]
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	3308      	adds	r3, #8
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d104      	bne.n	8007cea <vTaskSwitchContext+0x8e>
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	685a      	ldr	r2, [r3, #4]
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	605a      	str	r2, [r3, #4]
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8007d1c <vTaskSwitchContext+0xc0>)
 8007cf2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007cf4:	4b09      	ldr	r3, [pc, #36]	@ (8007d1c <vTaskSwitchContext+0xc0>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	334c      	adds	r3, #76	@ 0x4c
 8007cfa:	4a09      	ldr	r2, [pc, #36]	@ (8007d20 <vTaskSwitchContext+0xc4>)
 8007cfc:	6013      	str	r3, [r2, #0]
}
 8007cfe:	bf00      	nop
 8007d00:	371c      	adds	r7, #28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	200007c4 	.word	0x200007c4
 8007d10:	200007b0 	.word	0x200007b0
 8007d14:	200007a4 	.word	0x200007a4
 8007d18:	200006a0 	.word	0x200006a0
 8007d1c:	2000069c 	.word	0x2000069c
 8007d20:	20000074 	.word	0x20000074

08007d24 <vTaskRemoveFromUnorderedEventList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8007dd8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10b      	bne.n	8007d4e <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8007d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3a:	f383 8811 	msr	BASEPRI, r3
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	613b      	str	r3, [r7, #16]
}
 8007d48:	bf00      	nop
 8007d4a:	bf00      	nop
 8007d4c:	e7fd      	b.n	8007d4a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10b      	bne.n	8007d7c <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	60fb      	str	r3, [r7, #12]
}
 8007d76:	bf00      	nop
 8007d78:	bf00      	nop
 8007d7a:	e7fd      	b.n	8007d78 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7ff fb8e 	bl	800749e <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	3304      	adds	r3, #4
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff fb89 	bl	800749e <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d90:	2201      	movs	r2, #1
 8007d92:	409a      	lsls	r2, r3
 8007d94:	4b11      	ldr	r3, [pc, #68]	@ (8007ddc <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	4a10      	ldr	r2, [pc, #64]	@ (8007ddc <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007d9c:	6013      	str	r3, [r2, #0]
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007da2:	4613      	mov	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4a0d      	ldr	r2, [pc, #52]	@ (8007de0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007dac:	441a      	add	r2, r3
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	3304      	adds	r3, #4
 8007db2:	4619      	mov	r1, r3
 8007db4:	4610      	mov	r0, r2
 8007db6:	f7ff fb15 	bl	80073e4 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dbe:	4b09      	ldr	r3, [pc, #36]	@ (8007de4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d902      	bls.n	8007dce <vTaskRemoveFromUnorderedEventList+0xaa>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007dc8:	4b07      	ldr	r3, [pc, #28]	@ (8007de8 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8007dca:	2201      	movs	r2, #1
 8007dcc:	601a      	str	r2, [r3, #0]
	}
}
 8007dce:	bf00      	nop
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	200007c4 	.word	0x200007c4
 8007ddc:	200007a4 	.word	0x200007a4
 8007de0:	200006a0 	.word	0x200006a0
 8007de4:	2000069c 	.word	0x2000069c
 8007de8:	200007b0 	.word	0x200007b0

08007dec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007df4:	f000 f852 	bl	8007e9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007df8:	4b06      	ldr	r3, [pc, #24]	@ (8007e14 <prvIdleTask+0x28>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d9f9      	bls.n	8007df4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e00:	4b05      	ldr	r3, [pc, #20]	@ (8007e18 <prvIdleTask+0x2c>)
 8007e02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e06:	601a      	str	r2, [r3, #0]
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e10:	e7f0      	b.n	8007df4 <prvIdleTask+0x8>
 8007e12:	bf00      	nop
 8007e14:	200006a0 	.word	0x200006a0
 8007e18:	e000ed04 	.word	0xe000ed04

08007e1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e22:	2300      	movs	r3, #0
 8007e24:	607b      	str	r3, [r7, #4]
 8007e26:	e00c      	b.n	8007e42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	4413      	add	r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4a12      	ldr	r2, [pc, #72]	@ (8007e7c <prvInitialiseTaskLists+0x60>)
 8007e34:	4413      	add	r3, r2
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7ff faa7 	bl	800738a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	607b      	str	r3, [r7, #4]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b06      	cmp	r3, #6
 8007e46:	d9ef      	bls.n	8007e28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e48:	480d      	ldr	r0, [pc, #52]	@ (8007e80 <prvInitialiseTaskLists+0x64>)
 8007e4a:	f7ff fa9e 	bl	800738a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e4e:	480d      	ldr	r0, [pc, #52]	@ (8007e84 <prvInitialiseTaskLists+0x68>)
 8007e50:	f7ff fa9b 	bl	800738a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e54:	480c      	ldr	r0, [pc, #48]	@ (8007e88 <prvInitialiseTaskLists+0x6c>)
 8007e56:	f7ff fa98 	bl	800738a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e5a:	480c      	ldr	r0, [pc, #48]	@ (8007e8c <prvInitialiseTaskLists+0x70>)
 8007e5c:	f7ff fa95 	bl	800738a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e60:	480b      	ldr	r0, [pc, #44]	@ (8007e90 <prvInitialiseTaskLists+0x74>)
 8007e62:	f7ff fa92 	bl	800738a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e66:	4b0b      	ldr	r3, [pc, #44]	@ (8007e94 <prvInitialiseTaskLists+0x78>)
 8007e68:	4a05      	ldr	r2, [pc, #20]	@ (8007e80 <prvInitialiseTaskLists+0x64>)
 8007e6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e98 <prvInitialiseTaskLists+0x7c>)
 8007e6e:	4a05      	ldr	r2, [pc, #20]	@ (8007e84 <prvInitialiseTaskLists+0x68>)
 8007e70:	601a      	str	r2, [r3, #0]
}
 8007e72:	bf00      	nop
 8007e74:	3708      	adds	r7, #8
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	200006a0 	.word	0x200006a0
 8007e80:	2000072c 	.word	0x2000072c
 8007e84:	20000740 	.word	0x20000740
 8007e88:	2000075c 	.word	0x2000075c
 8007e8c:	20000770 	.word	0x20000770
 8007e90:	20000788 	.word	0x20000788
 8007e94:	20000754 	.word	0x20000754
 8007e98:	20000758 	.word	0x20000758

08007e9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ea2:	e019      	b.n	8007ed8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ea4:	f000 fa18 	bl	80082d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ea8:	4b10      	ldr	r3, [pc, #64]	@ (8007eec <prvCheckTasksWaitingTermination+0x50>)
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7ff faf2 	bl	800749e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007eba:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef0 <prvCheckTasksWaitingTermination+0x54>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	4a0b      	ldr	r2, [pc, #44]	@ (8007ef0 <prvCheckTasksWaitingTermination+0x54>)
 8007ec2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ef4 <prvCheckTasksWaitingTermination+0x58>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	4a0a      	ldr	r2, [pc, #40]	@ (8007ef4 <prvCheckTasksWaitingTermination+0x58>)
 8007ecc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ece:	f000 fa35 	bl	800833c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f810 	bl	8007ef8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ed8:	4b06      	ldr	r3, [pc, #24]	@ (8007ef4 <prvCheckTasksWaitingTermination+0x58>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1e1      	bne.n	8007ea4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ee0:	bf00      	nop
 8007ee2:	bf00      	nop
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20000770 	.word	0x20000770
 8007ef0:	2000079c 	.word	0x2000079c
 8007ef4:	20000784 	.word	0x20000784

08007ef8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	334c      	adds	r3, #76	@ 0x4c
 8007f04:	4618      	mov	r0, r3
 8007f06:	f001 fa4f 	bl	80093a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d108      	bne.n	8007f26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f000 fb8b 	bl	8008634 <vPortFree>
				vPortFree( pxTCB );
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fb88 	bl	8008634 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f24:	e019      	b.n	8007f5a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d103      	bne.n	8007f38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fb7f 	bl	8008634 <vPortFree>
	}
 8007f36:	e010      	b.n	8007f5a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d00b      	beq.n	8007f5a <prvDeleteTCB+0x62>
	__asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	60fb      	str	r3, [r7, #12]
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop
 8007f58:	e7fd      	b.n	8007f56 <prvDeleteTCB+0x5e>
	}
 8007f5a:	bf00      	nop
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8007f9c <prvResetNextTaskUnblockTime+0x38>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d104      	bne.n	8007f7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f74:	4b0a      	ldr	r3, [pc, #40]	@ (8007fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8007f76:	f04f 32ff 	mov.w	r2, #4294967295
 8007f7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f7c:	e008      	b.n	8007f90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f7e:	4b07      	ldr	r3, [pc, #28]	@ (8007f9c <prvResetNextTaskUnblockTime+0x38>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	4a04      	ldr	r2, [pc, #16]	@ (8007fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8007f8e:	6013      	str	r3, [r2, #0]
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	20000754 	.word	0x20000754
 8007fa0:	200007bc 	.word	0x200007bc

08007fa4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007fae:	4b29      	ldr	r3, [pc, #164]	@ (8008054 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fb4:	4b28      	ldr	r3, [pc, #160]	@ (8008058 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3304      	adds	r3, #4
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7ff fa6f 	bl	800749e <uxListRemove>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10b      	bne.n	8007fde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007fc6:	4b24      	ldr	r3, [pc, #144]	@ (8008058 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fcc:	2201      	movs	r2, #1
 8007fce:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd2:	43da      	mvns	r2, r3
 8007fd4:	4b21      	ldr	r3, [pc, #132]	@ (800805c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4013      	ands	r3, r2
 8007fda:	4a20      	ldr	r2, [pc, #128]	@ (800805c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007fdc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe4:	d10a      	bne.n	8007ffc <prvAddCurrentTaskToDelayedList+0x58>
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d007      	beq.n	8007ffc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fec:	4b1a      	ldr	r3, [pc, #104]	@ (8008058 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	481a      	ldr	r0, [pc, #104]	@ (8008060 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007ff6:	f7ff f9f5 	bl	80073e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ffa:	e026      	b.n	800804a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4413      	add	r3, r2
 8008002:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008004:	4b14      	ldr	r3, [pc, #80]	@ (8008058 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	429a      	cmp	r2, r3
 8008012:	d209      	bcs.n	8008028 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008014:	4b13      	ldr	r3, [pc, #76]	@ (8008064 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	4b0f      	ldr	r3, [pc, #60]	@ (8008058 <prvAddCurrentTaskToDelayedList+0xb4>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	3304      	adds	r3, #4
 800801e:	4619      	mov	r1, r3
 8008020:	4610      	mov	r0, r2
 8008022:	f7ff fa03 	bl	800742c <vListInsert>
}
 8008026:	e010      	b.n	800804a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008028:	4b0f      	ldr	r3, [pc, #60]	@ (8008068 <prvAddCurrentTaskToDelayedList+0xc4>)
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	4b0a      	ldr	r3, [pc, #40]	@ (8008058 <prvAddCurrentTaskToDelayedList+0xb4>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	3304      	adds	r3, #4
 8008032:	4619      	mov	r1, r3
 8008034:	4610      	mov	r0, r2
 8008036:	f7ff f9f9 	bl	800742c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800803a:	4b0c      	ldr	r3, [pc, #48]	@ (800806c <prvAddCurrentTaskToDelayedList+0xc8>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	429a      	cmp	r2, r3
 8008042:	d202      	bcs.n	800804a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008044:	4a09      	ldr	r2, [pc, #36]	@ (800806c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	6013      	str	r3, [r2, #0]
}
 800804a:	bf00      	nop
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	200007a0 	.word	0x200007a0
 8008058:	2000069c 	.word	0x2000069c
 800805c:	200007a4 	.word	0x200007a4
 8008060:	20000788 	.word	0x20000788
 8008064:	20000758 	.word	0x20000758
 8008068:	20000754 	.word	0x20000754
 800806c:	200007bc 	.word	0x200007bc

08008070 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	3b04      	subs	r3, #4
 8008080:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008088:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	3b04      	subs	r3, #4
 800808e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	f023 0201 	bic.w	r2, r3, #1
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3b04      	subs	r3, #4
 800809e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080a0:	4a0c      	ldr	r2, [pc, #48]	@ (80080d4 <pxPortInitialiseStack+0x64>)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	3b14      	subs	r3, #20
 80080aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3b04      	subs	r3, #4
 80080b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f06f 0202 	mvn.w	r2, #2
 80080be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	3b20      	subs	r3, #32
 80080c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080c6:	68fb      	ldr	r3, [r7, #12]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	080080d9 	.word	0x080080d9

080080d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80080de:	2300      	movs	r3, #0
 80080e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80080e2:	4b13      	ldr	r3, [pc, #76]	@ (8008130 <prvTaskExitError+0x58>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ea:	d00b      	beq.n	8008104 <prvTaskExitError+0x2c>
	__asm volatile
 80080ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	60fb      	str	r3, [r7, #12]
}
 80080fe:	bf00      	nop
 8008100:	bf00      	nop
 8008102:	e7fd      	b.n	8008100 <prvTaskExitError+0x28>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	60bb      	str	r3, [r7, #8]
}
 8008116:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008118:	bf00      	nop
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d0fc      	beq.n	800811a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008120:	bf00      	nop
 8008122:	bf00      	nop
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	20000064 	.word	0x20000064
	...

08008140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008140:	4b07      	ldr	r3, [pc, #28]	@ (8008160 <pxCurrentTCBConst2>)
 8008142:	6819      	ldr	r1, [r3, #0]
 8008144:	6808      	ldr	r0, [r1, #0]
 8008146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800814a:	f380 8809 	msr	PSP, r0
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f04f 0000 	mov.w	r0, #0
 8008156:	f380 8811 	msr	BASEPRI, r0
 800815a:	4770      	bx	lr
 800815c:	f3af 8000 	nop.w

08008160 <pxCurrentTCBConst2>:
 8008160:	2000069c 	.word	0x2000069c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008164:	bf00      	nop
 8008166:	bf00      	nop

08008168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008168:	4808      	ldr	r0, [pc, #32]	@ (800818c <prvPortStartFirstTask+0x24>)
 800816a:	6800      	ldr	r0, [r0, #0]
 800816c:	6800      	ldr	r0, [r0, #0]
 800816e:	f380 8808 	msr	MSP, r0
 8008172:	f04f 0000 	mov.w	r0, #0
 8008176:	f380 8814 	msr	CONTROL, r0
 800817a:	b662      	cpsie	i
 800817c:	b661      	cpsie	f
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	df00      	svc	0
 8008188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800818a:	bf00      	nop
 800818c:	e000ed08 	.word	0xe000ed08

08008190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008196:	4b47      	ldr	r3, [pc, #284]	@ (80082b4 <xPortStartScheduler+0x124>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a47      	ldr	r2, [pc, #284]	@ (80082b8 <xPortStartScheduler+0x128>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d10b      	bne.n	80081b8 <xPortStartScheduler+0x28>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	60fb      	str	r3, [r7, #12]
}
 80081b2:	bf00      	nop
 80081b4:	bf00      	nop
 80081b6:	e7fd      	b.n	80081b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80081b8:	4b3e      	ldr	r3, [pc, #248]	@ (80082b4 <xPortStartScheduler+0x124>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a3f      	ldr	r2, [pc, #252]	@ (80082bc <xPortStartScheduler+0x12c>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d10b      	bne.n	80081da <xPortStartScheduler+0x4a>
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	613b      	str	r3, [r7, #16]
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop
 80081d8:	e7fd      	b.n	80081d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081da:	4b39      	ldr	r3, [pc, #228]	@ (80082c0 <xPortStartScheduler+0x130>)
 80081dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	22ff      	movs	r2, #255	@ 0xff
 80081ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80081f4:	78fb      	ldrb	r3, [r7, #3]
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	4b31      	ldr	r3, [pc, #196]	@ (80082c4 <xPortStartScheduler+0x134>)
 8008200:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008202:	4b31      	ldr	r3, [pc, #196]	@ (80082c8 <xPortStartScheduler+0x138>)
 8008204:	2207      	movs	r2, #7
 8008206:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008208:	e009      	b.n	800821e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800820a:	4b2f      	ldr	r3, [pc, #188]	@ (80082c8 <xPortStartScheduler+0x138>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3b01      	subs	r3, #1
 8008210:	4a2d      	ldr	r2, [pc, #180]	@ (80082c8 <xPortStartScheduler+0x138>)
 8008212:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008214:	78fb      	ldrb	r3, [r7, #3]
 8008216:	b2db      	uxtb	r3, r3
 8008218:	005b      	lsls	r3, r3, #1
 800821a:	b2db      	uxtb	r3, r3
 800821c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800821e:	78fb      	ldrb	r3, [r7, #3]
 8008220:	b2db      	uxtb	r3, r3
 8008222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008226:	2b80      	cmp	r3, #128	@ 0x80
 8008228:	d0ef      	beq.n	800820a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800822a:	4b27      	ldr	r3, [pc, #156]	@ (80082c8 <xPortStartScheduler+0x138>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f1c3 0307 	rsb	r3, r3, #7
 8008232:	2b04      	cmp	r3, #4
 8008234:	d00b      	beq.n	800824e <xPortStartScheduler+0xbe>
	__asm volatile
 8008236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800823a:	f383 8811 	msr	BASEPRI, r3
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	f3bf 8f4f 	dsb	sy
 8008246:	60bb      	str	r3, [r7, #8]
}
 8008248:	bf00      	nop
 800824a:	bf00      	nop
 800824c:	e7fd      	b.n	800824a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800824e:	4b1e      	ldr	r3, [pc, #120]	@ (80082c8 <xPortStartScheduler+0x138>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	021b      	lsls	r3, r3, #8
 8008254:	4a1c      	ldr	r2, [pc, #112]	@ (80082c8 <xPortStartScheduler+0x138>)
 8008256:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008258:	4b1b      	ldr	r3, [pc, #108]	@ (80082c8 <xPortStartScheduler+0x138>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008260:	4a19      	ldr	r2, [pc, #100]	@ (80082c8 <xPortStartScheduler+0x138>)
 8008262:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	b2da      	uxtb	r2, r3
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800826c:	4b17      	ldr	r3, [pc, #92]	@ (80082cc <xPortStartScheduler+0x13c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a16      	ldr	r2, [pc, #88]	@ (80082cc <xPortStartScheduler+0x13c>)
 8008272:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008276:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008278:	4b14      	ldr	r3, [pc, #80]	@ (80082cc <xPortStartScheduler+0x13c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a13      	ldr	r2, [pc, #76]	@ (80082cc <xPortStartScheduler+0x13c>)
 800827e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008282:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008284:	f000 f8da 	bl	800843c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008288:	4b11      	ldr	r3, [pc, #68]	@ (80082d0 <xPortStartScheduler+0x140>)
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800828e:	f000 f8f9 	bl	8008484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008292:	4b10      	ldr	r3, [pc, #64]	@ (80082d4 <xPortStartScheduler+0x144>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a0f      	ldr	r2, [pc, #60]	@ (80082d4 <xPortStartScheduler+0x144>)
 8008298:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800829c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800829e:	f7ff ff63 	bl	8008168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082a2:	f7ff fcdb 	bl	8007c5c <vTaskSwitchContext>
	prvTaskExitError();
 80082a6:	f7ff ff17 	bl	80080d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3718      	adds	r7, #24
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	e000ed00 	.word	0xe000ed00
 80082b8:	410fc271 	.word	0x410fc271
 80082bc:	410fc270 	.word	0x410fc270
 80082c0:	e000e400 	.word	0xe000e400
 80082c4:	200007c8 	.word	0x200007c8
 80082c8:	200007cc 	.word	0x200007cc
 80082cc:	e000ed20 	.word	0xe000ed20
 80082d0:	20000064 	.word	0x20000064
 80082d4:	e000ef34 	.word	0xe000ef34

080082d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
	__asm volatile
 80082de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	607b      	str	r3, [r7, #4]
}
 80082f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082f2:	4b10      	ldr	r3, [pc, #64]	@ (8008334 <vPortEnterCritical+0x5c>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	3301      	adds	r3, #1
 80082f8:	4a0e      	ldr	r2, [pc, #56]	@ (8008334 <vPortEnterCritical+0x5c>)
 80082fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80082fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008334 <vPortEnterCritical+0x5c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d110      	bne.n	8008326 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008304:	4b0c      	ldr	r3, [pc, #48]	@ (8008338 <vPortEnterCritical+0x60>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	b2db      	uxtb	r3, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00b      	beq.n	8008326 <vPortEnterCritical+0x4e>
	__asm volatile
 800830e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008312:	f383 8811 	msr	BASEPRI, r3
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	603b      	str	r3, [r7, #0]
}
 8008320:	bf00      	nop
 8008322:	bf00      	nop
 8008324:	e7fd      	b.n	8008322 <vPortEnterCritical+0x4a>
	}
}
 8008326:	bf00      	nop
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	20000064 	.word	0x20000064
 8008338:	e000ed04 	.word	0xe000ed04

0800833c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008342:	4b12      	ldr	r3, [pc, #72]	@ (800838c <vPortExitCritical+0x50>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d10b      	bne.n	8008362 <vPortExitCritical+0x26>
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	607b      	str	r3, [r7, #4]
}
 800835c:	bf00      	nop
 800835e:	bf00      	nop
 8008360:	e7fd      	b.n	800835e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008362:	4b0a      	ldr	r3, [pc, #40]	@ (800838c <vPortExitCritical+0x50>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	3b01      	subs	r3, #1
 8008368:	4a08      	ldr	r2, [pc, #32]	@ (800838c <vPortExitCritical+0x50>)
 800836a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800836c:	4b07      	ldr	r3, [pc, #28]	@ (800838c <vPortExitCritical+0x50>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d105      	bne.n	8008380 <vPortExitCritical+0x44>
 8008374:	2300      	movs	r3, #0
 8008376:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800837e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	20000064 	.word	0x20000064

08008390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008390:	f3ef 8009 	mrs	r0, PSP
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	4b15      	ldr	r3, [pc, #84]	@ (80083f0 <pxCurrentTCBConst>)
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	f01e 0f10 	tst.w	lr, #16
 80083a0:	bf08      	it	eq
 80083a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083aa:	6010      	str	r0, [r2, #0]
 80083ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80083b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80083b4:	f380 8811 	msr	BASEPRI, r0
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f7ff fc4c 	bl	8007c5c <vTaskSwitchContext>
 80083c4:	f04f 0000 	mov.w	r0, #0
 80083c8:	f380 8811 	msr	BASEPRI, r0
 80083cc:	bc09      	pop	{r0, r3}
 80083ce:	6819      	ldr	r1, [r3, #0]
 80083d0:	6808      	ldr	r0, [r1, #0]
 80083d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d6:	f01e 0f10 	tst.w	lr, #16
 80083da:	bf08      	it	eq
 80083dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80083e0:	f380 8809 	msr	PSP, r0
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	f3af 8000 	nop.w

080083f0 <pxCurrentTCBConst>:
 80083f0:	2000069c 	.word	0x2000069c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80083f4:	bf00      	nop
 80083f6:	bf00      	nop

080083f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
	__asm volatile
 80083fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	607b      	str	r3, [r7, #4]
}
 8008410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008412:	f7ff fb69 	bl	8007ae8 <xTaskIncrementTick>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d003      	beq.n	8008424 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800841c:	4b06      	ldr	r3, [pc, #24]	@ (8008438 <SysTick_Handler+0x40>)
 800841e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	2300      	movs	r3, #0
 8008426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	f383 8811 	msr	BASEPRI, r3
}
 800842e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008430:	bf00      	nop
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	e000ed04 	.word	0xe000ed04

0800843c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800843c:	b480      	push	{r7}
 800843e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008440:	4b0b      	ldr	r3, [pc, #44]	@ (8008470 <vPortSetupTimerInterrupt+0x34>)
 8008442:	2200      	movs	r2, #0
 8008444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008446:	4b0b      	ldr	r3, [pc, #44]	@ (8008474 <vPortSetupTimerInterrupt+0x38>)
 8008448:	2200      	movs	r2, #0
 800844a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800844c:	4b0a      	ldr	r3, [pc, #40]	@ (8008478 <vPortSetupTimerInterrupt+0x3c>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a0a      	ldr	r2, [pc, #40]	@ (800847c <vPortSetupTimerInterrupt+0x40>)
 8008452:	fba2 2303 	umull	r2, r3, r2, r3
 8008456:	099b      	lsrs	r3, r3, #6
 8008458:	4a09      	ldr	r2, [pc, #36]	@ (8008480 <vPortSetupTimerInterrupt+0x44>)
 800845a:	3b01      	subs	r3, #1
 800845c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800845e:	4b04      	ldr	r3, [pc, #16]	@ (8008470 <vPortSetupTimerInterrupt+0x34>)
 8008460:	2207      	movs	r2, #7
 8008462:	601a      	str	r2, [r3, #0]
}
 8008464:	bf00      	nop
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	e000e010 	.word	0xe000e010
 8008474:	e000e018 	.word	0xe000e018
 8008478:	20000058 	.word	0x20000058
 800847c:	10624dd3 	.word	0x10624dd3
 8008480:	e000e014 	.word	0xe000e014

08008484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008484:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008494 <vPortEnableVFP+0x10>
 8008488:	6801      	ldr	r1, [r0, #0]
 800848a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800848e:	6001      	str	r1, [r0, #0]
 8008490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008492:	bf00      	nop
 8008494:	e000ed88 	.word	0xe000ed88

08008498 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08a      	sub	sp, #40	@ 0x28
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084a0:	2300      	movs	r3, #0
 80084a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084a4:	f7ff fa74 	bl	8007990 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084a8:	4b5c      	ldr	r3, [pc, #368]	@ (800861c <pvPortMalloc+0x184>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084b0:	f000 f924 	bl	80086fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084b4:	4b5a      	ldr	r3, [pc, #360]	@ (8008620 <pvPortMalloc+0x188>)
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4013      	ands	r3, r2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f040 8095 	bne.w	80085ec <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d01e      	beq.n	8008506 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80084c8:	2208      	movs	r2, #8
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4413      	add	r3, r2
 80084ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f003 0307 	and.w	r3, r3, #7
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d015      	beq.n	8008506 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f023 0307 	bic.w	r3, r3, #7
 80084e0:	3308      	adds	r3, #8
 80084e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f003 0307 	and.w	r3, r3, #7
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00b      	beq.n	8008506 <pvPortMalloc+0x6e>
	__asm volatile
 80084ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	617b      	str	r3, [r7, #20]
}
 8008500:	bf00      	nop
 8008502:	bf00      	nop
 8008504:	e7fd      	b.n	8008502 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d06f      	beq.n	80085ec <pvPortMalloc+0x154>
 800850c:	4b45      	ldr	r3, [pc, #276]	@ (8008624 <pvPortMalloc+0x18c>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	429a      	cmp	r2, r3
 8008514:	d86a      	bhi.n	80085ec <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008516:	4b44      	ldr	r3, [pc, #272]	@ (8008628 <pvPortMalloc+0x190>)
 8008518:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800851a:	4b43      	ldr	r3, [pc, #268]	@ (8008628 <pvPortMalloc+0x190>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008520:	e004      	b.n	800852c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008524:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800852c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	429a      	cmp	r2, r3
 8008534:	d903      	bls.n	800853e <pvPortMalloc+0xa6>
 8008536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1f1      	bne.n	8008522 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800853e:	4b37      	ldr	r3, [pc, #220]	@ (800861c <pvPortMalloc+0x184>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008544:	429a      	cmp	r2, r3
 8008546:	d051      	beq.n	80085ec <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2208      	movs	r2, #8
 800854e:	4413      	add	r3, r2
 8008550:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800855a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	1ad2      	subs	r2, r2, r3
 8008562:	2308      	movs	r3, #8
 8008564:	005b      	lsls	r3, r3, #1
 8008566:	429a      	cmp	r2, r3
 8008568:	d920      	bls.n	80085ac <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800856a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4413      	add	r3, r2
 8008570:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	f003 0307 	and.w	r3, r3, #7
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00b      	beq.n	8008594 <pvPortMalloc+0xfc>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	613b      	str	r3, [r7, #16]
}
 800858e:	bf00      	nop
 8008590:	bf00      	nop
 8008592:	e7fd      	b.n	8008590 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	1ad2      	subs	r2, r2, r3
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085a6:	69b8      	ldr	r0, [r7, #24]
 80085a8:	f000 f90a 	bl	80087c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085ac:	4b1d      	ldr	r3, [pc, #116]	@ (8008624 <pvPortMalloc+0x18c>)
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	4a1b      	ldr	r2, [pc, #108]	@ (8008624 <pvPortMalloc+0x18c>)
 80085b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085ba:	4b1a      	ldr	r3, [pc, #104]	@ (8008624 <pvPortMalloc+0x18c>)
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	4b1b      	ldr	r3, [pc, #108]	@ (800862c <pvPortMalloc+0x194>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d203      	bcs.n	80085ce <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085c6:	4b17      	ldr	r3, [pc, #92]	@ (8008624 <pvPortMalloc+0x18c>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a18      	ldr	r2, [pc, #96]	@ (800862c <pvPortMalloc+0x194>)
 80085cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	4b13      	ldr	r3, [pc, #76]	@ (8008620 <pvPortMalloc+0x188>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	431a      	orrs	r2, r3
 80085d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085de:	2200      	movs	r2, #0
 80085e0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80085e2:	4b13      	ldr	r3, [pc, #76]	@ (8008630 <pvPortMalloc+0x198>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3301      	adds	r3, #1
 80085e8:	4a11      	ldr	r2, [pc, #68]	@ (8008630 <pvPortMalloc+0x198>)
 80085ea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085ec:	f7ff f9de 	bl	80079ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	f003 0307 	and.w	r3, r3, #7
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00b      	beq.n	8008612 <pvPortMalloc+0x17a>
	__asm volatile
 80085fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085fe:	f383 8811 	msr	BASEPRI, r3
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	60fb      	str	r3, [r7, #12]
}
 800860c:	bf00      	nop
 800860e:	bf00      	nop
 8008610:	e7fd      	b.n	800860e <pvPortMalloc+0x176>
	return pvReturn;
 8008612:	69fb      	ldr	r3, [r7, #28]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3728      	adds	r7, #40	@ 0x28
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	200047d8 	.word	0x200047d8
 8008620:	200047ec 	.word	0x200047ec
 8008624:	200047dc 	.word	0x200047dc
 8008628:	200047d0 	.word	0x200047d0
 800862c:	200047e0 	.word	0x200047e0
 8008630:	200047e4 	.word	0x200047e4

08008634 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b086      	sub	sp, #24
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d04f      	beq.n	80086e6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008646:	2308      	movs	r3, #8
 8008648:	425b      	negs	r3, r3
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	4413      	add	r3, r2
 800864e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	4b25      	ldr	r3, [pc, #148]	@ (80086f0 <vPortFree+0xbc>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4013      	ands	r3, r2
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10b      	bne.n	800867a <vPortFree+0x46>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	60fb      	str	r3, [r7, #12]
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	e7fd      	b.n	8008676 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00b      	beq.n	800869a <vPortFree+0x66>
	__asm volatile
 8008682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008686:	f383 8811 	msr	BASEPRI, r3
 800868a:	f3bf 8f6f 	isb	sy
 800868e:	f3bf 8f4f 	dsb	sy
 8008692:	60bb      	str	r3, [r7, #8]
}
 8008694:	bf00      	nop
 8008696:	bf00      	nop
 8008698:	e7fd      	b.n	8008696 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	4b14      	ldr	r3, [pc, #80]	@ (80086f0 <vPortFree+0xbc>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4013      	ands	r3, r2
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d01e      	beq.n	80086e6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d11a      	bne.n	80086e6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	685a      	ldr	r2, [r3, #4]
 80086b4:	4b0e      	ldr	r3, [pc, #56]	@ (80086f0 <vPortFree+0xbc>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	43db      	mvns	r3, r3
 80086ba:	401a      	ands	r2, r3
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086c0:	f7ff f966 	bl	8007990 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	685a      	ldr	r2, [r3, #4]
 80086c8:	4b0a      	ldr	r3, [pc, #40]	@ (80086f4 <vPortFree+0xc0>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4413      	add	r3, r2
 80086ce:	4a09      	ldr	r2, [pc, #36]	@ (80086f4 <vPortFree+0xc0>)
 80086d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086d2:	6938      	ldr	r0, [r7, #16]
 80086d4:	f000 f874 	bl	80087c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80086d8:	4b07      	ldr	r3, [pc, #28]	@ (80086f8 <vPortFree+0xc4>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	3301      	adds	r3, #1
 80086de:	4a06      	ldr	r2, [pc, #24]	@ (80086f8 <vPortFree+0xc4>)
 80086e0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80086e2:	f7ff f963 	bl	80079ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086e6:	bf00      	nop
 80086e8:	3718      	adds	r7, #24
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	200047ec 	.word	0x200047ec
 80086f4:	200047dc 	.word	0x200047dc
 80086f8:	200047e8 	.word	0x200047e8

080086fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008702:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008706:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008708:	4b27      	ldr	r3, [pc, #156]	@ (80087a8 <prvHeapInit+0xac>)
 800870a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f003 0307 	and.w	r3, r3, #7
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00c      	beq.n	8008730 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3307      	adds	r3, #7
 800871a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f023 0307 	bic.w	r3, r3, #7
 8008722:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	4a1f      	ldr	r2, [pc, #124]	@ (80087a8 <prvHeapInit+0xac>)
 800872c:	4413      	add	r3, r2
 800872e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008734:	4a1d      	ldr	r2, [pc, #116]	@ (80087ac <prvHeapInit+0xb0>)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800873a:	4b1c      	ldr	r3, [pc, #112]	@ (80087ac <prvHeapInit+0xb0>)
 800873c:	2200      	movs	r2, #0
 800873e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	4413      	add	r3, r2
 8008746:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008748:	2208      	movs	r2, #8
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	1a9b      	subs	r3, r3, r2
 800874e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f023 0307 	bic.w	r3, r3, #7
 8008756:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	4a15      	ldr	r2, [pc, #84]	@ (80087b0 <prvHeapInit+0xb4>)
 800875c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800875e:	4b14      	ldr	r3, [pc, #80]	@ (80087b0 <prvHeapInit+0xb4>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2200      	movs	r2, #0
 8008764:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008766:	4b12      	ldr	r3, [pc, #72]	@ (80087b0 <prvHeapInit+0xb4>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2200      	movs	r2, #0
 800876c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	1ad2      	subs	r2, r2, r3
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800877c:	4b0c      	ldr	r3, [pc, #48]	@ (80087b0 <prvHeapInit+0xb4>)
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	4a0a      	ldr	r2, [pc, #40]	@ (80087b4 <prvHeapInit+0xb8>)
 800878a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	4a09      	ldr	r2, [pc, #36]	@ (80087b8 <prvHeapInit+0xbc>)
 8008792:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008794:	4b09      	ldr	r3, [pc, #36]	@ (80087bc <prvHeapInit+0xc0>)
 8008796:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800879a:	601a      	str	r2, [r3, #0]
}
 800879c:	bf00      	nop
 800879e:	3714      	adds	r7, #20
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr
 80087a8:	200007d0 	.word	0x200007d0
 80087ac:	200047d0 	.word	0x200047d0
 80087b0:	200047d8 	.word	0x200047d8
 80087b4:	200047e0 	.word	0x200047e0
 80087b8:	200047dc 	.word	0x200047dc
 80087bc:	200047ec 	.word	0x200047ec

080087c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087c8:	4b28      	ldr	r3, [pc, #160]	@ (800886c <prvInsertBlockIntoFreeList+0xac>)
 80087ca:	60fb      	str	r3, [r7, #12]
 80087cc:	e002      	b.n	80087d4 <prvInsertBlockIntoFreeList+0x14>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	60fb      	str	r3, [r7, #12]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d8f7      	bhi.n	80087ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	4413      	add	r3, r2
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d108      	bne.n	8008802 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	685a      	ldr	r2, [r3, #4]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	441a      	add	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	441a      	add	r2, r3
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	429a      	cmp	r2, r3
 8008814:	d118      	bne.n	8008848 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	4b15      	ldr	r3, [pc, #84]	@ (8008870 <prvInsertBlockIntoFreeList+0xb0>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	429a      	cmp	r2, r3
 8008820:	d00d      	beq.n	800883e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	685a      	ldr	r2, [r3, #4]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	441a      	add	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	601a      	str	r2, [r3, #0]
 800883c:	e008      	b.n	8008850 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800883e:	4b0c      	ldr	r3, [pc, #48]	@ (8008870 <prvInsertBlockIntoFreeList+0xb0>)
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	601a      	str	r2, [r3, #0]
 8008846:	e003      	b.n	8008850 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	429a      	cmp	r2, r3
 8008856:	d002      	beq.n	800885e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800885e:	bf00      	nop
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	200047d0 	.word	0x200047d0
 8008870:	200047d8 	.word	0x200047d8

08008874 <__cvt>:
 8008874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008878:	ec57 6b10 	vmov	r6, r7, d0
 800887c:	2f00      	cmp	r7, #0
 800887e:	460c      	mov	r4, r1
 8008880:	4619      	mov	r1, r3
 8008882:	463b      	mov	r3, r7
 8008884:	bfbb      	ittet	lt
 8008886:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800888a:	461f      	movlt	r7, r3
 800888c:	2300      	movge	r3, #0
 800888e:	232d      	movlt	r3, #45	@ 0x2d
 8008890:	700b      	strb	r3, [r1, #0]
 8008892:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008894:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008898:	4691      	mov	r9, r2
 800889a:	f023 0820 	bic.w	r8, r3, #32
 800889e:	bfbc      	itt	lt
 80088a0:	4632      	movlt	r2, r6
 80088a2:	4616      	movlt	r6, r2
 80088a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80088a8:	d005      	beq.n	80088b6 <__cvt+0x42>
 80088aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80088ae:	d100      	bne.n	80088b2 <__cvt+0x3e>
 80088b0:	3401      	adds	r4, #1
 80088b2:	2102      	movs	r1, #2
 80088b4:	e000      	b.n	80088b8 <__cvt+0x44>
 80088b6:	2103      	movs	r1, #3
 80088b8:	ab03      	add	r3, sp, #12
 80088ba:	9301      	str	r3, [sp, #4]
 80088bc:	ab02      	add	r3, sp, #8
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	ec47 6b10 	vmov	d0, r6, r7
 80088c4:	4653      	mov	r3, sl
 80088c6:	4622      	mov	r2, r4
 80088c8:	f000 fec6 	bl	8009658 <_dtoa_r>
 80088cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80088d0:	4605      	mov	r5, r0
 80088d2:	d119      	bne.n	8008908 <__cvt+0x94>
 80088d4:	f019 0f01 	tst.w	r9, #1
 80088d8:	d00e      	beq.n	80088f8 <__cvt+0x84>
 80088da:	eb00 0904 	add.w	r9, r0, r4
 80088de:	2200      	movs	r2, #0
 80088e0:	2300      	movs	r3, #0
 80088e2:	4630      	mov	r0, r6
 80088e4:	4639      	mov	r1, r7
 80088e6:	f7f8 f8ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80088ea:	b108      	cbz	r0, 80088f0 <__cvt+0x7c>
 80088ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80088f0:	2230      	movs	r2, #48	@ 0x30
 80088f2:	9b03      	ldr	r3, [sp, #12]
 80088f4:	454b      	cmp	r3, r9
 80088f6:	d31e      	bcc.n	8008936 <__cvt+0xc2>
 80088f8:	9b03      	ldr	r3, [sp, #12]
 80088fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088fc:	1b5b      	subs	r3, r3, r5
 80088fe:	4628      	mov	r0, r5
 8008900:	6013      	str	r3, [r2, #0]
 8008902:	b004      	add	sp, #16
 8008904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008908:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800890c:	eb00 0904 	add.w	r9, r0, r4
 8008910:	d1e5      	bne.n	80088de <__cvt+0x6a>
 8008912:	7803      	ldrb	r3, [r0, #0]
 8008914:	2b30      	cmp	r3, #48	@ 0x30
 8008916:	d10a      	bne.n	800892e <__cvt+0xba>
 8008918:	2200      	movs	r2, #0
 800891a:	2300      	movs	r3, #0
 800891c:	4630      	mov	r0, r6
 800891e:	4639      	mov	r1, r7
 8008920:	f7f8 f8d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008924:	b918      	cbnz	r0, 800892e <__cvt+0xba>
 8008926:	f1c4 0401 	rsb	r4, r4, #1
 800892a:	f8ca 4000 	str.w	r4, [sl]
 800892e:	f8da 3000 	ldr.w	r3, [sl]
 8008932:	4499      	add	r9, r3
 8008934:	e7d3      	b.n	80088de <__cvt+0x6a>
 8008936:	1c59      	adds	r1, r3, #1
 8008938:	9103      	str	r1, [sp, #12]
 800893a:	701a      	strb	r2, [r3, #0]
 800893c:	e7d9      	b.n	80088f2 <__cvt+0x7e>

0800893e <__exponent>:
 800893e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008940:	2900      	cmp	r1, #0
 8008942:	bfba      	itte	lt
 8008944:	4249      	neglt	r1, r1
 8008946:	232d      	movlt	r3, #45	@ 0x2d
 8008948:	232b      	movge	r3, #43	@ 0x2b
 800894a:	2909      	cmp	r1, #9
 800894c:	7002      	strb	r2, [r0, #0]
 800894e:	7043      	strb	r3, [r0, #1]
 8008950:	dd29      	ble.n	80089a6 <__exponent+0x68>
 8008952:	f10d 0307 	add.w	r3, sp, #7
 8008956:	461d      	mov	r5, r3
 8008958:	270a      	movs	r7, #10
 800895a:	461a      	mov	r2, r3
 800895c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008960:	fb07 1416 	mls	r4, r7, r6, r1
 8008964:	3430      	adds	r4, #48	@ 0x30
 8008966:	f802 4c01 	strb.w	r4, [r2, #-1]
 800896a:	460c      	mov	r4, r1
 800896c:	2c63      	cmp	r4, #99	@ 0x63
 800896e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008972:	4631      	mov	r1, r6
 8008974:	dcf1      	bgt.n	800895a <__exponent+0x1c>
 8008976:	3130      	adds	r1, #48	@ 0x30
 8008978:	1e94      	subs	r4, r2, #2
 800897a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800897e:	1c41      	adds	r1, r0, #1
 8008980:	4623      	mov	r3, r4
 8008982:	42ab      	cmp	r3, r5
 8008984:	d30a      	bcc.n	800899c <__exponent+0x5e>
 8008986:	f10d 0309 	add.w	r3, sp, #9
 800898a:	1a9b      	subs	r3, r3, r2
 800898c:	42ac      	cmp	r4, r5
 800898e:	bf88      	it	hi
 8008990:	2300      	movhi	r3, #0
 8008992:	3302      	adds	r3, #2
 8008994:	4403      	add	r3, r0
 8008996:	1a18      	subs	r0, r3, r0
 8008998:	b003      	add	sp, #12
 800899a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800899c:	f813 6b01 	ldrb.w	r6, [r3], #1
 80089a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80089a4:	e7ed      	b.n	8008982 <__exponent+0x44>
 80089a6:	2330      	movs	r3, #48	@ 0x30
 80089a8:	3130      	adds	r1, #48	@ 0x30
 80089aa:	7083      	strb	r3, [r0, #2]
 80089ac:	70c1      	strb	r1, [r0, #3]
 80089ae:	1d03      	adds	r3, r0, #4
 80089b0:	e7f1      	b.n	8008996 <__exponent+0x58>
	...

080089b4 <_printf_float>:
 80089b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b8:	b08d      	sub	sp, #52	@ 0x34
 80089ba:	460c      	mov	r4, r1
 80089bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80089c0:	4616      	mov	r6, r2
 80089c2:	461f      	mov	r7, r3
 80089c4:	4605      	mov	r5, r0
 80089c6:	f000 fcdb 	bl	8009380 <_localeconv_r>
 80089ca:	6803      	ldr	r3, [r0, #0]
 80089cc:	9304      	str	r3, [sp, #16]
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7f7 fc4e 	bl	8000270 <strlen>
 80089d4:	2300      	movs	r3, #0
 80089d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80089d8:	f8d8 3000 	ldr.w	r3, [r8]
 80089dc:	9005      	str	r0, [sp, #20]
 80089de:	3307      	adds	r3, #7
 80089e0:	f023 0307 	bic.w	r3, r3, #7
 80089e4:	f103 0208 	add.w	r2, r3, #8
 80089e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80089ec:	f8d4 b000 	ldr.w	fp, [r4]
 80089f0:	f8c8 2000 	str.w	r2, [r8]
 80089f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80089fc:	9307      	str	r3, [sp, #28]
 80089fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a02:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008a06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a0a:	4b9c      	ldr	r3, [pc, #624]	@ (8008c7c <_printf_float+0x2c8>)
 8008a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a10:	f7f8 f88c 	bl	8000b2c <__aeabi_dcmpun>
 8008a14:	bb70      	cbnz	r0, 8008a74 <_printf_float+0xc0>
 8008a16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a1a:	4b98      	ldr	r3, [pc, #608]	@ (8008c7c <_printf_float+0x2c8>)
 8008a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a20:	f7f8 f866 	bl	8000af0 <__aeabi_dcmple>
 8008a24:	bb30      	cbnz	r0, 8008a74 <_printf_float+0xc0>
 8008a26:	2200      	movs	r2, #0
 8008a28:	2300      	movs	r3, #0
 8008a2a:	4640      	mov	r0, r8
 8008a2c:	4649      	mov	r1, r9
 8008a2e:	f7f8 f855 	bl	8000adc <__aeabi_dcmplt>
 8008a32:	b110      	cbz	r0, 8008a3a <_printf_float+0x86>
 8008a34:	232d      	movs	r3, #45	@ 0x2d
 8008a36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a3a:	4a91      	ldr	r2, [pc, #580]	@ (8008c80 <_printf_float+0x2cc>)
 8008a3c:	4b91      	ldr	r3, [pc, #580]	@ (8008c84 <_printf_float+0x2d0>)
 8008a3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008a42:	bf8c      	ite	hi
 8008a44:	4690      	movhi	r8, r2
 8008a46:	4698      	movls	r8, r3
 8008a48:	2303      	movs	r3, #3
 8008a4a:	6123      	str	r3, [r4, #16]
 8008a4c:	f02b 0304 	bic.w	r3, fp, #4
 8008a50:	6023      	str	r3, [r4, #0]
 8008a52:	f04f 0900 	mov.w	r9, #0
 8008a56:	9700      	str	r7, [sp, #0]
 8008a58:	4633      	mov	r3, r6
 8008a5a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008a5c:	4621      	mov	r1, r4
 8008a5e:	4628      	mov	r0, r5
 8008a60:	f000 f9d2 	bl	8008e08 <_printf_common>
 8008a64:	3001      	adds	r0, #1
 8008a66:	f040 808d 	bne.w	8008b84 <_printf_float+0x1d0>
 8008a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a6e:	b00d      	add	sp, #52	@ 0x34
 8008a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a74:	4642      	mov	r2, r8
 8008a76:	464b      	mov	r3, r9
 8008a78:	4640      	mov	r0, r8
 8008a7a:	4649      	mov	r1, r9
 8008a7c:	f7f8 f856 	bl	8000b2c <__aeabi_dcmpun>
 8008a80:	b140      	cbz	r0, 8008a94 <_printf_float+0xe0>
 8008a82:	464b      	mov	r3, r9
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	bfbc      	itt	lt
 8008a88:	232d      	movlt	r3, #45	@ 0x2d
 8008a8a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008a8e:	4a7e      	ldr	r2, [pc, #504]	@ (8008c88 <_printf_float+0x2d4>)
 8008a90:	4b7e      	ldr	r3, [pc, #504]	@ (8008c8c <_printf_float+0x2d8>)
 8008a92:	e7d4      	b.n	8008a3e <_printf_float+0x8a>
 8008a94:	6863      	ldr	r3, [r4, #4]
 8008a96:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008a9a:	9206      	str	r2, [sp, #24]
 8008a9c:	1c5a      	adds	r2, r3, #1
 8008a9e:	d13b      	bne.n	8008b18 <_printf_float+0x164>
 8008aa0:	2306      	movs	r3, #6
 8008aa2:	6063      	str	r3, [r4, #4]
 8008aa4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	6022      	str	r2, [r4, #0]
 8008aac:	9303      	str	r3, [sp, #12]
 8008aae:	ab0a      	add	r3, sp, #40	@ 0x28
 8008ab0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008ab4:	ab09      	add	r3, sp, #36	@ 0x24
 8008ab6:	9300      	str	r3, [sp, #0]
 8008ab8:	6861      	ldr	r1, [r4, #4]
 8008aba:	ec49 8b10 	vmov	d0, r8, r9
 8008abe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	f7ff fed6 	bl	8008874 <__cvt>
 8008ac8:	9b06      	ldr	r3, [sp, #24]
 8008aca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008acc:	2b47      	cmp	r3, #71	@ 0x47
 8008ace:	4680      	mov	r8, r0
 8008ad0:	d129      	bne.n	8008b26 <_printf_float+0x172>
 8008ad2:	1cc8      	adds	r0, r1, #3
 8008ad4:	db02      	blt.n	8008adc <_printf_float+0x128>
 8008ad6:	6863      	ldr	r3, [r4, #4]
 8008ad8:	4299      	cmp	r1, r3
 8008ada:	dd41      	ble.n	8008b60 <_printf_float+0x1ac>
 8008adc:	f1aa 0a02 	sub.w	sl, sl, #2
 8008ae0:	fa5f fa8a 	uxtb.w	sl, sl
 8008ae4:	3901      	subs	r1, #1
 8008ae6:	4652      	mov	r2, sl
 8008ae8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008aec:	9109      	str	r1, [sp, #36]	@ 0x24
 8008aee:	f7ff ff26 	bl	800893e <__exponent>
 8008af2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008af4:	1813      	adds	r3, r2, r0
 8008af6:	2a01      	cmp	r2, #1
 8008af8:	4681      	mov	r9, r0
 8008afa:	6123      	str	r3, [r4, #16]
 8008afc:	dc02      	bgt.n	8008b04 <_printf_float+0x150>
 8008afe:	6822      	ldr	r2, [r4, #0]
 8008b00:	07d2      	lsls	r2, r2, #31
 8008b02:	d501      	bpl.n	8008b08 <_printf_float+0x154>
 8008b04:	3301      	adds	r3, #1
 8008b06:	6123      	str	r3, [r4, #16]
 8008b08:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d0a2      	beq.n	8008a56 <_printf_float+0xa2>
 8008b10:	232d      	movs	r3, #45	@ 0x2d
 8008b12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b16:	e79e      	b.n	8008a56 <_printf_float+0xa2>
 8008b18:	9a06      	ldr	r2, [sp, #24]
 8008b1a:	2a47      	cmp	r2, #71	@ 0x47
 8008b1c:	d1c2      	bne.n	8008aa4 <_printf_float+0xf0>
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1c0      	bne.n	8008aa4 <_printf_float+0xf0>
 8008b22:	2301      	movs	r3, #1
 8008b24:	e7bd      	b.n	8008aa2 <_printf_float+0xee>
 8008b26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008b2a:	d9db      	bls.n	8008ae4 <_printf_float+0x130>
 8008b2c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008b30:	d118      	bne.n	8008b64 <_printf_float+0x1b0>
 8008b32:	2900      	cmp	r1, #0
 8008b34:	6863      	ldr	r3, [r4, #4]
 8008b36:	dd0b      	ble.n	8008b50 <_printf_float+0x19c>
 8008b38:	6121      	str	r1, [r4, #16]
 8008b3a:	b913      	cbnz	r3, 8008b42 <_printf_float+0x18e>
 8008b3c:	6822      	ldr	r2, [r4, #0]
 8008b3e:	07d0      	lsls	r0, r2, #31
 8008b40:	d502      	bpl.n	8008b48 <_printf_float+0x194>
 8008b42:	3301      	adds	r3, #1
 8008b44:	440b      	add	r3, r1
 8008b46:	6123      	str	r3, [r4, #16]
 8008b48:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008b4a:	f04f 0900 	mov.w	r9, #0
 8008b4e:	e7db      	b.n	8008b08 <_printf_float+0x154>
 8008b50:	b913      	cbnz	r3, 8008b58 <_printf_float+0x1a4>
 8008b52:	6822      	ldr	r2, [r4, #0]
 8008b54:	07d2      	lsls	r2, r2, #31
 8008b56:	d501      	bpl.n	8008b5c <_printf_float+0x1a8>
 8008b58:	3302      	adds	r3, #2
 8008b5a:	e7f4      	b.n	8008b46 <_printf_float+0x192>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e7f2      	b.n	8008b46 <_printf_float+0x192>
 8008b60:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008b64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b66:	4299      	cmp	r1, r3
 8008b68:	db05      	blt.n	8008b76 <_printf_float+0x1c2>
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	6121      	str	r1, [r4, #16]
 8008b6e:	07d8      	lsls	r0, r3, #31
 8008b70:	d5ea      	bpl.n	8008b48 <_printf_float+0x194>
 8008b72:	1c4b      	adds	r3, r1, #1
 8008b74:	e7e7      	b.n	8008b46 <_printf_float+0x192>
 8008b76:	2900      	cmp	r1, #0
 8008b78:	bfd4      	ite	le
 8008b7a:	f1c1 0202 	rsble	r2, r1, #2
 8008b7e:	2201      	movgt	r2, #1
 8008b80:	4413      	add	r3, r2
 8008b82:	e7e0      	b.n	8008b46 <_printf_float+0x192>
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	055a      	lsls	r2, r3, #21
 8008b88:	d407      	bmi.n	8008b9a <_printf_float+0x1e6>
 8008b8a:	6923      	ldr	r3, [r4, #16]
 8008b8c:	4642      	mov	r2, r8
 8008b8e:	4631      	mov	r1, r6
 8008b90:	4628      	mov	r0, r5
 8008b92:	47b8      	blx	r7
 8008b94:	3001      	adds	r0, #1
 8008b96:	d12b      	bne.n	8008bf0 <_printf_float+0x23c>
 8008b98:	e767      	b.n	8008a6a <_printf_float+0xb6>
 8008b9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008b9e:	f240 80dd 	bls.w	8008d5c <_printf_float+0x3a8>
 8008ba2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f7f7 ff8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	d033      	beq.n	8008c1a <_printf_float+0x266>
 8008bb2:	4a37      	ldr	r2, [pc, #220]	@ (8008c90 <_printf_float+0x2dc>)
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	4628      	mov	r0, r5
 8008bba:	47b8      	blx	r7
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	f43f af54 	beq.w	8008a6a <_printf_float+0xb6>
 8008bc2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008bc6:	4543      	cmp	r3, r8
 8008bc8:	db02      	blt.n	8008bd0 <_printf_float+0x21c>
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	07d8      	lsls	r0, r3, #31
 8008bce:	d50f      	bpl.n	8008bf0 <_printf_float+0x23c>
 8008bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bd4:	4631      	mov	r1, r6
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	47b8      	blx	r7
 8008bda:	3001      	adds	r0, #1
 8008bdc:	f43f af45 	beq.w	8008a6a <_printf_float+0xb6>
 8008be0:	f04f 0900 	mov.w	r9, #0
 8008be4:	f108 38ff 	add.w	r8, r8, #4294967295
 8008be8:	f104 0a1a 	add.w	sl, r4, #26
 8008bec:	45c8      	cmp	r8, r9
 8008bee:	dc09      	bgt.n	8008c04 <_printf_float+0x250>
 8008bf0:	6823      	ldr	r3, [r4, #0]
 8008bf2:	079b      	lsls	r3, r3, #30
 8008bf4:	f100 8103 	bmi.w	8008dfe <_printf_float+0x44a>
 8008bf8:	68e0      	ldr	r0, [r4, #12]
 8008bfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bfc:	4298      	cmp	r0, r3
 8008bfe:	bfb8      	it	lt
 8008c00:	4618      	movlt	r0, r3
 8008c02:	e734      	b.n	8008a6e <_printf_float+0xba>
 8008c04:	2301      	movs	r3, #1
 8008c06:	4652      	mov	r2, sl
 8008c08:	4631      	mov	r1, r6
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	47b8      	blx	r7
 8008c0e:	3001      	adds	r0, #1
 8008c10:	f43f af2b 	beq.w	8008a6a <_printf_float+0xb6>
 8008c14:	f109 0901 	add.w	r9, r9, #1
 8008c18:	e7e8      	b.n	8008bec <_printf_float+0x238>
 8008c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	dc39      	bgt.n	8008c94 <_printf_float+0x2e0>
 8008c20:	4a1b      	ldr	r2, [pc, #108]	@ (8008c90 <_printf_float+0x2dc>)
 8008c22:	2301      	movs	r3, #1
 8008c24:	4631      	mov	r1, r6
 8008c26:	4628      	mov	r0, r5
 8008c28:	47b8      	blx	r7
 8008c2a:	3001      	adds	r0, #1
 8008c2c:	f43f af1d 	beq.w	8008a6a <_printf_float+0xb6>
 8008c30:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008c34:	ea59 0303 	orrs.w	r3, r9, r3
 8008c38:	d102      	bne.n	8008c40 <_printf_float+0x28c>
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	07d9      	lsls	r1, r3, #31
 8008c3e:	d5d7      	bpl.n	8008bf0 <_printf_float+0x23c>
 8008c40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c44:	4631      	mov	r1, r6
 8008c46:	4628      	mov	r0, r5
 8008c48:	47b8      	blx	r7
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	f43f af0d 	beq.w	8008a6a <_printf_float+0xb6>
 8008c50:	f04f 0a00 	mov.w	sl, #0
 8008c54:	f104 0b1a 	add.w	fp, r4, #26
 8008c58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c5a:	425b      	negs	r3, r3
 8008c5c:	4553      	cmp	r3, sl
 8008c5e:	dc01      	bgt.n	8008c64 <_printf_float+0x2b0>
 8008c60:	464b      	mov	r3, r9
 8008c62:	e793      	b.n	8008b8c <_printf_float+0x1d8>
 8008c64:	2301      	movs	r3, #1
 8008c66:	465a      	mov	r2, fp
 8008c68:	4631      	mov	r1, r6
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	47b8      	blx	r7
 8008c6e:	3001      	adds	r0, #1
 8008c70:	f43f aefb 	beq.w	8008a6a <_printf_float+0xb6>
 8008c74:	f10a 0a01 	add.w	sl, sl, #1
 8008c78:	e7ee      	b.n	8008c58 <_printf_float+0x2a4>
 8008c7a:	bf00      	nop
 8008c7c:	7fefffff 	.word	0x7fefffff
 8008c80:	0800b6c8 	.word	0x0800b6c8
 8008c84:	0800b6c4 	.word	0x0800b6c4
 8008c88:	0800b6d0 	.word	0x0800b6d0
 8008c8c:	0800b6cc 	.word	0x0800b6cc
 8008c90:	0800b6d4 	.word	0x0800b6d4
 8008c94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c9a:	4553      	cmp	r3, sl
 8008c9c:	bfa8      	it	ge
 8008c9e:	4653      	movge	r3, sl
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	4699      	mov	r9, r3
 8008ca4:	dc36      	bgt.n	8008d14 <_printf_float+0x360>
 8008ca6:	f04f 0b00 	mov.w	fp, #0
 8008caa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cae:	f104 021a 	add.w	r2, r4, #26
 8008cb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008cb4:	9306      	str	r3, [sp, #24]
 8008cb6:	eba3 0309 	sub.w	r3, r3, r9
 8008cba:	455b      	cmp	r3, fp
 8008cbc:	dc31      	bgt.n	8008d22 <_printf_float+0x36e>
 8008cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cc0:	459a      	cmp	sl, r3
 8008cc2:	dc3a      	bgt.n	8008d3a <_printf_float+0x386>
 8008cc4:	6823      	ldr	r3, [r4, #0]
 8008cc6:	07da      	lsls	r2, r3, #31
 8008cc8:	d437      	bmi.n	8008d3a <_printf_float+0x386>
 8008cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ccc:	ebaa 0903 	sub.w	r9, sl, r3
 8008cd0:	9b06      	ldr	r3, [sp, #24]
 8008cd2:	ebaa 0303 	sub.w	r3, sl, r3
 8008cd6:	4599      	cmp	r9, r3
 8008cd8:	bfa8      	it	ge
 8008cda:	4699      	movge	r9, r3
 8008cdc:	f1b9 0f00 	cmp.w	r9, #0
 8008ce0:	dc33      	bgt.n	8008d4a <_printf_float+0x396>
 8008ce2:	f04f 0800 	mov.w	r8, #0
 8008ce6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cea:	f104 0b1a 	add.w	fp, r4, #26
 8008cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cf0:	ebaa 0303 	sub.w	r3, sl, r3
 8008cf4:	eba3 0309 	sub.w	r3, r3, r9
 8008cf8:	4543      	cmp	r3, r8
 8008cfa:	f77f af79 	ble.w	8008bf0 <_printf_float+0x23c>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	465a      	mov	r2, fp
 8008d02:	4631      	mov	r1, r6
 8008d04:	4628      	mov	r0, r5
 8008d06:	47b8      	blx	r7
 8008d08:	3001      	adds	r0, #1
 8008d0a:	f43f aeae 	beq.w	8008a6a <_printf_float+0xb6>
 8008d0e:	f108 0801 	add.w	r8, r8, #1
 8008d12:	e7ec      	b.n	8008cee <_printf_float+0x33a>
 8008d14:	4642      	mov	r2, r8
 8008d16:	4631      	mov	r1, r6
 8008d18:	4628      	mov	r0, r5
 8008d1a:	47b8      	blx	r7
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	d1c2      	bne.n	8008ca6 <_printf_float+0x2f2>
 8008d20:	e6a3      	b.n	8008a6a <_printf_float+0xb6>
 8008d22:	2301      	movs	r3, #1
 8008d24:	4631      	mov	r1, r6
 8008d26:	4628      	mov	r0, r5
 8008d28:	9206      	str	r2, [sp, #24]
 8008d2a:	47b8      	blx	r7
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	f43f ae9c 	beq.w	8008a6a <_printf_float+0xb6>
 8008d32:	9a06      	ldr	r2, [sp, #24]
 8008d34:	f10b 0b01 	add.w	fp, fp, #1
 8008d38:	e7bb      	b.n	8008cb2 <_printf_float+0x2fe>
 8008d3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d3e:	4631      	mov	r1, r6
 8008d40:	4628      	mov	r0, r5
 8008d42:	47b8      	blx	r7
 8008d44:	3001      	adds	r0, #1
 8008d46:	d1c0      	bne.n	8008cca <_printf_float+0x316>
 8008d48:	e68f      	b.n	8008a6a <_printf_float+0xb6>
 8008d4a:	9a06      	ldr	r2, [sp, #24]
 8008d4c:	464b      	mov	r3, r9
 8008d4e:	4442      	add	r2, r8
 8008d50:	4631      	mov	r1, r6
 8008d52:	4628      	mov	r0, r5
 8008d54:	47b8      	blx	r7
 8008d56:	3001      	adds	r0, #1
 8008d58:	d1c3      	bne.n	8008ce2 <_printf_float+0x32e>
 8008d5a:	e686      	b.n	8008a6a <_printf_float+0xb6>
 8008d5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008d60:	f1ba 0f01 	cmp.w	sl, #1
 8008d64:	dc01      	bgt.n	8008d6a <_printf_float+0x3b6>
 8008d66:	07db      	lsls	r3, r3, #31
 8008d68:	d536      	bpl.n	8008dd8 <_printf_float+0x424>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	4642      	mov	r2, r8
 8008d6e:	4631      	mov	r1, r6
 8008d70:	4628      	mov	r0, r5
 8008d72:	47b8      	blx	r7
 8008d74:	3001      	adds	r0, #1
 8008d76:	f43f ae78 	beq.w	8008a6a <_printf_float+0xb6>
 8008d7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d7e:	4631      	mov	r1, r6
 8008d80:	4628      	mov	r0, r5
 8008d82:	47b8      	blx	r7
 8008d84:	3001      	adds	r0, #1
 8008d86:	f43f ae70 	beq.w	8008a6a <_printf_float+0xb6>
 8008d8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008d8e:	2200      	movs	r2, #0
 8008d90:	2300      	movs	r3, #0
 8008d92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d96:	f7f7 fe97 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d9a:	b9c0      	cbnz	r0, 8008dce <_printf_float+0x41a>
 8008d9c:	4653      	mov	r3, sl
 8008d9e:	f108 0201 	add.w	r2, r8, #1
 8008da2:	4631      	mov	r1, r6
 8008da4:	4628      	mov	r0, r5
 8008da6:	47b8      	blx	r7
 8008da8:	3001      	adds	r0, #1
 8008daa:	d10c      	bne.n	8008dc6 <_printf_float+0x412>
 8008dac:	e65d      	b.n	8008a6a <_printf_float+0xb6>
 8008dae:	2301      	movs	r3, #1
 8008db0:	465a      	mov	r2, fp
 8008db2:	4631      	mov	r1, r6
 8008db4:	4628      	mov	r0, r5
 8008db6:	47b8      	blx	r7
 8008db8:	3001      	adds	r0, #1
 8008dba:	f43f ae56 	beq.w	8008a6a <_printf_float+0xb6>
 8008dbe:	f108 0801 	add.w	r8, r8, #1
 8008dc2:	45d0      	cmp	r8, sl
 8008dc4:	dbf3      	blt.n	8008dae <_printf_float+0x3fa>
 8008dc6:	464b      	mov	r3, r9
 8008dc8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008dcc:	e6df      	b.n	8008b8e <_printf_float+0x1da>
 8008dce:	f04f 0800 	mov.w	r8, #0
 8008dd2:	f104 0b1a 	add.w	fp, r4, #26
 8008dd6:	e7f4      	b.n	8008dc2 <_printf_float+0x40e>
 8008dd8:	2301      	movs	r3, #1
 8008dda:	4642      	mov	r2, r8
 8008ddc:	e7e1      	b.n	8008da2 <_printf_float+0x3ee>
 8008dde:	2301      	movs	r3, #1
 8008de0:	464a      	mov	r2, r9
 8008de2:	4631      	mov	r1, r6
 8008de4:	4628      	mov	r0, r5
 8008de6:	47b8      	blx	r7
 8008de8:	3001      	adds	r0, #1
 8008dea:	f43f ae3e 	beq.w	8008a6a <_printf_float+0xb6>
 8008dee:	f108 0801 	add.w	r8, r8, #1
 8008df2:	68e3      	ldr	r3, [r4, #12]
 8008df4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008df6:	1a5b      	subs	r3, r3, r1
 8008df8:	4543      	cmp	r3, r8
 8008dfa:	dcf0      	bgt.n	8008dde <_printf_float+0x42a>
 8008dfc:	e6fc      	b.n	8008bf8 <_printf_float+0x244>
 8008dfe:	f04f 0800 	mov.w	r8, #0
 8008e02:	f104 0919 	add.w	r9, r4, #25
 8008e06:	e7f4      	b.n	8008df2 <_printf_float+0x43e>

08008e08 <_printf_common>:
 8008e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e0c:	4616      	mov	r6, r2
 8008e0e:	4698      	mov	r8, r3
 8008e10:	688a      	ldr	r2, [r1, #8]
 8008e12:	690b      	ldr	r3, [r1, #16]
 8008e14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	bfb8      	it	lt
 8008e1c:	4613      	movlt	r3, r2
 8008e1e:	6033      	str	r3, [r6, #0]
 8008e20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e24:	4607      	mov	r7, r0
 8008e26:	460c      	mov	r4, r1
 8008e28:	b10a      	cbz	r2, 8008e2e <_printf_common+0x26>
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	6033      	str	r3, [r6, #0]
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	0699      	lsls	r1, r3, #26
 8008e32:	bf42      	ittt	mi
 8008e34:	6833      	ldrmi	r3, [r6, #0]
 8008e36:	3302      	addmi	r3, #2
 8008e38:	6033      	strmi	r3, [r6, #0]
 8008e3a:	6825      	ldr	r5, [r4, #0]
 8008e3c:	f015 0506 	ands.w	r5, r5, #6
 8008e40:	d106      	bne.n	8008e50 <_printf_common+0x48>
 8008e42:	f104 0a19 	add.w	sl, r4, #25
 8008e46:	68e3      	ldr	r3, [r4, #12]
 8008e48:	6832      	ldr	r2, [r6, #0]
 8008e4a:	1a9b      	subs	r3, r3, r2
 8008e4c:	42ab      	cmp	r3, r5
 8008e4e:	dc26      	bgt.n	8008e9e <_printf_common+0x96>
 8008e50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e54:	6822      	ldr	r2, [r4, #0]
 8008e56:	3b00      	subs	r3, #0
 8008e58:	bf18      	it	ne
 8008e5a:	2301      	movne	r3, #1
 8008e5c:	0692      	lsls	r2, r2, #26
 8008e5e:	d42b      	bmi.n	8008eb8 <_printf_common+0xb0>
 8008e60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e64:	4641      	mov	r1, r8
 8008e66:	4638      	mov	r0, r7
 8008e68:	47c8      	blx	r9
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	d01e      	beq.n	8008eac <_printf_common+0xa4>
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	6922      	ldr	r2, [r4, #16]
 8008e72:	f003 0306 	and.w	r3, r3, #6
 8008e76:	2b04      	cmp	r3, #4
 8008e78:	bf02      	ittt	eq
 8008e7a:	68e5      	ldreq	r5, [r4, #12]
 8008e7c:	6833      	ldreq	r3, [r6, #0]
 8008e7e:	1aed      	subeq	r5, r5, r3
 8008e80:	68a3      	ldr	r3, [r4, #8]
 8008e82:	bf0c      	ite	eq
 8008e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e88:	2500      	movne	r5, #0
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	bfc4      	itt	gt
 8008e8e:	1a9b      	subgt	r3, r3, r2
 8008e90:	18ed      	addgt	r5, r5, r3
 8008e92:	2600      	movs	r6, #0
 8008e94:	341a      	adds	r4, #26
 8008e96:	42b5      	cmp	r5, r6
 8008e98:	d11a      	bne.n	8008ed0 <_printf_common+0xc8>
 8008e9a:	2000      	movs	r0, #0
 8008e9c:	e008      	b.n	8008eb0 <_printf_common+0xa8>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	4652      	mov	r2, sl
 8008ea2:	4641      	mov	r1, r8
 8008ea4:	4638      	mov	r0, r7
 8008ea6:	47c8      	blx	r9
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	d103      	bne.n	8008eb4 <_printf_common+0xac>
 8008eac:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb4:	3501      	adds	r5, #1
 8008eb6:	e7c6      	b.n	8008e46 <_printf_common+0x3e>
 8008eb8:	18e1      	adds	r1, r4, r3
 8008eba:	1c5a      	adds	r2, r3, #1
 8008ebc:	2030      	movs	r0, #48	@ 0x30
 8008ebe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ec2:	4422      	add	r2, r4
 8008ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ec8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ecc:	3302      	adds	r3, #2
 8008ece:	e7c7      	b.n	8008e60 <_printf_common+0x58>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	4622      	mov	r2, r4
 8008ed4:	4641      	mov	r1, r8
 8008ed6:	4638      	mov	r0, r7
 8008ed8:	47c8      	blx	r9
 8008eda:	3001      	adds	r0, #1
 8008edc:	d0e6      	beq.n	8008eac <_printf_common+0xa4>
 8008ede:	3601      	adds	r6, #1
 8008ee0:	e7d9      	b.n	8008e96 <_printf_common+0x8e>
	...

08008ee4 <_printf_i>:
 8008ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee8:	7e0f      	ldrb	r7, [r1, #24]
 8008eea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008eec:	2f78      	cmp	r7, #120	@ 0x78
 8008eee:	4691      	mov	r9, r2
 8008ef0:	4680      	mov	r8, r0
 8008ef2:	460c      	mov	r4, r1
 8008ef4:	469a      	mov	sl, r3
 8008ef6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008efa:	d807      	bhi.n	8008f0c <_printf_i+0x28>
 8008efc:	2f62      	cmp	r7, #98	@ 0x62
 8008efe:	d80a      	bhi.n	8008f16 <_printf_i+0x32>
 8008f00:	2f00      	cmp	r7, #0
 8008f02:	f000 80d1 	beq.w	80090a8 <_printf_i+0x1c4>
 8008f06:	2f58      	cmp	r7, #88	@ 0x58
 8008f08:	f000 80b8 	beq.w	800907c <_printf_i+0x198>
 8008f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f14:	e03a      	b.n	8008f8c <_printf_i+0xa8>
 8008f16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f1a:	2b15      	cmp	r3, #21
 8008f1c:	d8f6      	bhi.n	8008f0c <_printf_i+0x28>
 8008f1e:	a101      	add	r1, pc, #4	@ (adr r1, 8008f24 <_printf_i+0x40>)
 8008f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f24:	08008f7d 	.word	0x08008f7d
 8008f28:	08008f91 	.word	0x08008f91
 8008f2c:	08008f0d 	.word	0x08008f0d
 8008f30:	08008f0d 	.word	0x08008f0d
 8008f34:	08008f0d 	.word	0x08008f0d
 8008f38:	08008f0d 	.word	0x08008f0d
 8008f3c:	08008f91 	.word	0x08008f91
 8008f40:	08008f0d 	.word	0x08008f0d
 8008f44:	08008f0d 	.word	0x08008f0d
 8008f48:	08008f0d 	.word	0x08008f0d
 8008f4c:	08008f0d 	.word	0x08008f0d
 8008f50:	0800908f 	.word	0x0800908f
 8008f54:	08008fbb 	.word	0x08008fbb
 8008f58:	08009049 	.word	0x08009049
 8008f5c:	08008f0d 	.word	0x08008f0d
 8008f60:	08008f0d 	.word	0x08008f0d
 8008f64:	080090b1 	.word	0x080090b1
 8008f68:	08008f0d 	.word	0x08008f0d
 8008f6c:	08008fbb 	.word	0x08008fbb
 8008f70:	08008f0d 	.word	0x08008f0d
 8008f74:	08008f0d 	.word	0x08008f0d
 8008f78:	08009051 	.word	0x08009051
 8008f7c:	6833      	ldr	r3, [r6, #0]
 8008f7e:	1d1a      	adds	r2, r3, #4
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	6032      	str	r2, [r6, #0]
 8008f84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e09c      	b.n	80090ca <_printf_i+0x1e6>
 8008f90:	6833      	ldr	r3, [r6, #0]
 8008f92:	6820      	ldr	r0, [r4, #0]
 8008f94:	1d19      	adds	r1, r3, #4
 8008f96:	6031      	str	r1, [r6, #0]
 8008f98:	0606      	lsls	r6, r0, #24
 8008f9a:	d501      	bpl.n	8008fa0 <_printf_i+0xbc>
 8008f9c:	681d      	ldr	r5, [r3, #0]
 8008f9e:	e003      	b.n	8008fa8 <_printf_i+0xc4>
 8008fa0:	0645      	lsls	r5, r0, #25
 8008fa2:	d5fb      	bpl.n	8008f9c <_printf_i+0xb8>
 8008fa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008fa8:	2d00      	cmp	r5, #0
 8008faa:	da03      	bge.n	8008fb4 <_printf_i+0xd0>
 8008fac:	232d      	movs	r3, #45	@ 0x2d
 8008fae:	426d      	negs	r5, r5
 8008fb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fb4:	4858      	ldr	r0, [pc, #352]	@ (8009118 <_printf_i+0x234>)
 8008fb6:	230a      	movs	r3, #10
 8008fb8:	e011      	b.n	8008fde <_printf_i+0xfa>
 8008fba:	6821      	ldr	r1, [r4, #0]
 8008fbc:	6833      	ldr	r3, [r6, #0]
 8008fbe:	0608      	lsls	r0, r1, #24
 8008fc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008fc4:	d402      	bmi.n	8008fcc <_printf_i+0xe8>
 8008fc6:	0649      	lsls	r1, r1, #25
 8008fc8:	bf48      	it	mi
 8008fca:	b2ad      	uxthmi	r5, r5
 8008fcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8008fce:	4852      	ldr	r0, [pc, #328]	@ (8009118 <_printf_i+0x234>)
 8008fd0:	6033      	str	r3, [r6, #0]
 8008fd2:	bf14      	ite	ne
 8008fd4:	230a      	movne	r3, #10
 8008fd6:	2308      	moveq	r3, #8
 8008fd8:	2100      	movs	r1, #0
 8008fda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008fde:	6866      	ldr	r6, [r4, #4]
 8008fe0:	60a6      	str	r6, [r4, #8]
 8008fe2:	2e00      	cmp	r6, #0
 8008fe4:	db05      	blt.n	8008ff2 <_printf_i+0x10e>
 8008fe6:	6821      	ldr	r1, [r4, #0]
 8008fe8:	432e      	orrs	r6, r5
 8008fea:	f021 0104 	bic.w	r1, r1, #4
 8008fee:	6021      	str	r1, [r4, #0]
 8008ff0:	d04b      	beq.n	800908a <_printf_i+0x1a6>
 8008ff2:	4616      	mov	r6, r2
 8008ff4:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ff8:	fb03 5711 	mls	r7, r3, r1, r5
 8008ffc:	5dc7      	ldrb	r7, [r0, r7]
 8008ffe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009002:	462f      	mov	r7, r5
 8009004:	42bb      	cmp	r3, r7
 8009006:	460d      	mov	r5, r1
 8009008:	d9f4      	bls.n	8008ff4 <_printf_i+0x110>
 800900a:	2b08      	cmp	r3, #8
 800900c:	d10b      	bne.n	8009026 <_printf_i+0x142>
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	07df      	lsls	r7, r3, #31
 8009012:	d508      	bpl.n	8009026 <_printf_i+0x142>
 8009014:	6923      	ldr	r3, [r4, #16]
 8009016:	6861      	ldr	r1, [r4, #4]
 8009018:	4299      	cmp	r1, r3
 800901a:	bfde      	ittt	le
 800901c:	2330      	movle	r3, #48	@ 0x30
 800901e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009022:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009026:	1b92      	subs	r2, r2, r6
 8009028:	6122      	str	r2, [r4, #16]
 800902a:	f8cd a000 	str.w	sl, [sp]
 800902e:	464b      	mov	r3, r9
 8009030:	aa03      	add	r2, sp, #12
 8009032:	4621      	mov	r1, r4
 8009034:	4640      	mov	r0, r8
 8009036:	f7ff fee7 	bl	8008e08 <_printf_common>
 800903a:	3001      	adds	r0, #1
 800903c:	d14a      	bne.n	80090d4 <_printf_i+0x1f0>
 800903e:	f04f 30ff 	mov.w	r0, #4294967295
 8009042:	b004      	add	sp, #16
 8009044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009048:	6823      	ldr	r3, [r4, #0]
 800904a:	f043 0320 	orr.w	r3, r3, #32
 800904e:	6023      	str	r3, [r4, #0]
 8009050:	4832      	ldr	r0, [pc, #200]	@ (800911c <_printf_i+0x238>)
 8009052:	2778      	movs	r7, #120	@ 0x78
 8009054:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009058:	6823      	ldr	r3, [r4, #0]
 800905a:	6831      	ldr	r1, [r6, #0]
 800905c:	061f      	lsls	r7, r3, #24
 800905e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009062:	d402      	bmi.n	800906a <_printf_i+0x186>
 8009064:	065f      	lsls	r7, r3, #25
 8009066:	bf48      	it	mi
 8009068:	b2ad      	uxthmi	r5, r5
 800906a:	6031      	str	r1, [r6, #0]
 800906c:	07d9      	lsls	r1, r3, #31
 800906e:	bf44      	itt	mi
 8009070:	f043 0320 	orrmi.w	r3, r3, #32
 8009074:	6023      	strmi	r3, [r4, #0]
 8009076:	b11d      	cbz	r5, 8009080 <_printf_i+0x19c>
 8009078:	2310      	movs	r3, #16
 800907a:	e7ad      	b.n	8008fd8 <_printf_i+0xf4>
 800907c:	4826      	ldr	r0, [pc, #152]	@ (8009118 <_printf_i+0x234>)
 800907e:	e7e9      	b.n	8009054 <_printf_i+0x170>
 8009080:	6823      	ldr	r3, [r4, #0]
 8009082:	f023 0320 	bic.w	r3, r3, #32
 8009086:	6023      	str	r3, [r4, #0]
 8009088:	e7f6      	b.n	8009078 <_printf_i+0x194>
 800908a:	4616      	mov	r6, r2
 800908c:	e7bd      	b.n	800900a <_printf_i+0x126>
 800908e:	6833      	ldr	r3, [r6, #0]
 8009090:	6825      	ldr	r5, [r4, #0]
 8009092:	6961      	ldr	r1, [r4, #20]
 8009094:	1d18      	adds	r0, r3, #4
 8009096:	6030      	str	r0, [r6, #0]
 8009098:	062e      	lsls	r6, r5, #24
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	d501      	bpl.n	80090a2 <_printf_i+0x1be>
 800909e:	6019      	str	r1, [r3, #0]
 80090a0:	e002      	b.n	80090a8 <_printf_i+0x1c4>
 80090a2:	0668      	lsls	r0, r5, #25
 80090a4:	d5fb      	bpl.n	800909e <_printf_i+0x1ba>
 80090a6:	8019      	strh	r1, [r3, #0]
 80090a8:	2300      	movs	r3, #0
 80090aa:	6123      	str	r3, [r4, #16]
 80090ac:	4616      	mov	r6, r2
 80090ae:	e7bc      	b.n	800902a <_printf_i+0x146>
 80090b0:	6833      	ldr	r3, [r6, #0]
 80090b2:	1d1a      	adds	r2, r3, #4
 80090b4:	6032      	str	r2, [r6, #0]
 80090b6:	681e      	ldr	r6, [r3, #0]
 80090b8:	6862      	ldr	r2, [r4, #4]
 80090ba:	2100      	movs	r1, #0
 80090bc:	4630      	mov	r0, r6
 80090be:	f7f7 f887 	bl	80001d0 <memchr>
 80090c2:	b108      	cbz	r0, 80090c8 <_printf_i+0x1e4>
 80090c4:	1b80      	subs	r0, r0, r6
 80090c6:	6060      	str	r0, [r4, #4]
 80090c8:	6863      	ldr	r3, [r4, #4]
 80090ca:	6123      	str	r3, [r4, #16]
 80090cc:	2300      	movs	r3, #0
 80090ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090d2:	e7aa      	b.n	800902a <_printf_i+0x146>
 80090d4:	6923      	ldr	r3, [r4, #16]
 80090d6:	4632      	mov	r2, r6
 80090d8:	4649      	mov	r1, r9
 80090da:	4640      	mov	r0, r8
 80090dc:	47d0      	blx	sl
 80090de:	3001      	adds	r0, #1
 80090e0:	d0ad      	beq.n	800903e <_printf_i+0x15a>
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	079b      	lsls	r3, r3, #30
 80090e6:	d413      	bmi.n	8009110 <_printf_i+0x22c>
 80090e8:	68e0      	ldr	r0, [r4, #12]
 80090ea:	9b03      	ldr	r3, [sp, #12]
 80090ec:	4298      	cmp	r0, r3
 80090ee:	bfb8      	it	lt
 80090f0:	4618      	movlt	r0, r3
 80090f2:	e7a6      	b.n	8009042 <_printf_i+0x15e>
 80090f4:	2301      	movs	r3, #1
 80090f6:	4632      	mov	r2, r6
 80090f8:	4649      	mov	r1, r9
 80090fa:	4640      	mov	r0, r8
 80090fc:	47d0      	blx	sl
 80090fe:	3001      	adds	r0, #1
 8009100:	d09d      	beq.n	800903e <_printf_i+0x15a>
 8009102:	3501      	adds	r5, #1
 8009104:	68e3      	ldr	r3, [r4, #12]
 8009106:	9903      	ldr	r1, [sp, #12]
 8009108:	1a5b      	subs	r3, r3, r1
 800910a:	42ab      	cmp	r3, r5
 800910c:	dcf2      	bgt.n	80090f4 <_printf_i+0x210>
 800910e:	e7eb      	b.n	80090e8 <_printf_i+0x204>
 8009110:	2500      	movs	r5, #0
 8009112:	f104 0619 	add.w	r6, r4, #25
 8009116:	e7f5      	b.n	8009104 <_printf_i+0x220>
 8009118:	0800b6d6 	.word	0x0800b6d6
 800911c:	0800b6e7 	.word	0x0800b6e7

08009120 <std>:
 8009120:	2300      	movs	r3, #0
 8009122:	b510      	push	{r4, lr}
 8009124:	4604      	mov	r4, r0
 8009126:	e9c0 3300 	strd	r3, r3, [r0]
 800912a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800912e:	6083      	str	r3, [r0, #8]
 8009130:	8181      	strh	r1, [r0, #12]
 8009132:	6643      	str	r3, [r0, #100]	@ 0x64
 8009134:	81c2      	strh	r2, [r0, #14]
 8009136:	6183      	str	r3, [r0, #24]
 8009138:	4619      	mov	r1, r3
 800913a:	2208      	movs	r2, #8
 800913c:	305c      	adds	r0, #92	@ 0x5c
 800913e:	f000 f916 	bl	800936e <memset>
 8009142:	4b0d      	ldr	r3, [pc, #52]	@ (8009178 <std+0x58>)
 8009144:	6263      	str	r3, [r4, #36]	@ 0x24
 8009146:	4b0d      	ldr	r3, [pc, #52]	@ (800917c <std+0x5c>)
 8009148:	62a3      	str	r3, [r4, #40]	@ 0x28
 800914a:	4b0d      	ldr	r3, [pc, #52]	@ (8009180 <std+0x60>)
 800914c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800914e:	4b0d      	ldr	r3, [pc, #52]	@ (8009184 <std+0x64>)
 8009150:	6323      	str	r3, [r4, #48]	@ 0x30
 8009152:	4b0d      	ldr	r3, [pc, #52]	@ (8009188 <std+0x68>)
 8009154:	6224      	str	r4, [r4, #32]
 8009156:	429c      	cmp	r4, r3
 8009158:	d006      	beq.n	8009168 <std+0x48>
 800915a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800915e:	4294      	cmp	r4, r2
 8009160:	d002      	beq.n	8009168 <std+0x48>
 8009162:	33d0      	adds	r3, #208	@ 0xd0
 8009164:	429c      	cmp	r4, r3
 8009166:	d105      	bne.n	8009174 <std+0x54>
 8009168:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800916c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009170:	f000 b9d8 	b.w	8009524 <__retarget_lock_init_recursive>
 8009174:	bd10      	pop	{r4, pc}
 8009176:	bf00      	nop
 8009178:	080092e9 	.word	0x080092e9
 800917c:	0800930b 	.word	0x0800930b
 8009180:	08009343 	.word	0x08009343
 8009184:	08009367 	.word	0x08009367
 8009188:	200047f0 	.word	0x200047f0

0800918c <stdio_exit_handler>:
 800918c:	4a02      	ldr	r2, [pc, #8]	@ (8009198 <stdio_exit_handler+0xc>)
 800918e:	4903      	ldr	r1, [pc, #12]	@ (800919c <stdio_exit_handler+0x10>)
 8009190:	4803      	ldr	r0, [pc, #12]	@ (80091a0 <stdio_exit_handler+0x14>)
 8009192:	f000 b869 	b.w	8009268 <_fwalk_sglue>
 8009196:	bf00      	nop
 8009198:	20000068 	.word	0x20000068
 800919c:	0800aea5 	.word	0x0800aea5
 80091a0:	20000078 	.word	0x20000078

080091a4 <cleanup_stdio>:
 80091a4:	6841      	ldr	r1, [r0, #4]
 80091a6:	4b0c      	ldr	r3, [pc, #48]	@ (80091d8 <cleanup_stdio+0x34>)
 80091a8:	4299      	cmp	r1, r3
 80091aa:	b510      	push	{r4, lr}
 80091ac:	4604      	mov	r4, r0
 80091ae:	d001      	beq.n	80091b4 <cleanup_stdio+0x10>
 80091b0:	f001 fe78 	bl	800aea4 <_fflush_r>
 80091b4:	68a1      	ldr	r1, [r4, #8]
 80091b6:	4b09      	ldr	r3, [pc, #36]	@ (80091dc <cleanup_stdio+0x38>)
 80091b8:	4299      	cmp	r1, r3
 80091ba:	d002      	beq.n	80091c2 <cleanup_stdio+0x1e>
 80091bc:	4620      	mov	r0, r4
 80091be:	f001 fe71 	bl	800aea4 <_fflush_r>
 80091c2:	68e1      	ldr	r1, [r4, #12]
 80091c4:	4b06      	ldr	r3, [pc, #24]	@ (80091e0 <cleanup_stdio+0x3c>)
 80091c6:	4299      	cmp	r1, r3
 80091c8:	d004      	beq.n	80091d4 <cleanup_stdio+0x30>
 80091ca:	4620      	mov	r0, r4
 80091cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091d0:	f001 be68 	b.w	800aea4 <_fflush_r>
 80091d4:	bd10      	pop	{r4, pc}
 80091d6:	bf00      	nop
 80091d8:	200047f0 	.word	0x200047f0
 80091dc:	20004858 	.word	0x20004858
 80091e0:	200048c0 	.word	0x200048c0

080091e4 <global_stdio_init.part.0>:
 80091e4:	b510      	push	{r4, lr}
 80091e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009214 <global_stdio_init.part.0+0x30>)
 80091e8:	4c0b      	ldr	r4, [pc, #44]	@ (8009218 <global_stdio_init.part.0+0x34>)
 80091ea:	4a0c      	ldr	r2, [pc, #48]	@ (800921c <global_stdio_init.part.0+0x38>)
 80091ec:	601a      	str	r2, [r3, #0]
 80091ee:	4620      	mov	r0, r4
 80091f0:	2200      	movs	r2, #0
 80091f2:	2104      	movs	r1, #4
 80091f4:	f7ff ff94 	bl	8009120 <std>
 80091f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80091fc:	2201      	movs	r2, #1
 80091fe:	2109      	movs	r1, #9
 8009200:	f7ff ff8e 	bl	8009120 <std>
 8009204:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009208:	2202      	movs	r2, #2
 800920a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800920e:	2112      	movs	r1, #18
 8009210:	f7ff bf86 	b.w	8009120 <std>
 8009214:	20004928 	.word	0x20004928
 8009218:	200047f0 	.word	0x200047f0
 800921c:	0800918d 	.word	0x0800918d

08009220 <__sfp_lock_acquire>:
 8009220:	4801      	ldr	r0, [pc, #4]	@ (8009228 <__sfp_lock_acquire+0x8>)
 8009222:	f000 b980 	b.w	8009526 <__retarget_lock_acquire_recursive>
 8009226:	bf00      	nop
 8009228:	20004931 	.word	0x20004931

0800922c <__sfp_lock_release>:
 800922c:	4801      	ldr	r0, [pc, #4]	@ (8009234 <__sfp_lock_release+0x8>)
 800922e:	f000 b97b 	b.w	8009528 <__retarget_lock_release_recursive>
 8009232:	bf00      	nop
 8009234:	20004931 	.word	0x20004931

08009238 <__sinit>:
 8009238:	b510      	push	{r4, lr}
 800923a:	4604      	mov	r4, r0
 800923c:	f7ff fff0 	bl	8009220 <__sfp_lock_acquire>
 8009240:	6a23      	ldr	r3, [r4, #32]
 8009242:	b11b      	cbz	r3, 800924c <__sinit+0x14>
 8009244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009248:	f7ff bff0 	b.w	800922c <__sfp_lock_release>
 800924c:	4b04      	ldr	r3, [pc, #16]	@ (8009260 <__sinit+0x28>)
 800924e:	6223      	str	r3, [r4, #32]
 8009250:	4b04      	ldr	r3, [pc, #16]	@ (8009264 <__sinit+0x2c>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1f5      	bne.n	8009244 <__sinit+0xc>
 8009258:	f7ff ffc4 	bl	80091e4 <global_stdio_init.part.0>
 800925c:	e7f2      	b.n	8009244 <__sinit+0xc>
 800925e:	bf00      	nop
 8009260:	080091a5 	.word	0x080091a5
 8009264:	20004928 	.word	0x20004928

08009268 <_fwalk_sglue>:
 8009268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800926c:	4607      	mov	r7, r0
 800926e:	4688      	mov	r8, r1
 8009270:	4614      	mov	r4, r2
 8009272:	2600      	movs	r6, #0
 8009274:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009278:	f1b9 0901 	subs.w	r9, r9, #1
 800927c:	d505      	bpl.n	800928a <_fwalk_sglue+0x22>
 800927e:	6824      	ldr	r4, [r4, #0]
 8009280:	2c00      	cmp	r4, #0
 8009282:	d1f7      	bne.n	8009274 <_fwalk_sglue+0xc>
 8009284:	4630      	mov	r0, r6
 8009286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800928a:	89ab      	ldrh	r3, [r5, #12]
 800928c:	2b01      	cmp	r3, #1
 800928e:	d907      	bls.n	80092a0 <_fwalk_sglue+0x38>
 8009290:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009294:	3301      	adds	r3, #1
 8009296:	d003      	beq.n	80092a0 <_fwalk_sglue+0x38>
 8009298:	4629      	mov	r1, r5
 800929a:	4638      	mov	r0, r7
 800929c:	47c0      	blx	r8
 800929e:	4306      	orrs	r6, r0
 80092a0:	3568      	adds	r5, #104	@ 0x68
 80092a2:	e7e9      	b.n	8009278 <_fwalk_sglue+0x10>

080092a4 <siprintf>:
 80092a4:	b40e      	push	{r1, r2, r3}
 80092a6:	b510      	push	{r4, lr}
 80092a8:	b09d      	sub	sp, #116	@ 0x74
 80092aa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80092ac:	9002      	str	r0, [sp, #8]
 80092ae:	9006      	str	r0, [sp, #24]
 80092b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80092b4:	480a      	ldr	r0, [pc, #40]	@ (80092e0 <siprintf+0x3c>)
 80092b6:	9107      	str	r1, [sp, #28]
 80092b8:	9104      	str	r1, [sp, #16]
 80092ba:	490a      	ldr	r1, [pc, #40]	@ (80092e4 <siprintf+0x40>)
 80092bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80092c0:	9105      	str	r1, [sp, #20]
 80092c2:	2400      	movs	r4, #0
 80092c4:	a902      	add	r1, sp, #8
 80092c6:	6800      	ldr	r0, [r0, #0]
 80092c8:	9301      	str	r3, [sp, #4]
 80092ca:	941b      	str	r4, [sp, #108]	@ 0x6c
 80092cc:	f001 fc6a 	bl	800aba4 <_svfiprintf_r>
 80092d0:	9b02      	ldr	r3, [sp, #8]
 80092d2:	701c      	strb	r4, [r3, #0]
 80092d4:	b01d      	add	sp, #116	@ 0x74
 80092d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092da:	b003      	add	sp, #12
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	20000074 	.word	0x20000074
 80092e4:	ffff0208 	.word	0xffff0208

080092e8 <__sread>:
 80092e8:	b510      	push	{r4, lr}
 80092ea:	460c      	mov	r4, r1
 80092ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092f0:	f000 f8ca 	bl	8009488 <_read_r>
 80092f4:	2800      	cmp	r0, #0
 80092f6:	bfab      	itete	ge
 80092f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80092fa:	89a3      	ldrhlt	r3, [r4, #12]
 80092fc:	181b      	addge	r3, r3, r0
 80092fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009302:	bfac      	ite	ge
 8009304:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009306:	81a3      	strhlt	r3, [r4, #12]
 8009308:	bd10      	pop	{r4, pc}

0800930a <__swrite>:
 800930a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800930e:	461f      	mov	r7, r3
 8009310:	898b      	ldrh	r3, [r1, #12]
 8009312:	05db      	lsls	r3, r3, #23
 8009314:	4605      	mov	r5, r0
 8009316:	460c      	mov	r4, r1
 8009318:	4616      	mov	r6, r2
 800931a:	d505      	bpl.n	8009328 <__swrite+0x1e>
 800931c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009320:	2302      	movs	r3, #2
 8009322:	2200      	movs	r2, #0
 8009324:	f000 f89e 	bl	8009464 <_lseek_r>
 8009328:	89a3      	ldrh	r3, [r4, #12]
 800932a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800932e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009332:	81a3      	strh	r3, [r4, #12]
 8009334:	4632      	mov	r2, r6
 8009336:	463b      	mov	r3, r7
 8009338:	4628      	mov	r0, r5
 800933a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800933e:	f000 b8b5 	b.w	80094ac <_write_r>

08009342 <__sseek>:
 8009342:	b510      	push	{r4, lr}
 8009344:	460c      	mov	r4, r1
 8009346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800934a:	f000 f88b 	bl	8009464 <_lseek_r>
 800934e:	1c43      	adds	r3, r0, #1
 8009350:	89a3      	ldrh	r3, [r4, #12]
 8009352:	bf15      	itete	ne
 8009354:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009356:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800935a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800935e:	81a3      	strheq	r3, [r4, #12]
 8009360:	bf18      	it	ne
 8009362:	81a3      	strhne	r3, [r4, #12]
 8009364:	bd10      	pop	{r4, pc}

08009366 <__sclose>:
 8009366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800936a:	f000 b80d 	b.w	8009388 <_close_r>

0800936e <memset>:
 800936e:	4402      	add	r2, r0
 8009370:	4603      	mov	r3, r0
 8009372:	4293      	cmp	r3, r2
 8009374:	d100      	bne.n	8009378 <memset+0xa>
 8009376:	4770      	bx	lr
 8009378:	f803 1b01 	strb.w	r1, [r3], #1
 800937c:	e7f9      	b.n	8009372 <memset+0x4>
	...

08009380 <_localeconv_r>:
 8009380:	4800      	ldr	r0, [pc, #0]	@ (8009384 <_localeconv_r+0x4>)
 8009382:	4770      	bx	lr
 8009384:	200001b4 	.word	0x200001b4

08009388 <_close_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4d06      	ldr	r5, [pc, #24]	@ (80093a4 <_close_r+0x1c>)
 800938c:	2300      	movs	r3, #0
 800938e:	4604      	mov	r4, r0
 8009390:	4608      	mov	r0, r1
 8009392:	602b      	str	r3, [r5, #0]
 8009394:	f7f8 fe3c 	bl	8002010 <_close>
 8009398:	1c43      	adds	r3, r0, #1
 800939a:	d102      	bne.n	80093a2 <_close_r+0x1a>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	b103      	cbz	r3, 80093a2 <_close_r+0x1a>
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	bd38      	pop	{r3, r4, r5, pc}
 80093a4:	2000492c 	.word	0x2000492c

080093a8 <_reclaim_reent>:
 80093a8:	4b2d      	ldr	r3, [pc, #180]	@ (8009460 <_reclaim_reent+0xb8>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4283      	cmp	r3, r0
 80093ae:	b570      	push	{r4, r5, r6, lr}
 80093b0:	4604      	mov	r4, r0
 80093b2:	d053      	beq.n	800945c <_reclaim_reent+0xb4>
 80093b4:	69c3      	ldr	r3, [r0, #28]
 80093b6:	b31b      	cbz	r3, 8009400 <_reclaim_reent+0x58>
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	b163      	cbz	r3, 80093d6 <_reclaim_reent+0x2e>
 80093bc:	2500      	movs	r5, #0
 80093be:	69e3      	ldr	r3, [r4, #28]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	5959      	ldr	r1, [r3, r5]
 80093c4:	b9b1      	cbnz	r1, 80093f4 <_reclaim_reent+0x4c>
 80093c6:	3504      	adds	r5, #4
 80093c8:	2d80      	cmp	r5, #128	@ 0x80
 80093ca:	d1f8      	bne.n	80093be <_reclaim_reent+0x16>
 80093cc:	69e3      	ldr	r3, [r4, #28]
 80093ce:	4620      	mov	r0, r4
 80093d0:	68d9      	ldr	r1, [r3, #12]
 80093d2:	f000 ff11 	bl	800a1f8 <_free_r>
 80093d6:	69e3      	ldr	r3, [r4, #28]
 80093d8:	6819      	ldr	r1, [r3, #0]
 80093da:	b111      	cbz	r1, 80093e2 <_reclaim_reent+0x3a>
 80093dc:	4620      	mov	r0, r4
 80093de:	f000 ff0b 	bl	800a1f8 <_free_r>
 80093e2:	69e3      	ldr	r3, [r4, #28]
 80093e4:	689d      	ldr	r5, [r3, #8]
 80093e6:	b15d      	cbz	r5, 8009400 <_reclaim_reent+0x58>
 80093e8:	4629      	mov	r1, r5
 80093ea:	4620      	mov	r0, r4
 80093ec:	682d      	ldr	r5, [r5, #0]
 80093ee:	f000 ff03 	bl	800a1f8 <_free_r>
 80093f2:	e7f8      	b.n	80093e6 <_reclaim_reent+0x3e>
 80093f4:	680e      	ldr	r6, [r1, #0]
 80093f6:	4620      	mov	r0, r4
 80093f8:	f000 fefe 	bl	800a1f8 <_free_r>
 80093fc:	4631      	mov	r1, r6
 80093fe:	e7e1      	b.n	80093c4 <_reclaim_reent+0x1c>
 8009400:	6961      	ldr	r1, [r4, #20]
 8009402:	b111      	cbz	r1, 800940a <_reclaim_reent+0x62>
 8009404:	4620      	mov	r0, r4
 8009406:	f000 fef7 	bl	800a1f8 <_free_r>
 800940a:	69e1      	ldr	r1, [r4, #28]
 800940c:	b111      	cbz	r1, 8009414 <_reclaim_reent+0x6c>
 800940e:	4620      	mov	r0, r4
 8009410:	f000 fef2 	bl	800a1f8 <_free_r>
 8009414:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009416:	b111      	cbz	r1, 800941e <_reclaim_reent+0x76>
 8009418:	4620      	mov	r0, r4
 800941a:	f000 feed 	bl	800a1f8 <_free_r>
 800941e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009420:	b111      	cbz	r1, 8009428 <_reclaim_reent+0x80>
 8009422:	4620      	mov	r0, r4
 8009424:	f000 fee8 	bl	800a1f8 <_free_r>
 8009428:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800942a:	b111      	cbz	r1, 8009432 <_reclaim_reent+0x8a>
 800942c:	4620      	mov	r0, r4
 800942e:	f000 fee3 	bl	800a1f8 <_free_r>
 8009432:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009434:	b111      	cbz	r1, 800943c <_reclaim_reent+0x94>
 8009436:	4620      	mov	r0, r4
 8009438:	f000 fede 	bl	800a1f8 <_free_r>
 800943c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800943e:	b111      	cbz	r1, 8009446 <_reclaim_reent+0x9e>
 8009440:	4620      	mov	r0, r4
 8009442:	f000 fed9 	bl	800a1f8 <_free_r>
 8009446:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009448:	b111      	cbz	r1, 8009450 <_reclaim_reent+0xa8>
 800944a:	4620      	mov	r0, r4
 800944c:	f000 fed4 	bl	800a1f8 <_free_r>
 8009450:	6a23      	ldr	r3, [r4, #32]
 8009452:	b11b      	cbz	r3, 800945c <_reclaim_reent+0xb4>
 8009454:	4620      	mov	r0, r4
 8009456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800945a:	4718      	bx	r3
 800945c:	bd70      	pop	{r4, r5, r6, pc}
 800945e:	bf00      	nop
 8009460:	20000074 	.word	0x20000074

08009464 <_lseek_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	4d07      	ldr	r5, [pc, #28]	@ (8009484 <_lseek_r+0x20>)
 8009468:	4604      	mov	r4, r0
 800946a:	4608      	mov	r0, r1
 800946c:	4611      	mov	r1, r2
 800946e:	2200      	movs	r2, #0
 8009470:	602a      	str	r2, [r5, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	f7f8 fdf3 	bl	800205e <_lseek>
 8009478:	1c43      	adds	r3, r0, #1
 800947a:	d102      	bne.n	8009482 <_lseek_r+0x1e>
 800947c:	682b      	ldr	r3, [r5, #0]
 800947e:	b103      	cbz	r3, 8009482 <_lseek_r+0x1e>
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	bd38      	pop	{r3, r4, r5, pc}
 8009484:	2000492c 	.word	0x2000492c

08009488 <_read_r>:
 8009488:	b538      	push	{r3, r4, r5, lr}
 800948a:	4d07      	ldr	r5, [pc, #28]	@ (80094a8 <_read_r+0x20>)
 800948c:	4604      	mov	r4, r0
 800948e:	4608      	mov	r0, r1
 8009490:	4611      	mov	r1, r2
 8009492:	2200      	movs	r2, #0
 8009494:	602a      	str	r2, [r5, #0]
 8009496:	461a      	mov	r2, r3
 8009498:	f7f8 fd81 	bl	8001f9e <_read>
 800949c:	1c43      	adds	r3, r0, #1
 800949e:	d102      	bne.n	80094a6 <_read_r+0x1e>
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	b103      	cbz	r3, 80094a6 <_read_r+0x1e>
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	bd38      	pop	{r3, r4, r5, pc}
 80094a8:	2000492c 	.word	0x2000492c

080094ac <_write_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4d07      	ldr	r5, [pc, #28]	@ (80094cc <_write_r+0x20>)
 80094b0:	4604      	mov	r4, r0
 80094b2:	4608      	mov	r0, r1
 80094b4:	4611      	mov	r1, r2
 80094b6:	2200      	movs	r2, #0
 80094b8:	602a      	str	r2, [r5, #0]
 80094ba:	461a      	mov	r2, r3
 80094bc:	f7f8 fd8c 	bl	8001fd8 <_write>
 80094c0:	1c43      	adds	r3, r0, #1
 80094c2:	d102      	bne.n	80094ca <_write_r+0x1e>
 80094c4:	682b      	ldr	r3, [r5, #0]
 80094c6:	b103      	cbz	r3, 80094ca <_write_r+0x1e>
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	bd38      	pop	{r3, r4, r5, pc}
 80094cc:	2000492c 	.word	0x2000492c

080094d0 <__errno>:
 80094d0:	4b01      	ldr	r3, [pc, #4]	@ (80094d8 <__errno+0x8>)
 80094d2:	6818      	ldr	r0, [r3, #0]
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	20000074 	.word	0x20000074

080094dc <__libc_init_array>:
 80094dc:	b570      	push	{r4, r5, r6, lr}
 80094de:	4d0d      	ldr	r5, [pc, #52]	@ (8009514 <__libc_init_array+0x38>)
 80094e0:	4c0d      	ldr	r4, [pc, #52]	@ (8009518 <__libc_init_array+0x3c>)
 80094e2:	1b64      	subs	r4, r4, r5
 80094e4:	10a4      	asrs	r4, r4, #2
 80094e6:	2600      	movs	r6, #0
 80094e8:	42a6      	cmp	r6, r4
 80094ea:	d109      	bne.n	8009500 <__libc_init_array+0x24>
 80094ec:	4d0b      	ldr	r5, [pc, #44]	@ (800951c <__libc_init_array+0x40>)
 80094ee:	4c0c      	ldr	r4, [pc, #48]	@ (8009520 <__libc_init_array+0x44>)
 80094f0:	f002 f868 	bl	800b5c4 <_init>
 80094f4:	1b64      	subs	r4, r4, r5
 80094f6:	10a4      	asrs	r4, r4, #2
 80094f8:	2600      	movs	r6, #0
 80094fa:	42a6      	cmp	r6, r4
 80094fc:	d105      	bne.n	800950a <__libc_init_array+0x2e>
 80094fe:	bd70      	pop	{r4, r5, r6, pc}
 8009500:	f855 3b04 	ldr.w	r3, [r5], #4
 8009504:	4798      	blx	r3
 8009506:	3601      	adds	r6, #1
 8009508:	e7ee      	b.n	80094e8 <__libc_init_array+0xc>
 800950a:	f855 3b04 	ldr.w	r3, [r5], #4
 800950e:	4798      	blx	r3
 8009510:	3601      	adds	r6, #1
 8009512:	e7f2      	b.n	80094fa <__libc_init_array+0x1e>
 8009514:	0800ba44 	.word	0x0800ba44
 8009518:	0800ba44 	.word	0x0800ba44
 800951c:	0800ba44 	.word	0x0800ba44
 8009520:	0800ba48 	.word	0x0800ba48

08009524 <__retarget_lock_init_recursive>:
 8009524:	4770      	bx	lr

08009526 <__retarget_lock_acquire_recursive>:
 8009526:	4770      	bx	lr

08009528 <__retarget_lock_release_recursive>:
 8009528:	4770      	bx	lr

0800952a <memcpy>:
 800952a:	440a      	add	r2, r1
 800952c:	4291      	cmp	r1, r2
 800952e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009532:	d100      	bne.n	8009536 <memcpy+0xc>
 8009534:	4770      	bx	lr
 8009536:	b510      	push	{r4, lr}
 8009538:	f811 4b01 	ldrb.w	r4, [r1], #1
 800953c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009540:	4291      	cmp	r1, r2
 8009542:	d1f9      	bne.n	8009538 <memcpy+0xe>
 8009544:	bd10      	pop	{r4, pc}

08009546 <quorem>:
 8009546:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954a:	6903      	ldr	r3, [r0, #16]
 800954c:	690c      	ldr	r4, [r1, #16]
 800954e:	42a3      	cmp	r3, r4
 8009550:	4607      	mov	r7, r0
 8009552:	db7e      	blt.n	8009652 <quorem+0x10c>
 8009554:	3c01      	subs	r4, #1
 8009556:	f101 0814 	add.w	r8, r1, #20
 800955a:	00a3      	lsls	r3, r4, #2
 800955c:	f100 0514 	add.w	r5, r0, #20
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009566:	9301      	str	r3, [sp, #4]
 8009568:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800956c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009570:	3301      	adds	r3, #1
 8009572:	429a      	cmp	r2, r3
 8009574:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009578:	fbb2 f6f3 	udiv	r6, r2, r3
 800957c:	d32e      	bcc.n	80095dc <quorem+0x96>
 800957e:	f04f 0a00 	mov.w	sl, #0
 8009582:	46c4      	mov	ip, r8
 8009584:	46ae      	mov	lr, r5
 8009586:	46d3      	mov	fp, sl
 8009588:	f85c 3b04 	ldr.w	r3, [ip], #4
 800958c:	b298      	uxth	r0, r3
 800958e:	fb06 a000 	mla	r0, r6, r0, sl
 8009592:	0c02      	lsrs	r2, r0, #16
 8009594:	0c1b      	lsrs	r3, r3, #16
 8009596:	fb06 2303 	mla	r3, r6, r3, r2
 800959a:	f8de 2000 	ldr.w	r2, [lr]
 800959e:	b280      	uxth	r0, r0
 80095a0:	b292      	uxth	r2, r2
 80095a2:	1a12      	subs	r2, r2, r0
 80095a4:	445a      	add	r2, fp
 80095a6:	f8de 0000 	ldr.w	r0, [lr]
 80095aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80095b4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80095b8:	b292      	uxth	r2, r2
 80095ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80095be:	45e1      	cmp	r9, ip
 80095c0:	f84e 2b04 	str.w	r2, [lr], #4
 80095c4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80095c8:	d2de      	bcs.n	8009588 <quorem+0x42>
 80095ca:	9b00      	ldr	r3, [sp, #0]
 80095cc:	58eb      	ldr	r3, [r5, r3]
 80095ce:	b92b      	cbnz	r3, 80095dc <quorem+0x96>
 80095d0:	9b01      	ldr	r3, [sp, #4]
 80095d2:	3b04      	subs	r3, #4
 80095d4:	429d      	cmp	r5, r3
 80095d6:	461a      	mov	r2, r3
 80095d8:	d32f      	bcc.n	800963a <quorem+0xf4>
 80095da:	613c      	str	r4, [r7, #16]
 80095dc:	4638      	mov	r0, r7
 80095de:	f001 f97d 	bl	800a8dc <__mcmp>
 80095e2:	2800      	cmp	r0, #0
 80095e4:	db25      	blt.n	8009632 <quorem+0xec>
 80095e6:	4629      	mov	r1, r5
 80095e8:	2000      	movs	r0, #0
 80095ea:	f858 2b04 	ldr.w	r2, [r8], #4
 80095ee:	f8d1 c000 	ldr.w	ip, [r1]
 80095f2:	fa1f fe82 	uxth.w	lr, r2
 80095f6:	fa1f f38c 	uxth.w	r3, ip
 80095fa:	eba3 030e 	sub.w	r3, r3, lr
 80095fe:	4403      	add	r3, r0
 8009600:	0c12      	lsrs	r2, r2, #16
 8009602:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009606:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800960a:	b29b      	uxth	r3, r3
 800960c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009610:	45c1      	cmp	r9, r8
 8009612:	f841 3b04 	str.w	r3, [r1], #4
 8009616:	ea4f 4022 	mov.w	r0, r2, asr #16
 800961a:	d2e6      	bcs.n	80095ea <quorem+0xa4>
 800961c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009620:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009624:	b922      	cbnz	r2, 8009630 <quorem+0xea>
 8009626:	3b04      	subs	r3, #4
 8009628:	429d      	cmp	r5, r3
 800962a:	461a      	mov	r2, r3
 800962c:	d30b      	bcc.n	8009646 <quorem+0x100>
 800962e:	613c      	str	r4, [r7, #16]
 8009630:	3601      	adds	r6, #1
 8009632:	4630      	mov	r0, r6
 8009634:	b003      	add	sp, #12
 8009636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963a:	6812      	ldr	r2, [r2, #0]
 800963c:	3b04      	subs	r3, #4
 800963e:	2a00      	cmp	r2, #0
 8009640:	d1cb      	bne.n	80095da <quorem+0x94>
 8009642:	3c01      	subs	r4, #1
 8009644:	e7c6      	b.n	80095d4 <quorem+0x8e>
 8009646:	6812      	ldr	r2, [r2, #0]
 8009648:	3b04      	subs	r3, #4
 800964a:	2a00      	cmp	r2, #0
 800964c:	d1ef      	bne.n	800962e <quorem+0xe8>
 800964e:	3c01      	subs	r4, #1
 8009650:	e7ea      	b.n	8009628 <quorem+0xe2>
 8009652:	2000      	movs	r0, #0
 8009654:	e7ee      	b.n	8009634 <quorem+0xee>
	...

08009658 <_dtoa_r>:
 8009658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800965c:	69c7      	ldr	r7, [r0, #28]
 800965e:	b097      	sub	sp, #92	@ 0x5c
 8009660:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009664:	ec55 4b10 	vmov	r4, r5, d0
 8009668:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800966a:	9107      	str	r1, [sp, #28]
 800966c:	4681      	mov	r9, r0
 800966e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009670:	9311      	str	r3, [sp, #68]	@ 0x44
 8009672:	b97f      	cbnz	r7, 8009694 <_dtoa_r+0x3c>
 8009674:	2010      	movs	r0, #16
 8009676:	f000 fe09 	bl	800a28c <malloc>
 800967a:	4602      	mov	r2, r0
 800967c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009680:	b920      	cbnz	r0, 800968c <_dtoa_r+0x34>
 8009682:	4ba9      	ldr	r3, [pc, #676]	@ (8009928 <_dtoa_r+0x2d0>)
 8009684:	21ef      	movs	r1, #239	@ 0xef
 8009686:	48a9      	ldr	r0, [pc, #676]	@ (800992c <_dtoa_r+0x2d4>)
 8009688:	f001 fc5e 	bl	800af48 <__assert_func>
 800968c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009690:	6007      	str	r7, [r0, #0]
 8009692:	60c7      	str	r7, [r0, #12]
 8009694:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009698:	6819      	ldr	r1, [r3, #0]
 800969a:	b159      	cbz	r1, 80096b4 <_dtoa_r+0x5c>
 800969c:	685a      	ldr	r2, [r3, #4]
 800969e:	604a      	str	r2, [r1, #4]
 80096a0:	2301      	movs	r3, #1
 80096a2:	4093      	lsls	r3, r2
 80096a4:	608b      	str	r3, [r1, #8]
 80096a6:	4648      	mov	r0, r9
 80096a8:	f000 fee6 	bl	800a478 <_Bfree>
 80096ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80096b0:	2200      	movs	r2, #0
 80096b2:	601a      	str	r2, [r3, #0]
 80096b4:	1e2b      	subs	r3, r5, #0
 80096b6:	bfb9      	ittee	lt
 80096b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80096bc:	9305      	strlt	r3, [sp, #20]
 80096be:	2300      	movge	r3, #0
 80096c0:	6033      	strge	r3, [r6, #0]
 80096c2:	9f05      	ldr	r7, [sp, #20]
 80096c4:	4b9a      	ldr	r3, [pc, #616]	@ (8009930 <_dtoa_r+0x2d8>)
 80096c6:	bfbc      	itt	lt
 80096c8:	2201      	movlt	r2, #1
 80096ca:	6032      	strlt	r2, [r6, #0]
 80096cc:	43bb      	bics	r3, r7
 80096ce:	d112      	bne.n	80096f6 <_dtoa_r+0x9e>
 80096d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80096d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80096d6:	6013      	str	r3, [r2, #0]
 80096d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80096dc:	4323      	orrs	r3, r4
 80096de:	f000 855a 	beq.w	800a196 <_dtoa_r+0xb3e>
 80096e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80096e4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009944 <_dtoa_r+0x2ec>
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f000 855c 	beq.w	800a1a6 <_dtoa_r+0xb4e>
 80096ee:	f10a 0303 	add.w	r3, sl, #3
 80096f2:	f000 bd56 	b.w	800a1a2 <_dtoa_r+0xb4a>
 80096f6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80096fa:	2200      	movs	r2, #0
 80096fc:	ec51 0b17 	vmov	r0, r1, d7
 8009700:	2300      	movs	r3, #0
 8009702:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009706:	f7f7 f9df 	bl	8000ac8 <__aeabi_dcmpeq>
 800970a:	4680      	mov	r8, r0
 800970c:	b158      	cbz	r0, 8009726 <_dtoa_r+0xce>
 800970e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009710:	2301      	movs	r3, #1
 8009712:	6013      	str	r3, [r2, #0]
 8009714:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009716:	b113      	cbz	r3, 800971e <_dtoa_r+0xc6>
 8009718:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800971a:	4b86      	ldr	r3, [pc, #536]	@ (8009934 <_dtoa_r+0x2dc>)
 800971c:	6013      	str	r3, [r2, #0]
 800971e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009948 <_dtoa_r+0x2f0>
 8009722:	f000 bd40 	b.w	800a1a6 <_dtoa_r+0xb4e>
 8009726:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800972a:	aa14      	add	r2, sp, #80	@ 0x50
 800972c:	a915      	add	r1, sp, #84	@ 0x54
 800972e:	4648      	mov	r0, r9
 8009730:	f001 f984 	bl	800aa3c <__d2b>
 8009734:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009738:	9002      	str	r0, [sp, #8]
 800973a:	2e00      	cmp	r6, #0
 800973c:	d078      	beq.n	8009830 <_dtoa_r+0x1d8>
 800973e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009740:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009748:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800974c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009750:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009754:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009758:	4619      	mov	r1, r3
 800975a:	2200      	movs	r2, #0
 800975c:	4b76      	ldr	r3, [pc, #472]	@ (8009938 <_dtoa_r+0x2e0>)
 800975e:	f7f6 fd93 	bl	8000288 <__aeabi_dsub>
 8009762:	a36b      	add	r3, pc, #428	@ (adr r3, 8009910 <_dtoa_r+0x2b8>)
 8009764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009768:	f7f6 ff46 	bl	80005f8 <__aeabi_dmul>
 800976c:	a36a      	add	r3, pc, #424	@ (adr r3, 8009918 <_dtoa_r+0x2c0>)
 800976e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009772:	f7f6 fd8b 	bl	800028c <__adddf3>
 8009776:	4604      	mov	r4, r0
 8009778:	4630      	mov	r0, r6
 800977a:	460d      	mov	r5, r1
 800977c:	f7f6 fed2 	bl	8000524 <__aeabi_i2d>
 8009780:	a367      	add	r3, pc, #412	@ (adr r3, 8009920 <_dtoa_r+0x2c8>)
 8009782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009786:	f7f6 ff37 	bl	80005f8 <__aeabi_dmul>
 800978a:	4602      	mov	r2, r0
 800978c:	460b      	mov	r3, r1
 800978e:	4620      	mov	r0, r4
 8009790:	4629      	mov	r1, r5
 8009792:	f7f6 fd7b 	bl	800028c <__adddf3>
 8009796:	4604      	mov	r4, r0
 8009798:	460d      	mov	r5, r1
 800979a:	f7f7 f9dd 	bl	8000b58 <__aeabi_d2iz>
 800979e:	2200      	movs	r2, #0
 80097a0:	4607      	mov	r7, r0
 80097a2:	2300      	movs	r3, #0
 80097a4:	4620      	mov	r0, r4
 80097a6:	4629      	mov	r1, r5
 80097a8:	f7f7 f998 	bl	8000adc <__aeabi_dcmplt>
 80097ac:	b140      	cbz	r0, 80097c0 <_dtoa_r+0x168>
 80097ae:	4638      	mov	r0, r7
 80097b0:	f7f6 feb8 	bl	8000524 <__aeabi_i2d>
 80097b4:	4622      	mov	r2, r4
 80097b6:	462b      	mov	r3, r5
 80097b8:	f7f7 f986 	bl	8000ac8 <__aeabi_dcmpeq>
 80097bc:	b900      	cbnz	r0, 80097c0 <_dtoa_r+0x168>
 80097be:	3f01      	subs	r7, #1
 80097c0:	2f16      	cmp	r7, #22
 80097c2:	d852      	bhi.n	800986a <_dtoa_r+0x212>
 80097c4:	4b5d      	ldr	r3, [pc, #372]	@ (800993c <_dtoa_r+0x2e4>)
 80097c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80097ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80097d2:	f7f7 f983 	bl	8000adc <__aeabi_dcmplt>
 80097d6:	2800      	cmp	r0, #0
 80097d8:	d049      	beq.n	800986e <_dtoa_r+0x216>
 80097da:	3f01      	subs	r7, #1
 80097dc:	2300      	movs	r3, #0
 80097de:	9310      	str	r3, [sp, #64]	@ 0x40
 80097e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80097e2:	1b9b      	subs	r3, r3, r6
 80097e4:	1e5a      	subs	r2, r3, #1
 80097e6:	bf45      	ittet	mi
 80097e8:	f1c3 0301 	rsbmi	r3, r3, #1
 80097ec:	9300      	strmi	r3, [sp, #0]
 80097ee:	2300      	movpl	r3, #0
 80097f0:	2300      	movmi	r3, #0
 80097f2:	9206      	str	r2, [sp, #24]
 80097f4:	bf54      	ite	pl
 80097f6:	9300      	strpl	r3, [sp, #0]
 80097f8:	9306      	strmi	r3, [sp, #24]
 80097fa:	2f00      	cmp	r7, #0
 80097fc:	db39      	blt.n	8009872 <_dtoa_r+0x21a>
 80097fe:	9b06      	ldr	r3, [sp, #24]
 8009800:	970d      	str	r7, [sp, #52]	@ 0x34
 8009802:	443b      	add	r3, r7
 8009804:	9306      	str	r3, [sp, #24]
 8009806:	2300      	movs	r3, #0
 8009808:	9308      	str	r3, [sp, #32]
 800980a:	9b07      	ldr	r3, [sp, #28]
 800980c:	2b09      	cmp	r3, #9
 800980e:	d863      	bhi.n	80098d8 <_dtoa_r+0x280>
 8009810:	2b05      	cmp	r3, #5
 8009812:	bfc4      	itt	gt
 8009814:	3b04      	subgt	r3, #4
 8009816:	9307      	strgt	r3, [sp, #28]
 8009818:	9b07      	ldr	r3, [sp, #28]
 800981a:	f1a3 0302 	sub.w	r3, r3, #2
 800981e:	bfcc      	ite	gt
 8009820:	2400      	movgt	r4, #0
 8009822:	2401      	movle	r4, #1
 8009824:	2b03      	cmp	r3, #3
 8009826:	d863      	bhi.n	80098f0 <_dtoa_r+0x298>
 8009828:	e8df f003 	tbb	[pc, r3]
 800982c:	2b375452 	.word	0x2b375452
 8009830:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009834:	441e      	add	r6, r3
 8009836:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800983a:	2b20      	cmp	r3, #32
 800983c:	bfc1      	itttt	gt
 800983e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009842:	409f      	lslgt	r7, r3
 8009844:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009848:	fa24 f303 	lsrgt.w	r3, r4, r3
 800984c:	bfd6      	itet	le
 800984e:	f1c3 0320 	rsble	r3, r3, #32
 8009852:	ea47 0003 	orrgt.w	r0, r7, r3
 8009856:	fa04 f003 	lslle.w	r0, r4, r3
 800985a:	f7f6 fe53 	bl	8000504 <__aeabi_ui2d>
 800985e:	2201      	movs	r2, #1
 8009860:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009864:	3e01      	subs	r6, #1
 8009866:	9212      	str	r2, [sp, #72]	@ 0x48
 8009868:	e776      	b.n	8009758 <_dtoa_r+0x100>
 800986a:	2301      	movs	r3, #1
 800986c:	e7b7      	b.n	80097de <_dtoa_r+0x186>
 800986e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009870:	e7b6      	b.n	80097e0 <_dtoa_r+0x188>
 8009872:	9b00      	ldr	r3, [sp, #0]
 8009874:	1bdb      	subs	r3, r3, r7
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	427b      	negs	r3, r7
 800987a:	9308      	str	r3, [sp, #32]
 800987c:	2300      	movs	r3, #0
 800987e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009880:	e7c3      	b.n	800980a <_dtoa_r+0x1b2>
 8009882:	2301      	movs	r3, #1
 8009884:	9309      	str	r3, [sp, #36]	@ 0x24
 8009886:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009888:	eb07 0b03 	add.w	fp, r7, r3
 800988c:	f10b 0301 	add.w	r3, fp, #1
 8009890:	2b01      	cmp	r3, #1
 8009892:	9303      	str	r3, [sp, #12]
 8009894:	bfb8      	it	lt
 8009896:	2301      	movlt	r3, #1
 8009898:	e006      	b.n	80098a8 <_dtoa_r+0x250>
 800989a:	2301      	movs	r3, #1
 800989c:	9309      	str	r3, [sp, #36]	@ 0x24
 800989e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	dd28      	ble.n	80098f6 <_dtoa_r+0x29e>
 80098a4:	469b      	mov	fp, r3
 80098a6:	9303      	str	r3, [sp, #12]
 80098a8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80098ac:	2100      	movs	r1, #0
 80098ae:	2204      	movs	r2, #4
 80098b0:	f102 0514 	add.w	r5, r2, #20
 80098b4:	429d      	cmp	r5, r3
 80098b6:	d926      	bls.n	8009906 <_dtoa_r+0x2ae>
 80098b8:	6041      	str	r1, [r0, #4]
 80098ba:	4648      	mov	r0, r9
 80098bc:	f000 fd9c 	bl	800a3f8 <_Balloc>
 80098c0:	4682      	mov	sl, r0
 80098c2:	2800      	cmp	r0, #0
 80098c4:	d142      	bne.n	800994c <_dtoa_r+0x2f4>
 80098c6:	4b1e      	ldr	r3, [pc, #120]	@ (8009940 <_dtoa_r+0x2e8>)
 80098c8:	4602      	mov	r2, r0
 80098ca:	f240 11af 	movw	r1, #431	@ 0x1af
 80098ce:	e6da      	b.n	8009686 <_dtoa_r+0x2e>
 80098d0:	2300      	movs	r3, #0
 80098d2:	e7e3      	b.n	800989c <_dtoa_r+0x244>
 80098d4:	2300      	movs	r3, #0
 80098d6:	e7d5      	b.n	8009884 <_dtoa_r+0x22c>
 80098d8:	2401      	movs	r4, #1
 80098da:	2300      	movs	r3, #0
 80098dc:	9307      	str	r3, [sp, #28]
 80098de:	9409      	str	r4, [sp, #36]	@ 0x24
 80098e0:	f04f 3bff 	mov.w	fp, #4294967295
 80098e4:	2200      	movs	r2, #0
 80098e6:	f8cd b00c 	str.w	fp, [sp, #12]
 80098ea:	2312      	movs	r3, #18
 80098ec:	920c      	str	r2, [sp, #48]	@ 0x30
 80098ee:	e7db      	b.n	80098a8 <_dtoa_r+0x250>
 80098f0:	2301      	movs	r3, #1
 80098f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80098f4:	e7f4      	b.n	80098e0 <_dtoa_r+0x288>
 80098f6:	f04f 0b01 	mov.w	fp, #1
 80098fa:	f8cd b00c 	str.w	fp, [sp, #12]
 80098fe:	465b      	mov	r3, fp
 8009900:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009904:	e7d0      	b.n	80098a8 <_dtoa_r+0x250>
 8009906:	3101      	adds	r1, #1
 8009908:	0052      	lsls	r2, r2, #1
 800990a:	e7d1      	b.n	80098b0 <_dtoa_r+0x258>
 800990c:	f3af 8000 	nop.w
 8009910:	636f4361 	.word	0x636f4361
 8009914:	3fd287a7 	.word	0x3fd287a7
 8009918:	8b60c8b3 	.word	0x8b60c8b3
 800991c:	3fc68a28 	.word	0x3fc68a28
 8009920:	509f79fb 	.word	0x509f79fb
 8009924:	3fd34413 	.word	0x3fd34413
 8009928:	0800b705 	.word	0x0800b705
 800992c:	0800b71c 	.word	0x0800b71c
 8009930:	7ff00000 	.word	0x7ff00000
 8009934:	0800b6d5 	.word	0x0800b6d5
 8009938:	3ff80000 	.word	0x3ff80000
 800993c:	0800b870 	.word	0x0800b870
 8009940:	0800b774 	.word	0x0800b774
 8009944:	0800b701 	.word	0x0800b701
 8009948:	0800b6d4 	.word	0x0800b6d4
 800994c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009950:	6018      	str	r0, [r3, #0]
 8009952:	9b03      	ldr	r3, [sp, #12]
 8009954:	2b0e      	cmp	r3, #14
 8009956:	f200 80a1 	bhi.w	8009a9c <_dtoa_r+0x444>
 800995a:	2c00      	cmp	r4, #0
 800995c:	f000 809e 	beq.w	8009a9c <_dtoa_r+0x444>
 8009960:	2f00      	cmp	r7, #0
 8009962:	dd33      	ble.n	80099cc <_dtoa_r+0x374>
 8009964:	4b9c      	ldr	r3, [pc, #624]	@ (8009bd8 <_dtoa_r+0x580>)
 8009966:	f007 020f 	and.w	r2, r7, #15
 800996a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800996e:	ed93 7b00 	vldr	d7, [r3]
 8009972:	05f8      	lsls	r0, r7, #23
 8009974:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009978:	ea4f 1427 	mov.w	r4, r7, asr #4
 800997c:	d516      	bpl.n	80099ac <_dtoa_r+0x354>
 800997e:	4b97      	ldr	r3, [pc, #604]	@ (8009bdc <_dtoa_r+0x584>)
 8009980:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009984:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009988:	f7f6 ff60 	bl	800084c <__aeabi_ddiv>
 800998c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009990:	f004 040f 	and.w	r4, r4, #15
 8009994:	2603      	movs	r6, #3
 8009996:	4d91      	ldr	r5, [pc, #580]	@ (8009bdc <_dtoa_r+0x584>)
 8009998:	b954      	cbnz	r4, 80099b0 <_dtoa_r+0x358>
 800999a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800999e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099a2:	f7f6 ff53 	bl	800084c <__aeabi_ddiv>
 80099a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099aa:	e028      	b.n	80099fe <_dtoa_r+0x3a6>
 80099ac:	2602      	movs	r6, #2
 80099ae:	e7f2      	b.n	8009996 <_dtoa_r+0x33e>
 80099b0:	07e1      	lsls	r1, r4, #31
 80099b2:	d508      	bpl.n	80099c6 <_dtoa_r+0x36e>
 80099b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80099b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80099bc:	f7f6 fe1c 	bl	80005f8 <__aeabi_dmul>
 80099c0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80099c4:	3601      	adds	r6, #1
 80099c6:	1064      	asrs	r4, r4, #1
 80099c8:	3508      	adds	r5, #8
 80099ca:	e7e5      	b.n	8009998 <_dtoa_r+0x340>
 80099cc:	f000 80af 	beq.w	8009b2e <_dtoa_r+0x4d6>
 80099d0:	427c      	negs	r4, r7
 80099d2:	4b81      	ldr	r3, [pc, #516]	@ (8009bd8 <_dtoa_r+0x580>)
 80099d4:	4d81      	ldr	r5, [pc, #516]	@ (8009bdc <_dtoa_r+0x584>)
 80099d6:	f004 020f 	and.w	r2, r4, #15
 80099da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80099e6:	f7f6 fe07 	bl	80005f8 <__aeabi_dmul>
 80099ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099ee:	1124      	asrs	r4, r4, #4
 80099f0:	2300      	movs	r3, #0
 80099f2:	2602      	movs	r6, #2
 80099f4:	2c00      	cmp	r4, #0
 80099f6:	f040 808f 	bne.w	8009b18 <_dtoa_r+0x4c0>
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d1d3      	bne.n	80099a6 <_dtoa_r+0x34e>
 80099fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a00:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f000 8094 	beq.w	8009b32 <_dtoa_r+0x4da>
 8009a0a:	4b75      	ldr	r3, [pc, #468]	@ (8009be0 <_dtoa_r+0x588>)
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	4620      	mov	r0, r4
 8009a10:	4629      	mov	r1, r5
 8009a12:	f7f7 f863 	bl	8000adc <__aeabi_dcmplt>
 8009a16:	2800      	cmp	r0, #0
 8009a18:	f000 808b 	beq.w	8009b32 <_dtoa_r+0x4da>
 8009a1c:	9b03      	ldr	r3, [sp, #12]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f000 8087 	beq.w	8009b32 <_dtoa_r+0x4da>
 8009a24:	f1bb 0f00 	cmp.w	fp, #0
 8009a28:	dd34      	ble.n	8009a94 <_dtoa_r+0x43c>
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	4b6d      	ldr	r3, [pc, #436]	@ (8009be4 <_dtoa_r+0x58c>)
 8009a2e:	2200      	movs	r2, #0
 8009a30:	4629      	mov	r1, r5
 8009a32:	f7f6 fde1 	bl	80005f8 <__aeabi_dmul>
 8009a36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a3a:	f107 38ff 	add.w	r8, r7, #4294967295
 8009a3e:	3601      	adds	r6, #1
 8009a40:	465c      	mov	r4, fp
 8009a42:	4630      	mov	r0, r6
 8009a44:	f7f6 fd6e 	bl	8000524 <__aeabi_i2d>
 8009a48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a4c:	f7f6 fdd4 	bl	80005f8 <__aeabi_dmul>
 8009a50:	4b65      	ldr	r3, [pc, #404]	@ (8009be8 <_dtoa_r+0x590>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	f7f6 fc1a 	bl	800028c <__adddf3>
 8009a58:	4605      	mov	r5, r0
 8009a5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009a5e:	2c00      	cmp	r4, #0
 8009a60:	d16a      	bne.n	8009b38 <_dtoa_r+0x4e0>
 8009a62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a66:	4b61      	ldr	r3, [pc, #388]	@ (8009bec <_dtoa_r+0x594>)
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f7f6 fc0d 	bl	8000288 <__aeabi_dsub>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	460b      	mov	r3, r1
 8009a72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a76:	462a      	mov	r2, r5
 8009a78:	4633      	mov	r3, r6
 8009a7a:	f7f7 f84d 	bl	8000b18 <__aeabi_dcmpgt>
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	f040 8298 	bne.w	8009fb4 <_dtoa_r+0x95c>
 8009a84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a88:	462a      	mov	r2, r5
 8009a8a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009a8e:	f7f7 f825 	bl	8000adc <__aeabi_dcmplt>
 8009a92:	bb38      	cbnz	r0, 8009ae4 <_dtoa_r+0x48c>
 8009a94:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009a98:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009a9c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f2c0 8157 	blt.w	8009d52 <_dtoa_r+0x6fa>
 8009aa4:	2f0e      	cmp	r7, #14
 8009aa6:	f300 8154 	bgt.w	8009d52 <_dtoa_r+0x6fa>
 8009aaa:	4b4b      	ldr	r3, [pc, #300]	@ (8009bd8 <_dtoa_r+0x580>)
 8009aac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009ab0:	ed93 7b00 	vldr	d7, [r3]
 8009ab4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	ed8d 7b00 	vstr	d7, [sp]
 8009abc:	f280 80e5 	bge.w	8009c8a <_dtoa_r+0x632>
 8009ac0:	9b03      	ldr	r3, [sp, #12]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f300 80e1 	bgt.w	8009c8a <_dtoa_r+0x632>
 8009ac8:	d10c      	bne.n	8009ae4 <_dtoa_r+0x48c>
 8009aca:	4b48      	ldr	r3, [pc, #288]	@ (8009bec <_dtoa_r+0x594>)
 8009acc:	2200      	movs	r2, #0
 8009ace:	ec51 0b17 	vmov	r0, r1, d7
 8009ad2:	f7f6 fd91 	bl	80005f8 <__aeabi_dmul>
 8009ad6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ada:	f7f7 f813 	bl	8000b04 <__aeabi_dcmpge>
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	f000 8266 	beq.w	8009fb0 <_dtoa_r+0x958>
 8009ae4:	2400      	movs	r4, #0
 8009ae6:	4625      	mov	r5, r4
 8009ae8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009aea:	4656      	mov	r6, sl
 8009aec:	ea6f 0803 	mvn.w	r8, r3
 8009af0:	2700      	movs	r7, #0
 8009af2:	4621      	mov	r1, r4
 8009af4:	4648      	mov	r0, r9
 8009af6:	f000 fcbf 	bl	800a478 <_Bfree>
 8009afa:	2d00      	cmp	r5, #0
 8009afc:	f000 80bd 	beq.w	8009c7a <_dtoa_r+0x622>
 8009b00:	b12f      	cbz	r7, 8009b0e <_dtoa_r+0x4b6>
 8009b02:	42af      	cmp	r7, r5
 8009b04:	d003      	beq.n	8009b0e <_dtoa_r+0x4b6>
 8009b06:	4639      	mov	r1, r7
 8009b08:	4648      	mov	r0, r9
 8009b0a:	f000 fcb5 	bl	800a478 <_Bfree>
 8009b0e:	4629      	mov	r1, r5
 8009b10:	4648      	mov	r0, r9
 8009b12:	f000 fcb1 	bl	800a478 <_Bfree>
 8009b16:	e0b0      	b.n	8009c7a <_dtoa_r+0x622>
 8009b18:	07e2      	lsls	r2, r4, #31
 8009b1a:	d505      	bpl.n	8009b28 <_dtoa_r+0x4d0>
 8009b1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b20:	f7f6 fd6a 	bl	80005f8 <__aeabi_dmul>
 8009b24:	3601      	adds	r6, #1
 8009b26:	2301      	movs	r3, #1
 8009b28:	1064      	asrs	r4, r4, #1
 8009b2a:	3508      	adds	r5, #8
 8009b2c:	e762      	b.n	80099f4 <_dtoa_r+0x39c>
 8009b2e:	2602      	movs	r6, #2
 8009b30:	e765      	b.n	80099fe <_dtoa_r+0x3a6>
 8009b32:	9c03      	ldr	r4, [sp, #12]
 8009b34:	46b8      	mov	r8, r7
 8009b36:	e784      	b.n	8009a42 <_dtoa_r+0x3ea>
 8009b38:	4b27      	ldr	r3, [pc, #156]	@ (8009bd8 <_dtoa_r+0x580>)
 8009b3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b44:	4454      	add	r4, sl
 8009b46:	2900      	cmp	r1, #0
 8009b48:	d054      	beq.n	8009bf4 <_dtoa_r+0x59c>
 8009b4a:	4929      	ldr	r1, [pc, #164]	@ (8009bf0 <_dtoa_r+0x598>)
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	f7f6 fe7d 	bl	800084c <__aeabi_ddiv>
 8009b52:	4633      	mov	r3, r6
 8009b54:	462a      	mov	r2, r5
 8009b56:	f7f6 fb97 	bl	8000288 <__aeabi_dsub>
 8009b5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009b5e:	4656      	mov	r6, sl
 8009b60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b64:	f7f6 fff8 	bl	8000b58 <__aeabi_d2iz>
 8009b68:	4605      	mov	r5, r0
 8009b6a:	f7f6 fcdb 	bl	8000524 <__aeabi_i2d>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b76:	f7f6 fb87 	bl	8000288 <__aeabi_dsub>
 8009b7a:	3530      	adds	r5, #48	@ 0x30
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	460b      	mov	r3, r1
 8009b80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009b84:	f806 5b01 	strb.w	r5, [r6], #1
 8009b88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009b8c:	f7f6 ffa6 	bl	8000adc <__aeabi_dcmplt>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	d172      	bne.n	8009c7a <_dtoa_r+0x622>
 8009b94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b98:	4911      	ldr	r1, [pc, #68]	@ (8009be0 <_dtoa_r+0x588>)
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	f7f6 fb74 	bl	8000288 <__aeabi_dsub>
 8009ba0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009ba4:	f7f6 ff9a 	bl	8000adc <__aeabi_dcmplt>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	f040 80b4 	bne.w	8009d16 <_dtoa_r+0x6be>
 8009bae:	42a6      	cmp	r6, r4
 8009bb0:	f43f af70 	beq.w	8009a94 <_dtoa_r+0x43c>
 8009bb4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8009be4 <_dtoa_r+0x58c>)
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f7f6 fd1c 	bl	80005f8 <__aeabi_dmul>
 8009bc0:	4b08      	ldr	r3, [pc, #32]	@ (8009be4 <_dtoa_r+0x58c>)
 8009bc2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bcc:	f7f6 fd14 	bl	80005f8 <__aeabi_dmul>
 8009bd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bd4:	e7c4      	b.n	8009b60 <_dtoa_r+0x508>
 8009bd6:	bf00      	nop
 8009bd8:	0800b870 	.word	0x0800b870
 8009bdc:	0800b848 	.word	0x0800b848
 8009be0:	3ff00000 	.word	0x3ff00000
 8009be4:	40240000 	.word	0x40240000
 8009be8:	401c0000 	.word	0x401c0000
 8009bec:	40140000 	.word	0x40140000
 8009bf0:	3fe00000 	.word	0x3fe00000
 8009bf4:	4631      	mov	r1, r6
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	f7f6 fcfe 	bl	80005f8 <__aeabi_dmul>
 8009bfc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009c00:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009c02:	4656      	mov	r6, sl
 8009c04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c08:	f7f6 ffa6 	bl	8000b58 <__aeabi_d2iz>
 8009c0c:	4605      	mov	r5, r0
 8009c0e:	f7f6 fc89 	bl	8000524 <__aeabi_i2d>
 8009c12:	4602      	mov	r2, r0
 8009c14:	460b      	mov	r3, r1
 8009c16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c1a:	f7f6 fb35 	bl	8000288 <__aeabi_dsub>
 8009c1e:	3530      	adds	r5, #48	@ 0x30
 8009c20:	f806 5b01 	strb.w	r5, [r6], #1
 8009c24:	4602      	mov	r2, r0
 8009c26:	460b      	mov	r3, r1
 8009c28:	42a6      	cmp	r6, r4
 8009c2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c2e:	f04f 0200 	mov.w	r2, #0
 8009c32:	d124      	bne.n	8009c7e <_dtoa_r+0x626>
 8009c34:	4baf      	ldr	r3, [pc, #700]	@ (8009ef4 <_dtoa_r+0x89c>)
 8009c36:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009c3a:	f7f6 fb27 	bl	800028c <__adddf3>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	460b      	mov	r3, r1
 8009c42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c46:	f7f6 ff67 	bl	8000b18 <__aeabi_dcmpgt>
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	d163      	bne.n	8009d16 <_dtoa_r+0x6be>
 8009c4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009c52:	49a8      	ldr	r1, [pc, #672]	@ (8009ef4 <_dtoa_r+0x89c>)
 8009c54:	2000      	movs	r0, #0
 8009c56:	f7f6 fb17 	bl	8000288 <__aeabi_dsub>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c62:	f7f6 ff3b 	bl	8000adc <__aeabi_dcmplt>
 8009c66:	2800      	cmp	r0, #0
 8009c68:	f43f af14 	beq.w	8009a94 <_dtoa_r+0x43c>
 8009c6c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009c6e:	1e73      	subs	r3, r6, #1
 8009c70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c72:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c76:	2b30      	cmp	r3, #48	@ 0x30
 8009c78:	d0f8      	beq.n	8009c6c <_dtoa_r+0x614>
 8009c7a:	4647      	mov	r7, r8
 8009c7c:	e03b      	b.n	8009cf6 <_dtoa_r+0x69e>
 8009c7e:	4b9e      	ldr	r3, [pc, #632]	@ (8009ef8 <_dtoa_r+0x8a0>)
 8009c80:	f7f6 fcba 	bl	80005f8 <__aeabi_dmul>
 8009c84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c88:	e7bc      	b.n	8009c04 <_dtoa_r+0x5ac>
 8009c8a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009c8e:	4656      	mov	r6, sl
 8009c90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c94:	4620      	mov	r0, r4
 8009c96:	4629      	mov	r1, r5
 8009c98:	f7f6 fdd8 	bl	800084c <__aeabi_ddiv>
 8009c9c:	f7f6 ff5c 	bl	8000b58 <__aeabi_d2iz>
 8009ca0:	4680      	mov	r8, r0
 8009ca2:	f7f6 fc3f 	bl	8000524 <__aeabi_i2d>
 8009ca6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009caa:	f7f6 fca5 	bl	80005f8 <__aeabi_dmul>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	4629      	mov	r1, r5
 8009cb6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009cba:	f7f6 fae5 	bl	8000288 <__aeabi_dsub>
 8009cbe:	f806 4b01 	strb.w	r4, [r6], #1
 8009cc2:	9d03      	ldr	r5, [sp, #12]
 8009cc4:	eba6 040a 	sub.w	r4, r6, sl
 8009cc8:	42a5      	cmp	r5, r4
 8009cca:	4602      	mov	r2, r0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	d133      	bne.n	8009d38 <_dtoa_r+0x6e0>
 8009cd0:	f7f6 fadc 	bl	800028c <__adddf3>
 8009cd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cd8:	4604      	mov	r4, r0
 8009cda:	460d      	mov	r5, r1
 8009cdc:	f7f6 ff1c 	bl	8000b18 <__aeabi_dcmpgt>
 8009ce0:	b9c0      	cbnz	r0, 8009d14 <_dtoa_r+0x6bc>
 8009ce2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	4629      	mov	r1, r5
 8009cea:	f7f6 feed 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cee:	b110      	cbz	r0, 8009cf6 <_dtoa_r+0x69e>
 8009cf0:	f018 0f01 	tst.w	r8, #1
 8009cf4:	d10e      	bne.n	8009d14 <_dtoa_r+0x6bc>
 8009cf6:	9902      	ldr	r1, [sp, #8]
 8009cf8:	4648      	mov	r0, r9
 8009cfa:	f000 fbbd 	bl	800a478 <_Bfree>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	7033      	strb	r3, [r6, #0]
 8009d02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009d04:	3701      	adds	r7, #1
 8009d06:	601f      	str	r7, [r3, #0]
 8009d08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f000 824b 	beq.w	800a1a6 <_dtoa_r+0xb4e>
 8009d10:	601e      	str	r6, [r3, #0]
 8009d12:	e248      	b.n	800a1a6 <_dtoa_r+0xb4e>
 8009d14:	46b8      	mov	r8, r7
 8009d16:	4633      	mov	r3, r6
 8009d18:	461e      	mov	r6, r3
 8009d1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d1e:	2a39      	cmp	r2, #57	@ 0x39
 8009d20:	d106      	bne.n	8009d30 <_dtoa_r+0x6d8>
 8009d22:	459a      	cmp	sl, r3
 8009d24:	d1f8      	bne.n	8009d18 <_dtoa_r+0x6c0>
 8009d26:	2230      	movs	r2, #48	@ 0x30
 8009d28:	f108 0801 	add.w	r8, r8, #1
 8009d2c:	f88a 2000 	strb.w	r2, [sl]
 8009d30:	781a      	ldrb	r2, [r3, #0]
 8009d32:	3201      	adds	r2, #1
 8009d34:	701a      	strb	r2, [r3, #0]
 8009d36:	e7a0      	b.n	8009c7a <_dtoa_r+0x622>
 8009d38:	4b6f      	ldr	r3, [pc, #444]	@ (8009ef8 <_dtoa_r+0x8a0>)
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f7f6 fc5c 	bl	80005f8 <__aeabi_dmul>
 8009d40:	2200      	movs	r2, #0
 8009d42:	2300      	movs	r3, #0
 8009d44:	4604      	mov	r4, r0
 8009d46:	460d      	mov	r5, r1
 8009d48:	f7f6 febe 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d09f      	beq.n	8009c90 <_dtoa_r+0x638>
 8009d50:	e7d1      	b.n	8009cf6 <_dtoa_r+0x69e>
 8009d52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d54:	2a00      	cmp	r2, #0
 8009d56:	f000 80ea 	beq.w	8009f2e <_dtoa_r+0x8d6>
 8009d5a:	9a07      	ldr	r2, [sp, #28]
 8009d5c:	2a01      	cmp	r2, #1
 8009d5e:	f300 80cd 	bgt.w	8009efc <_dtoa_r+0x8a4>
 8009d62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009d64:	2a00      	cmp	r2, #0
 8009d66:	f000 80c1 	beq.w	8009eec <_dtoa_r+0x894>
 8009d6a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009d6e:	9c08      	ldr	r4, [sp, #32]
 8009d70:	9e00      	ldr	r6, [sp, #0]
 8009d72:	9a00      	ldr	r2, [sp, #0]
 8009d74:	441a      	add	r2, r3
 8009d76:	9200      	str	r2, [sp, #0]
 8009d78:	9a06      	ldr	r2, [sp, #24]
 8009d7a:	2101      	movs	r1, #1
 8009d7c:	441a      	add	r2, r3
 8009d7e:	4648      	mov	r0, r9
 8009d80:	9206      	str	r2, [sp, #24]
 8009d82:	f000 fc2d 	bl	800a5e0 <__i2b>
 8009d86:	4605      	mov	r5, r0
 8009d88:	b166      	cbz	r6, 8009da4 <_dtoa_r+0x74c>
 8009d8a:	9b06      	ldr	r3, [sp, #24]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	dd09      	ble.n	8009da4 <_dtoa_r+0x74c>
 8009d90:	42b3      	cmp	r3, r6
 8009d92:	9a00      	ldr	r2, [sp, #0]
 8009d94:	bfa8      	it	ge
 8009d96:	4633      	movge	r3, r6
 8009d98:	1ad2      	subs	r2, r2, r3
 8009d9a:	9200      	str	r2, [sp, #0]
 8009d9c:	9a06      	ldr	r2, [sp, #24]
 8009d9e:	1af6      	subs	r6, r6, r3
 8009da0:	1ad3      	subs	r3, r2, r3
 8009da2:	9306      	str	r3, [sp, #24]
 8009da4:	9b08      	ldr	r3, [sp, #32]
 8009da6:	b30b      	cbz	r3, 8009dec <_dtoa_r+0x794>
 8009da8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f000 80c6 	beq.w	8009f3c <_dtoa_r+0x8e4>
 8009db0:	2c00      	cmp	r4, #0
 8009db2:	f000 80c0 	beq.w	8009f36 <_dtoa_r+0x8de>
 8009db6:	4629      	mov	r1, r5
 8009db8:	4622      	mov	r2, r4
 8009dba:	4648      	mov	r0, r9
 8009dbc:	f000 fcc8 	bl	800a750 <__pow5mult>
 8009dc0:	9a02      	ldr	r2, [sp, #8]
 8009dc2:	4601      	mov	r1, r0
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	4648      	mov	r0, r9
 8009dc8:	f000 fc20 	bl	800a60c <__multiply>
 8009dcc:	9902      	ldr	r1, [sp, #8]
 8009dce:	4680      	mov	r8, r0
 8009dd0:	4648      	mov	r0, r9
 8009dd2:	f000 fb51 	bl	800a478 <_Bfree>
 8009dd6:	9b08      	ldr	r3, [sp, #32]
 8009dd8:	1b1b      	subs	r3, r3, r4
 8009dda:	9308      	str	r3, [sp, #32]
 8009ddc:	f000 80b1 	beq.w	8009f42 <_dtoa_r+0x8ea>
 8009de0:	9a08      	ldr	r2, [sp, #32]
 8009de2:	4641      	mov	r1, r8
 8009de4:	4648      	mov	r0, r9
 8009de6:	f000 fcb3 	bl	800a750 <__pow5mult>
 8009dea:	9002      	str	r0, [sp, #8]
 8009dec:	2101      	movs	r1, #1
 8009dee:	4648      	mov	r0, r9
 8009df0:	f000 fbf6 	bl	800a5e0 <__i2b>
 8009df4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009df6:	4604      	mov	r4, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 81d8 	beq.w	800a1ae <_dtoa_r+0xb56>
 8009dfe:	461a      	mov	r2, r3
 8009e00:	4601      	mov	r1, r0
 8009e02:	4648      	mov	r0, r9
 8009e04:	f000 fca4 	bl	800a750 <__pow5mult>
 8009e08:	9b07      	ldr	r3, [sp, #28]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	f300 809f 	bgt.w	8009f50 <_dtoa_r+0x8f8>
 8009e12:	9b04      	ldr	r3, [sp, #16]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f040 8097 	bne.w	8009f48 <_dtoa_r+0x8f0>
 8009e1a:	9b05      	ldr	r3, [sp, #20]
 8009e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f040 8093 	bne.w	8009f4c <_dtoa_r+0x8f4>
 8009e26:	9b05      	ldr	r3, [sp, #20]
 8009e28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009e2c:	0d1b      	lsrs	r3, r3, #20
 8009e2e:	051b      	lsls	r3, r3, #20
 8009e30:	b133      	cbz	r3, 8009e40 <_dtoa_r+0x7e8>
 8009e32:	9b00      	ldr	r3, [sp, #0]
 8009e34:	3301      	adds	r3, #1
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	9b06      	ldr	r3, [sp, #24]
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	9306      	str	r3, [sp, #24]
 8009e3e:	2301      	movs	r3, #1
 8009e40:	9308      	str	r3, [sp, #32]
 8009e42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f000 81b8 	beq.w	800a1ba <_dtoa_r+0xb62>
 8009e4a:	6923      	ldr	r3, [r4, #16]
 8009e4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e50:	6918      	ldr	r0, [r3, #16]
 8009e52:	f000 fb79 	bl	800a548 <__hi0bits>
 8009e56:	f1c0 0020 	rsb	r0, r0, #32
 8009e5a:	9b06      	ldr	r3, [sp, #24]
 8009e5c:	4418      	add	r0, r3
 8009e5e:	f010 001f 	ands.w	r0, r0, #31
 8009e62:	f000 8082 	beq.w	8009f6a <_dtoa_r+0x912>
 8009e66:	f1c0 0320 	rsb	r3, r0, #32
 8009e6a:	2b04      	cmp	r3, #4
 8009e6c:	dd73      	ble.n	8009f56 <_dtoa_r+0x8fe>
 8009e6e:	9b00      	ldr	r3, [sp, #0]
 8009e70:	f1c0 001c 	rsb	r0, r0, #28
 8009e74:	4403      	add	r3, r0
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	9b06      	ldr	r3, [sp, #24]
 8009e7a:	4403      	add	r3, r0
 8009e7c:	4406      	add	r6, r0
 8009e7e:	9306      	str	r3, [sp, #24]
 8009e80:	9b00      	ldr	r3, [sp, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	dd05      	ble.n	8009e92 <_dtoa_r+0x83a>
 8009e86:	9902      	ldr	r1, [sp, #8]
 8009e88:	461a      	mov	r2, r3
 8009e8a:	4648      	mov	r0, r9
 8009e8c:	f000 fcba 	bl	800a804 <__lshift>
 8009e90:	9002      	str	r0, [sp, #8]
 8009e92:	9b06      	ldr	r3, [sp, #24]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	dd05      	ble.n	8009ea4 <_dtoa_r+0x84c>
 8009e98:	4621      	mov	r1, r4
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	4648      	mov	r0, r9
 8009e9e:	f000 fcb1 	bl	800a804 <__lshift>
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d061      	beq.n	8009f6e <_dtoa_r+0x916>
 8009eaa:	9802      	ldr	r0, [sp, #8]
 8009eac:	4621      	mov	r1, r4
 8009eae:	f000 fd15 	bl	800a8dc <__mcmp>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	da5b      	bge.n	8009f6e <_dtoa_r+0x916>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	9902      	ldr	r1, [sp, #8]
 8009eba:	220a      	movs	r2, #10
 8009ebc:	4648      	mov	r0, r9
 8009ebe:	f000 fafd 	bl	800a4bc <__multadd>
 8009ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ec4:	9002      	str	r0, [sp, #8]
 8009ec6:	f107 38ff 	add.w	r8, r7, #4294967295
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f000 8177 	beq.w	800a1be <_dtoa_r+0xb66>
 8009ed0:	4629      	mov	r1, r5
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	220a      	movs	r2, #10
 8009ed6:	4648      	mov	r0, r9
 8009ed8:	f000 faf0 	bl	800a4bc <__multadd>
 8009edc:	f1bb 0f00 	cmp.w	fp, #0
 8009ee0:	4605      	mov	r5, r0
 8009ee2:	dc6f      	bgt.n	8009fc4 <_dtoa_r+0x96c>
 8009ee4:	9b07      	ldr	r3, [sp, #28]
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	dc49      	bgt.n	8009f7e <_dtoa_r+0x926>
 8009eea:	e06b      	b.n	8009fc4 <_dtoa_r+0x96c>
 8009eec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009eee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009ef2:	e73c      	b.n	8009d6e <_dtoa_r+0x716>
 8009ef4:	3fe00000 	.word	0x3fe00000
 8009ef8:	40240000 	.word	0x40240000
 8009efc:	9b03      	ldr	r3, [sp, #12]
 8009efe:	1e5c      	subs	r4, r3, #1
 8009f00:	9b08      	ldr	r3, [sp, #32]
 8009f02:	42a3      	cmp	r3, r4
 8009f04:	db09      	blt.n	8009f1a <_dtoa_r+0x8c2>
 8009f06:	1b1c      	subs	r4, r3, r4
 8009f08:	9b03      	ldr	r3, [sp, #12]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	f6bf af30 	bge.w	8009d70 <_dtoa_r+0x718>
 8009f10:	9b00      	ldr	r3, [sp, #0]
 8009f12:	9a03      	ldr	r2, [sp, #12]
 8009f14:	1a9e      	subs	r6, r3, r2
 8009f16:	2300      	movs	r3, #0
 8009f18:	e72b      	b.n	8009d72 <_dtoa_r+0x71a>
 8009f1a:	9b08      	ldr	r3, [sp, #32]
 8009f1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f1e:	9408      	str	r4, [sp, #32]
 8009f20:	1ae3      	subs	r3, r4, r3
 8009f22:	441a      	add	r2, r3
 8009f24:	9e00      	ldr	r6, [sp, #0]
 8009f26:	9b03      	ldr	r3, [sp, #12]
 8009f28:	920d      	str	r2, [sp, #52]	@ 0x34
 8009f2a:	2400      	movs	r4, #0
 8009f2c:	e721      	b.n	8009d72 <_dtoa_r+0x71a>
 8009f2e:	9c08      	ldr	r4, [sp, #32]
 8009f30:	9e00      	ldr	r6, [sp, #0]
 8009f32:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009f34:	e728      	b.n	8009d88 <_dtoa_r+0x730>
 8009f36:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009f3a:	e751      	b.n	8009de0 <_dtoa_r+0x788>
 8009f3c:	9a08      	ldr	r2, [sp, #32]
 8009f3e:	9902      	ldr	r1, [sp, #8]
 8009f40:	e750      	b.n	8009de4 <_dtoa_r+0x78c>
 8009f42:	f8cd 8008 	str.w	r8, [sp, #8]
 8009f46:	e751      	b.n	8009dec <_dtoa_r+0x794>
 8009f48:	2300      	movs	r3, #0
 8009f4a:	e779      	b.n	8009e40 <_dtoa_r+0x7e8>
 8009f4c:	9b04      	ldr	r3, [sp, #16]
 8009f4e:	e777      	b.n	8009e40 <_dtoa_r+0x7e8>
 8009f50:	2300      	movs	r3, #0
 8009f52:	9308      	str	r3, [sp, #32]
 8009f54:	e779      	b.n	8009e4a <_dtoa_r+0x7f2>
 8009f56:	d093      	beq.n	8009e80 <_dtoa_r+0x828>
 8009f58:	9a00      	ldr	r2, [sp, #0]
 8009f5a:	331c      	adds	r3, #28
 8009f5c:	441a      	add	r2, r3
 8009f5e:	9200      	str	r2, [sp, #0]
 8009f60:	9a06      	ldr	r2, [sp, #24]
 8009f62:	441a      	add	r2, r3
 8009f64:	441e      	add	r6, r3
 8009f66:	9206      	str	r2, [sp, #24]
 8009f68:	e78a      	b.n	8009e80 <_dtoa_r+0x828>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	e7f4      	b.n	8009f58 <_dtoa_r+0x900>
 8009f6e:	9b03      	ldr	r3, [sp, #12]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	46b8      	mov	r8, r7
 8009f74:	dc20      	bgt.n	8009fb8 <_dtoa_r+0x960>
 8009f76:	469b      	mov	fp, r3
 8009f78:	9b07      	ldr	r3, [sp, #28]
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	dd1e      	ble.n	8009fbc <_dtoa_r+0x964>
 8009f7e:	f1bb 0f00 	cmp.w	fp, #0
 8009f82:	f47f adb1 	bne.w	8009ae8 <_dtoa_r+0x490>
 8009f86:	4621      	mov	r1, r4
 8009f88:	465b      	mov	r3, fp
 8009f8a:	2205      	movs	r2, #5
 8009f8c:	4648      	mov	r0, r9
 8009f8e:	f000 fa95 	bl	800a4bc <__multadd>
 8009f92:	4601      	mov	r1, r0
 8009f94:	4604      	mov	r4, r0
 8009f96:	9802      	ldr	r0, [sp, #8]
 8009f98:	f000 fca0 	bl	800a8dc <__mcmp>
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	f77f ada3 	ble.w	8009ae8 <_dtoa_r+0x490>
 8009fa2:	4656      	mov	r6, sl
 8009fa4:	2331      	movs	r3, #49	@ 0x31
 8009fa6:	f806 3b01 	strb.w	r3, [r6], #1
 8009faa:	f108 0801 	add.w	r8, r8, #1
 8009fae:	e59f      	b.n	8009af0 <_dtoa_r+0x498>
 8009fb0:	9c03      	ldr	r4, [sp, #12]
 8009fb2:	46b8      	mov	r8, r7
 8009fb4:	4625      	mov	r5, r4
 8009fb6:	e7f4      	b.n	8009fa2 <_dtoa_r+0x94a>
 8009fb8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009fbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	f000 8101 	beq.w	800a1c6 <_dtoa_r+0xb6e>
 8009fc4:	2e00      	cmp	r6, #0
 8009fc6:	dd05      	ble.n	8009fd4 <_dtoa_r+0x97c>
 8009fc8:	4629      	mov	r1, r5
 8009fca:	4632      	mov	r2, r6
 8009fcc:	4648      	mov	r0, r9
 8009fce:	f000 fc19 	bl	800a804 <__lshift>
 8009fd2:	4605      	mov	r5, r0
 8009fd4:	9b08      	ldr	r3, [sp, #32]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d05c      	beq.n	800a094 <_dtoa_r+0xa3c>
 8009fda:	6869      	ldr	r1, [r5, #4]
 8009fdc:	4648      	mov	r0, r9
 8009fde:	f000 fa0b 	bl	800a3f8 <_Balloc>
 8009fe2:	4606      	mov	r6, r0
 8009fe4:	b928      	cbnz	r0, 8009ff2 <_dtoa_r+0x99a>
 8009fe6:	4b82      	ldr	r3, [pc, #520]	@ (800a1f0 <_dtoa_r+0xb98>)
 8009fe8:	4602      	mov	r2, r0
 8009fea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009fee:	f7ff bb4a 	b.w	8009686 <_dtoa_r+0x2e>
 8009ff2:	692a      	ldr	r2, [r5, #16]
 8009ff4:	3202      	adds	r2, #2
 8009ff6:	0092      	lsls	r2, r2, #2
 8009ff8:	f105 010c 	add.w	r1, r5, #12
 8009ffc:	300c      	adds	r0, #12
 8009ffe:	f7ff fa94 	bl	800952a <memcpy>
 800a002:	2201      	movs	r2, #1
 800a004:	4631      	mov	r1, r6
 800a006:	4648      	mov	r0, r9
 800a008:	f000 fbfc 	bl	800a804 <__lshift>
 800a00c:	f10a 0301 	add.w	r3, sl, #1
 800a010:	9300      	str	r3, [sp, #0]
 800a012:	eb0a 030b 	add.w	r3, sl, fp
 800a016:	9308      	str	r3, [sp, #32]
 800a018:	9b04      	ldr	r3, [sp, #16]
 800a01a:	f003 0301 	and.w	r3, r3, #1
 800a01e:	462f      	mov	r7, r5
 800a020:	9306      	str	r3, [sp, #24]
 800a022:	4605      	mov	r5, r0
 800a024:	9b00      	ldr	r3, [sp, #0]
 800a026:	9802      	ldr	r0, [sp, #8]
 800a028:	4621      	mov	r1, r4
 800a02a:	f103 3bff 	add.w	fp, r3, #4294967295
 800a02e:	f7ff fa8a 	bl	8009546 <quorem>
 800a032:	4603      	mov	r3, r0
 800a034:	3330      	adds	r3, #48	@ 0x30
 800a036:	9003      	str	r0, [sp, #12]
 800a038:	4639      	mov	r1, r7
 800a03a:	9802      	ldr	r0, [sp, #8]
 800a03c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a03e:	f000 fc4d 	bl	800a8dc <__mcmp>
 800a042:	462a      	mov	r2, r5
 800a044:	9004      	str	r0, [sp, #16]
 800a046:	4621      	mov	r1, r4
 800a048:	4648      	mov	r0, r9
 800a04a:	f000 fc63 	bl	800a914 <__mdiff>
 800a04e:	68c2      	ldr	r2, [r0, #12]
 800a050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a052:	4606      	mov	r6, r0
 800a054:	bb02      	cbnz	r2, 800a098 <_dtoa_r+0xa40>
 800a056:	4601      	mov	r1, r0
 800a058:	9802      	ldr	r0, [sp, #8]
 800a05a:	f000 fc3f 	bl	800a8dc <__mcmp>
 800a05e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a060:	4602      	mov	r2, r0
 800a062:	4631      	mov	r1, r6
 800a064:	4648      	mov	r0, r9
 800a066:	920c      	str	r2, [sp, #48]	@ 0x30
 800a068:	9309      	str	r3, [sp, #36]	@ 0x24
 800a06a:	f000 fa05 	bl	800a478 <_Bfree>
 800a06e:	9b07      	ldr	r3, [sp, #28]
 800a070:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a072:	9e00      	ldr	r6, [sp, #0]
 800a074:	ea42 0103 	orr.w	r1, r2, r3
 800a078:	9b06      	ldr	r3, [sp, #24]
 800a07a:	4319      	orrs	r1, r3
 800a07c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a07e:	d10d      	bne.n	800a09c <_dtoa_r+0xa44>
 800a080:	2b39      	cmp	r3, #57	@ 0x39
 800a082:	d027      	beq.n	800a0d4 <_dtoa_r+0xa7c>
 800a084:	9a04      	ldr	r2, [sp, #16]
 800a086:	2a00      	cmp	r2, #0
 800a088:	dd01      	ble.n	800a08e <_dtoa_r+0xa36>
 800a08a:	9b03      	ldr	r3, [sp, #12]
 800a08c:	3331      	adds	r3, #49	@ 0x31
 800a08e:	f88b 3000 	strb.w	r3, [fp]
 800a092:	e52e      	b.n	8009af2 <_dtoa_r+0x49a>
 800a094:	4628      	mov	r0, r5
 800a096:	e7b9      	b.n	800a00c <_dtoa_r+0x9b4>
 800a098:	2201      	movs	r2, #1
 800a09a:	e7e2      	b.n	800a062 <_dtoa_r+0xa0a>
 800a09c:	9904      	ldr	r1, [sp, #16]
 800a09e:	2900      	cmp	r1, #0
 800a0a0:	db04      	blt.n	800a0ac <_dtoa_r+0xa54>
 800a0a2:	9807      	ldr	r0, [sp, #28]
 800a0a4:	4301      	orrs	r1, r0
 800a0a6:	9806      	ldr	r0, [sp, #24]
 800a0a8:	4301      	orrs	r1, r0
 800a0aa:	d120      	bne.n	800a0ee <_dtoa_r+0xa96>
 800a0ac:	2a00      	cmp	r2, #0
 800a0ae:	ddee      	ble.n	800a08e <_dtoa_r+0xa36>
 800a0b0:	9902      	ldr	r1, [sp, #8]
 800a0b2:	9300      	str	r3, [sp, #0]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	4648      	mov	r0, r9
 800a0b8:	f000 fba4 	bl	800a804 <__lshift>
 800a0bc:	4621      	mov	r1, r4
 800a0be:	9002      	str	r0, [sp, #8]
 800a0c0:	f000 fc0c 	bl	800a8dc <__mcmp>
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	9b00      	ldr	r3, [sp, #0]
 800a0c8:	dc02      	bgt.n	800a0d0 <_dtoa_r+0xa78>
 800a0ca:	d1e0      	bne.n	800a08e <_dtoa_r+0xa36>
 800a0cc:	07da      	lsls	r2, r3, #31
 800a0ce:	d5de      	bpl.n	800a08e <_dtoa_r+0xa36>
 800a0d0:	2b39      	cmp	r3, #57	@ 0x39
 800a0d2:	d1da      	bne.n	800a08a <_dtoa_r+0xa32>
 800a0d4:	2339      	movs	r3, #57	@ 0x39
 800a0d6:	f88b 3000 	strb.w	r3, [fp]
 800a0da:	4633      	mov	r3, r6
 800a0dc:	461e      	mov	r6, r3
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a0e4:	2a39      	cmp	r2, #57	@ 0x39
 800a0e6:	d04e      	beq.n	800a186 <_dtoa_r+0xb2e>
 800a0e8:	3201      	adds	r2, #1
 800a0ea:	701a      	strb	r2, [r3, #0]
 800a0ec:	e501      	b.n	8009af2 <_dtoa_r+0x49a>
 800a0ee:	2a00      	cmp	r2, #0
 800a0f0:	dd03      	ble.n	800a0fa <_dtoa_r+0xaa2>
 800a0f2:	2b39      	cmp	r3, #57	@ 0x39
 800a0f4:	d0ee      	beq.n	800a0d4 <_dtoa_r+0xa7c>
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	e7c9      	b.n	800a08e <_dtoa_r+0xa36>
 800a0fa:	9a00      	ldr	r2, [sp, #0]
 800a0fc:	9908      	ldr	r1, [sp, #32]
 800a0fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a102:	428a      	cmp	r2, r1
 800a104:	d028      	beq.n	800a158 <_dtoa_r+0xb00>
 800a106:	9902      	ldr	r1, [sp, #8]
 800a108:	2300      	movs	r3, #0
 800a10a:	220a      	movs	r2, #10
 800a10c:	4648      	mov	r0, r9
 800a10e:	f000 f9d5 	bl	800a4bc <__multadd>
 800a112:	42af      	cmp	r7, r5
 800a114:	9002      	str	r0, [sp, #8]
 800a116:	f04f 0300 	mov.w	r3, #0
 800a11a:	f04f 020a 	mov.w	r2, #10
 800a11e:	4639      	mov	r1, r7
 800a120:	4648      	mov	r0, r9
 800a122:	d107      	bne.n	800a134 <_dtoa_r+0xadc>
 800a124:	f000 f9ca 	bl	800a4bc <__multadd>
 800a128:	4607      	mov	r7, r0
 800a12a:	4605      	mov	r5, r0
 800a12c:	9b00      	ldr	r3, [sp, #0]
 800a12e:	3301      	adds	r3, #1
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	e777      	b.n	800a024 <_dtoa_r+0x9cc>
 800a134:	f000 f9c2 	bl	800a4bc <__multadd>
 800a138:	4629      	mov	r1, r5
 800a13a:	4607      	mov	r7, r0
 800a13c:	2300      	movs	r3, #0
 800a13e:	220a      	movs	r2, #10
 800a140:	4648      	mov	r0, r9
 800a142:	f000 f9bb 	bl	800a4bc <__multadd>
 800a146:	4605      	mov	r5, r0
 800a148:	e7f0      	b.n	800a12c <_dtoa_r+0xad4>
 800a14a:	f1bb 0f00 	cmp.w	fp, #0
 800a14e:	bfcc      	ite	gt
 800a150:	465e      	movgt	r6, fp
 800a152:	2601      	movle	r6, #1
 800a154:	4456      	add	r6, sl
 800a156:	2700      	movs	r7, #0
 800a158:	9902      	ldr	r1, [sp, #8]
 800a15a:	9300      	str	r3, [sp, #0]
 800a15c:	2201      	movs	r2, #1
 800a15e:	4648      	mov	r0, r9
 800a160:	f000 fb50 	bl	800a804 <__lshift>
 800a164:	4621      	mov	r1, r4
 800a166:	9002      	str	r0, [sp, #8]
 800a168:	f000 fbb8 	bl	800a8dc <__mcmp>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	dcb4      	bgt.n	800a0da <_dtoa_r+0xa82>
 800a170:	d102      	bne.n	800a178 <_dtoa_r+0xb20>
 800a172:	9b00      	ldr	r3, [sp, #0]
 800a174:	07db      	lsls	r3, r3, #31
 800a176:	d4b0      	bmi.n	800a0da <_dtoa_r+0xa82>
 800a178:	4633      	mov	r3, r6
 800a17a:	461e      	mov	r6, r3
 800a17c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a180:	2a30      	cmp	r2, #48	@ 0x30
 800a182:	d0fa      	beq.n	800a17a <_dtoa_r+0xb22>
 800a184:	e4b5      	b.n	8009af2 <_dtoa_r+0x49a>
 800a186:	459a      	cmp	sl, r3
 800a188:	d1a8      	bne.n	800a0dc <_dtoa_r+0xa84>
 800a18a:	2331      	movs	r3, #49	@ 0x31
 800a18c:	f108 0801 	add.w	r8, r8, #1
 800a190:	f88a 3000 	strb.w	r3, [sl]
 800a194:	e4ad      	b.n	8009af2 <_dtoa_r+0x49a>
 800a196:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a198:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a1f4 <_dtoa_r+0xb9c>
 800a19c:	b11b      	cbz	r3, 800a1a6 <_dtoa_r+0xb4e>
 800a19e:	f10a 0308 	add.w	r3, sl, #8
 800a1a2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a1a4:	6013      	str	r3, [r2, #0]
 800a1a6:	4650      	mov	r0, sl
 800a1a8:	b017      	add	sp, #92	@ 0x5c
 800a1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ae:	9b07      	ldr	r3, [sp, #28]
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	f77f ae2e 	ble.w	8009e12 <_dtoa_r+0x7ba>
 800a1b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a1b8:	9308      	str	r3, [sp, #32]
 800a1ba:	2001      	movs	r0, #1
 800a1bc:	e64d      	b.n	8009e5a <_dtoa_r+0x802>
 800a1be:	f1bb 0f00 	cmp.w	fp, #0
 800a1c2:	f77f aed9 	ble.w	8009f78 <_dtoa_r+0x920>
 800a1c6:	4656      	mov	r6, sl
 800a1c8:	9802      	ldr	r0, [sp, #8]
 800a1ca:	4621      	mov	r1, r4
 800a1cc:	f7ff f9bb 	bl	8009546 <quorem>
 800a1d0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a1d4:	f806 3b01 	strb.w	r3, [r6], #1
 800a1d8:	eba6 020a 	sub.w	r2, r6, sl
 800a1dc:	4593      	cmp	fp, r2
 800a1de:	ddb4      	ble.n	800a14a <_dtoa_r+0xaf2>
 800a1e0:	9902      	ldr	r1, [sp, #8]
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	220a      	movs	r2, #10
 800a1e6:	4648      	mov	r0, r9
 800a1e8:	f000 f968 	bl	800a4bc <__multadd>
 800a1ec:	9002      	str	r0, [sp, #8]
 800a1ee:	e7eb      	b.n	800a1c8 <_dtoa_r+0xb70>
 800a1f0:	0800b774 	.word	0x0800b774
 800a1f4:	0800b6f8 	.word	0x0800b6f8

0800a1f8 <_free_r>:
 800a1f8:	b538      	push	{r3, r4, r5, lr}
 800a1fa:	4605      	mov	r5, r0
 800a1fc:	2900      	cmp	r1, #0
 800a1fe:	d041      	beq.n	800a284 <_free_r+0x8c>
 800a200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a204:	1f0c      	subs	r4, r1, #4
 800a206:	2b00      	cmp	r3, #0
 800a208:	bfb8      	it	lt
 800a20a:	18e4      	addlt	r4, r4, r3
 800a20c:	f000 f8e8 	bl	800a3e0 <__malloc_lock>
 800a210:	4a1d      	ldr	r2, [pc, #116]	@ (800a288 <_free_r+0x90>)
 800a212:	6813      	ldr	r3, [r2, #0]
 800a214:	b933      	cbnz	r3, 800a224 <_free_r+0x2c>
 800a216:	6063      	str	r3, [r4, #4]
 800a218:	6014      	str	r4, [r2, #0]
 800a21a:	4628      	mov	r0, r5
 800a21c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a220:	f000 b8e4 	b.w	800a3ec <__malloc_unlock>
 800a224:	42a3      	cmp	r3, r4
 800a226:	d908      	bls.n	800a23a <_free_r+0x42>
 800a228:	6820      	ldr	r0, [r4, #0]
 800a22a:	1821      	adds	r1, r4, r0
 800a22c:	428b      	cmp	r3, r1
 800a22e:	bf01      	itttt	eq
 800a230:	6819      	ldreq	r1, [r3, #0]
 800a232:	685b      	ldreq	r3, [r3, #4]
 800a234:	1809      	addeq	r1, r1, r0
 800a236:	6021      	streq	r1, [r4, #0]
 800a238:	e7ed      	b.n	800a216 <_free_r+0x1e>
 800a23a:	461a      	mov	r2, r3
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	b10b      	cbz	r3, 800a244 <_free_r+0x4c>
 800a240:	42a3      	cmp	r3, r4
 800a242:	d9fa      	bls.n	800a23a <_free_r+0x42>
 800a244:	6811      	ldr	r1, [r2, #0]
 800a246:	1850      	adds	r0, r2, r1
 800a248:	42a0      	cmp	r0, r4
 800a24a:	d10b      	bne.n	800a264 <_free_r+0x6c>
 800a24c:	6820      	ldr	r0, [r4, #0]
 800a24e:	4401      	add	r1, r0
 800a250:	1850      	adds	r0, r2, r1
 800a252:	4283      	cmp	r3, r0
 800a254:	6011      	str	r1, [r2, #0]
 800a256:	d1e0      	bne.n	800a21a <_free_r+0x22>
 800a258:	6818      	ldr	r0, [r3, #0]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	6053      	str	r3, [r2, #4]
 800a25e:	4408      	add	r0, r1
 800a260:	6010      	str	r0, [r2, #0]
 800a262:	e7da      	b.n	800a21a <_free_r+0x22>
 800a264:	d902      	bls.n	800a26c <_free_r+0x74>
 800a266:	230c      	movs	r3, #12
 800a268:	602b      	str	r3, [r5, #0]
 800a26a:	e7d6      	b.n	800a21a <_free_r+0x22>
 800a26c:	6820      	ldr	r0, [r4, #0]
 800a26e:	1821      	adds	r1, r4, r0
 800a270:	428b      	cmp	r3, r1
 800a272:	bf04      	itt	eq
 800a274:	6819      	ldreq	r1, [r3, #0]
 800a276:	685b      	ldreq	r3, [r3, #4]
 800a278:	6063      	str	r3, [r4, #4]
 800a27a:	bf04      	itt	eq
 800a27c:	1809      	addeq	r1, r1, r0
 800a27e:	6021      	streq	r1, [r4, #0]
 800a280:	6054      	str	r4, [r2, #4]
 800a282:	e7ca      	b.n	800a21a <_free_r+0x22>
 800a284:	bd38      	pop	{r3, r4, r5, pc}
 800a286:	bf00      	nop
 800a288:	20004938 	.word	0x20004938

0800a28c <malloc>:
 800a28c:	4b02      	ldr	r3, [pc, #8]	@ (800a298 <malloc+0xc>)
 800a28e:	4601      	mov	r1, r0
 800a290:	6818      	ldr	r0, [r3, #0]
 800a292:	f000 b825 	b.w	800a2e0 <_malloc_r>
 800a296:	bf00      	nop
 800a298:	20000074 	.word	0x20000074

0800a29c <sbrk_aligned>:
 800a29c:	b570      	push	{r4, r5, r6, lr}
 800a29e:	4e0f      	ldr	r6, [pc, #60]	@ (800a2dc <sbrk_aligned+0x40>)
 800a2a0:	460c      	mov	r4, r1
 800a2a2:	6831      	ldr	r1, [r6, #0]
 800a2a4:	4605      	mov	r5, r0
 800a2a6:	b911      	cbnz	r1, 800a2ae <sbrk_aligned+0x12>
 800a2a8:	f000 fe3e 	bl	800af28 <_sbrk_r>
 800a2ac:	6030      	str	r0, [r6, #0]
 800a2ae:	4621      	mov	r1, r4
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	f000 fe39 	bl	800af28 <_sbrk_r>
 800a2b6:	1c43      	adds	r3, r0, #1
 800a2b8:	d103      	bne.n	800a2c2 <sbrk_aligned+0x26>
 800a2ba:	f04f 34ff 	mov.w	r4, #4294967295
 800a2be:	4620      	mov	r0, r4
 800a2c0:	bd70      	pop	{r4, r5, r6, pc}
 800a2c2:	1cc4      	adds	r4, r0, #3
 800a2c4:	f024 0403 	bic.w	r4, r4, #3
 800a2c8:	42a0      	cmp	r0, r4
 800a2ca:	d0f8      	beq.n	800a2be <sbrk_aligned+0x22>
 800a2cc:	1a21      	subs	r1, r4, r0
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f000 fe2a 	bl	800af28 <_sbrk_r>
 800a2d4:	3001      	adds	r0, #1
 800a2d6:	d1f2      	bne.n	800a2be <sbrk_aligned+0x22>
 800a2d8:	e7ef      	b.n	800a2ba <sbrk_aligned+0x1e>
 800a2da:	bf00      	nop
 800a2dc:	20004934 	.word	0x20004934

0800a2e0 <_malloc_r>:
 800a2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2e4:	1ccd      	adds	r5, r1, #3
 800a2e6:	f025 0503 	bic.w	r5, r5, #3
 800a2ea:	3508      	adds	r5, #8
 800a2ec:	2d0c      	cmp	r5, #12
 800a2ee:	bf38      	it	cc
 800a2f0:	250c      	movcc	r5, #12
 800a2f2:	2d00      	cmp	r5, #0
 800a2f4:	4606      	mov	r6, r0
 800a2f6:	db01      	blt.n	800a2fc <_malloc_r+0x1c>
 800a2f8:	42a9      	cmp	r1, r5
 800a2fa:	d904      	bls.n	800a306 <_malloc_r+0x26>
 800a2fc:	230c      	movs	r3, #12
 800a2fe:	6033      	str	r3, [r6, #0]
 800a300:	2000      	movs	r0, #0
 800a302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a306:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a3dc <_malloc_r+0xfc>
 800a30a:	f000 f869 	bl	800a3e0 <__malloc_lock>
 800a30e:	f8d8 3000 	ldr.w	r3, [r8]
 800a312:	461c      	mov	r4, r3
 800a314:	bb44      	cbnz	r4, 800a368 <_malloc_r+0x88>
 800a316:	4629      	mov	r1, r5
 800a318:	4630      	mov	r0, r6
 800a31a:	f7ff ffbf 	bl	800a29c <sbrk_aligned>
 800a31e:	1c43      	adds	r3, r0, #1
 800a320:	4604      	mov	r4, r0
 800a322:	d158      	bne.n	800a3d6 <_malloc_r+0xf6>
 800a324:	f8d8 4000 	ldr.w	r4, [r8]
 800a328:	4627      	mov	r7, r4
 800a32a:	2f00      	cmp	r7, #0
 800a32c:	d143      	bne.n	800a3b6 <_malloc_r+0xd6>
 800a32e:	2c00      	cmp	r4, #0
 800a330:	d04b      	beq.n	800a3ca <_malloc_r+0xea>
 800a332:	6823      	ldr	r3, [r4, #0]
 800a334:	4639      	mov	r1, r7
 800a336:	4630      	mov	r0, r6
 800a338:	eb04 0903 	add.w	r9, r4, r3
 800a33c:	f000 fdf4 	bl	800af28 <_sbrk_r>
 800a340:	4581      	cmp	r9, r0
 800a342:	d142      	bne.n	800a3ca <_malloc_r+0xea>
 800a344:	6821      	ldr	r1, [r4, #0]
 800a346:	1a6d      	subs	r5, r5, r1
 800a348:	4629      	mov	r1, r5
 800a34a:	4630      	mov	r0, r6
 800a34c:	f7ff ffa6 	bl	800a29c <sbrk_aligned>
 800a350:	3001      	adds	r0, #1
 800a352:	d03a      	beq.n	800a3ca <_malloc_r+0xea>
 800a354:	6823      	ldr	r3, [r4, #0]
 800a356:	442b      	add	r3, r5
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	f8d8 3000 	ldr.w	r3, [r8]
 800a35e:	685a      	ldr	r2, [r3, #4]
 800a360:	bb62      	cbnz	r2, 800a3bc <_malloc_r+0xdc>
 800a362:	f8c8 7000 	str.w	r7, [r8]
 800a366:	e00f      	b.n	800a388 <_malloc_r+0xa8>
 800a368:	6822      	ldr	r2, [r4, #0]
 800a36a:	1b52      	subs	r2, r2, r5
 800a36c:	d420      	bmi.n	800a3b0 <_malloc_r+0xd0>
 800a36e:	2a0b      	cmp	r2, #11
 800a370:	d917      	bls.n	800a3a2 <_malloc_r+0xc2>
 800a372:	1961      	adds	r1, r4, r5
 800a374:	42a3      	cmp	r3, r4
 800a376:	6025      	str	r5, [r4, #0]
 800a378:	bf18      	it	ne
 800a37a:	6059      	strne	r1, [r3, #4]
 800a37c:	6863      	ldr	r3, [r4, #4]
 800a37e:	bf08      	it	eq
 800a380:	f8c8 1000 	streq.w	r1, [r8]
 800a384:	5162      	str	r2, [r4, r5]
 800a386:	604b      	str	r3, [r1, #4]
 800a388:	4630      	mov	r0, r6
 800a38a:	f000 f82f 	bl	800a3ec <__malloc_unlock>
 800a38e:	f104 000b 	add.w	r0, r4, #11
 800a392:	1d23      	adds	r3, r4, #4
 800a394:	f020 0007 	bic.w	r0, r0, #7
 800a398:	1ac2      	subs	r2, r0, r3
 800a39a:	bf1c      	itt	ne
 800a39c:	1a1b      	subne	r3, r3, r0
 800a39e:	50a3      	strne	r3, [r4, r2]
 800a3a0:	e7af      	b.n	800a302 <_malloc_r+0x22>
 800a3a2:	6862      	ldr	r2, [r4, #4]
 800a3a4:	42a3      	cmp	r3, r4
 800a3a6:	bf0c      	ite	eq
 800a3a8:	f8c8 2000 	streq.w	r2, [r8]
 800a3ac:	605a      	strne	r2, [r3, #4]
 800a3ae:	e7eb      	b.n	800a388 <_malloc_r+0xa8>
 800a3b0:	4623      	mov	r3, r4
 800a3b2:	6864      	ldr	r4, [r4, #4]
 800a3b4:	e7ae      	b.n	800a314 <_malloc_r+0x34>
 800a3b6:	463c      	mov	r4, r7
 800a3b8:	687f      	ldr	r7, [r7, #4]
 800a3ba:	e7b6      	b.n	800a32a <_malloc_r+0x4a>
 800a3bc:	461a      	mov	r2, r3
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	42a3      	cmp	r3, r4
 800a3c2:	d1fb      	bne.n	800a3bc <_malloc_r+0xdc>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	6053      	str	r3, [r2, #4]
 800a3c8:	e7de      	b.n	800a388 <_malloc_r+0xa8>
 800a3ca:	230c      	movs	r3, #12
 800a3cc:	6033      	str	r3, [r6, #0]
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	f000 f80c 	bl	800a3ec <__malloc_unlock>
 800a3d4:	e794      	b.n	800a300 <_malloc_r+0x20>
 800a3d6:	6005      	str	r5, [r0, #0]
 800a3d8:	e7d6      	b.n	800a388 <_malloc_r+0xa8>
 800a3da:	bf00      	nop
 800a3dc:	20004938 	.word	0x20004938

0800a3e0 <__malloc_lock>:
 800a3e0:	4801      	ldr	r0, [pc, #4]	@ (800a3e8 <__malloc_lock+0x8>)
 800a3e2:	f7ff b8a0 	b.w	8009526 <__retarget_lock_acquire_recursive>
 800a3e6:	bf00      	nop
 800a3e8:	20004930 	.word	0x20004930

0800a3ec <__malloc_unlock>:
 800a3ec:	4801      	ldr	r0, [pc, #4]	@ (800a3f4 <__malloc_unlock+0x8>)
 800a3ee:	f7ff b89b 	b.w	8009528 <__retarget_lock_release_recursive>
 800a3f2:	bf00      	nop
 800a3f4:	20004930 	.word	0x20004930

0800a3f8 <_Balloc>:
 800a3f8:	b570      	push	{r4, r5, r6, lr}
 800a3fa:	69c6      	ldr	r6, [r0, #28]
 800a3fc:	4604      	mov	r4, r0
 800a3fe:	460d      	mov	r5, r1
 800a400:	b976      	cbnz	r6, 800a420 <_Balloc+0x28>
 800a402:	2010      	movs	r0, #16
 800a404:	f7ff ff42 	bl	800a28c <malloc>
 800a408:	4602      	mov	r2, r0
 800a40a:	61e0      	str	r0, [r4, #28]
 800a40c:	b920      	cbnz	r0, 800a418 <_Balloc+0x20>
 800a40e:	4b18      	ldr	r3, [pc, #96]	@ (800a470 <_Balloc+0x78>)
 800a410:	4818      	ldr	r0, [pc, #96]	@ (800a474 <_Balloc+0x7c>)
 800a412:	216b      	movs	r1, #107	@ 0x6b
 800a414:	f000 fd98 	bl	800af48 <__assert_func>
 800a418:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a41c:	6006      	str	r6, [r0, #0]
 800a41e:	60c6      	str	r6, [r0, #12]
 800a420:	69e6      	ldr	r6, [r4, #28]
 800a422:	68f3      	ldr	r3, [r6, #12]
 800a424:	b183      	cbz	r3, 800a448 <_Balloc+0x50>
 800a426:	69e3      	ldr	r3, [r4, #28]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a42e:	b9b8      	cbnz	r0, 800a460 <_Balloc+0x68>
 800a430:	2101      	movs	r1, #1
 800a432:	fa01 f605 	lsl.w	r6, r1, r5
 800a436:	1d72      	adds	r2, r6, #5
 800a438:	0092      	lsls	r2, r2, #2
 800a43a:	4620      	mov	r0, r4
 800a43c:	f000 fda2 	bl	800af84 <_calloc_r>
 800a440:	b160      	cbz	r0, 800a45c <_Balloc+0x64>
 800a442:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a446:	e00e      	b.n	800a466 <_Balloc+0x6e>
 800a448:	2221      	movs	r2, #33	@ 0x21
 800a44a:	2104      	movs	r1, #4
 800a44c:	4620      	mov	r0, r4
 800a44e:	f000 fd99 	bl	800af84 <_calloc_r>
 800a452:	69e3      	ldr	r3, [r4, #28]
 800a454:	60f0      	str	r0, [r6, #12]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d1e4      	bne.n	800a426 <_Balloc+0x2e>
 800a45c:	2000      	movs	r0, #0
 800a45e:	bd70      	pop	{r4, r5, r6, pc}
 800a460:	6802      	ldr	r2, [r0, #0]
 800a462:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a466:	2300      	movs	r3, #0
 800a468:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a46c:	e7f7      	b.n	800a45e <_Balloc+0x66>
 800a46e:	bf00      	nop
 800a470:	0800b705 	.word	0x0800b705
 800a474:	0800b785 	.word	0x0800b785

0800a478 <_Bfree>:
 800a478:	b570      	push	{r4, r5, r6, lr}
 800a47a:	69c6      	ldr	r6, [r0, #28]
 800a47c:	4605      	mov	r5, r0
 800a47e:	460c      	mov	r4, r1
 800a480:	b976      	cbnz	r6, 800a4a0 <_Bfree+0x28>
 800a482:	2010      	movs	r0, #16
 800a484:	f7ff ff02 	bl	800a28c <malloc>
 800a488:	4602      	mov	r2, r0
 800a48a:	61e8      	str	r0, [r5, #28]
 800a48c:	b920      	cbnz	r0, 800a498 <_Bfree+0x20>
 800a48e:	4b09      	ldr	r3, [pc, #36]	@ (800a4b4 <_Bfree+0x3c>)
 800a490:	4809      	ldr	r0, [pc, #36]	@ (800a4b8 <_Bfree+0x40>)
 800a492:	218f      	movs	r1, #143	@ 0x8f
 800a494:	f000 fd58 	bl	800af48 <__assert_func>
 800a498:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a49c:	6006      	str	r6, [r0, #0]
 800a49e:	60c6      	str	r6, [r0, #12]
 800a4a0:	b13c      	cbz	r4, 800a4b2 <_Bfree+0x3a>
 800a4a2:	69eb      	ldr	r3, [r5, #28]
 800a4a4:	6862      	ldr	r2, [r4, #4]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4ac:	6021      	str	r1, [r4, #0]
 800a4ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4b2:	bd70      	pop	{r4, r5, r6, pc}
 800a4b4:	0800b705 	.word	0x0800b705
 800a4b8:	0800b785 	.word	0x0800b785

0800a4bc <__multadd>:
 800a4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c0:	690d      	ldr	r5, [r1, #16]
 800a4c2:	4607      	mov	r7, r0
 800a4c4:	460c      	mov	r4, r1
 800a4c6:	461e      	mov	r6, r3
 800a4c8:	f101 0c14 	add.w	ip, r1, #20
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	f8dc 3000 	ldr.w	r3, [ip]
 800a4d2:	b299      	uxth	r1, r3
 800a4d4:	fb02 6101 	mla	r1, r2, r1, r6
 800a4d8:	0c1e      	lsrs	r6, r3, #16
 800a4da:	0c0b      	lsrs	r3, r1, #16
 800a4dc:	fb02 3306 	mla	r3, r2, r6, r3
 800a4e0:	b289      	uxth	r1, r1
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4e8:	4285      	cmp	r5, r0
 800a4ea:	f84c 1b04 	str.w	r1, [ip], #4
 800a4ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4f2:	dcec      	bgt.n	800a4ce <__multadd+0x12>
 800a4f4:	b30e      	cbz	r6, 800a53a <__multadd+0x7e>
 800a4f6:	68a3      	ldr	r3, [r4, #8]
 800a4f8:	42ab      	cmp	r3, r5
 800a4fa:	dc19      	bgt.n	800a530 <__multadd+0x74>
 800a4fc:	6861      	ldr	r1, [r4, #4]
 800a4fe:	4638      	mov	r0, r7
 800a500:	3101      	adds	r1, #1
 800a502:	f7ff ff79 	bl	800a3f8 <_Balloc>
 800a506:	4680      	mov	r8, r0
 800a508:	b928      	cbnz	r0, 800a516 <__multadd+0x5a>
 800a50a:	4602      	mov	r2, r0
 800a50c:	4b0c      	ldr	r3, [pc, #48]	@ (800a540 <__multadd+0x84>)
 800a50e:	480d      	ldr	r0, [pc, #52]	@ (800a544 <__multadd+0x88>)
 800a510:	21ba      	movs	r1, #186	@ 0xba
 800a512:	f000 fd19 	bl	800af48 <__assert_func>
 800a516:	6922      	ldr	r2, [r4, #16]
 800a518:	3202      	adds	r2, #2
 800a51a:	f104 010c 	add.w	r1, r4, #12
 800a51e:	0092      	lsls	r2, r2, #2
 800a520:	300c      	adds	r0, #12
 800a522:	f7ff f802 	bl	800952a <memcpy>
 800a526:	4621      	mov	r1, r4
 800a528:	4638      	mov	r0, r7
 800a52a:	f7ff ffa5 	bl	800a478 <_Bfree>
 800a52e:	4644      	mov	r4, r8
 800a530:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a534:	3501      	adds	r5, #1
 800a536:	615e      	str	r6, [r3, #20]
 800a538:	6125      	str	r5, [r4, #16]
 800a53a:	4620      	mov	r0, r4
 800a53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a540:	0800b774 	.word	0x0800b774
 800a544:	0800b785 	.word	0x0800b785

0800a548 <__hi0bits>:
 800a548:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a54c:	4603      	mov	r3, r0
 800a54e:	bf36      	itet	cc
 800a550:	0403      	lslcc	r3, r0, #16
 800a552:	2000      	movcs	r0, #0
 800a554:	2010      	movcc	r0, #16
 800a556:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a55a:	bf3c      	itt	cc
 800a55c:	021b      	lslcc	r3, r3, #8
 800a55e:	3008      	addcc	r0, #8
 800a560:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a564:	bf3c      	itt	cc
 800a566:	011b      	lslcc	r3, r3, #4
 800a568:	3004      	addcc	r0, #4
 800a56a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a56e:	bf3c      	itt	cc
 800a570:	009b      	lslcc	r3, r3, #2
 800a572:	3002      	addcc	r0, #2
 800a574:	2b00      	cmp	r3, #0
 800a576:	db05      	blt.n	800a584 <__hi0bits+0x3c>
 800a578:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a57c:	f100 0001 	add.w	r0, r0, #1
 800a580:	bf08      	it	eq
 800a582:	2020      	moveq	r0, #32
 800a584:	4770      	bx	lr

0800a586 <__lo0bits>:
 800a586:	6803      	ldr	r3, [r0, #0]
 800a588:	4602      	mov	r2, r0
 800a58a:	f013 0007 	ands.w	r0, r3, #7
 800a58e:	d00b      	beq.n	800a5a8 <__lo0bits+0x22>
 800a590:	07d9      	lsls	r1, r3, #31
 800a592:	d421      	bmi.n	800a5d8 <__lo0bits+0x52>
 800a594:	0798      	lsls	r0, r3, #30
 800a596:	bf49      	itett	mi
 800a598:	085b      	lsrmi	r3, r3, #1
 800a59a:	089b      	lsrpl	r3, r3, #2
 800a59c:	2001      	movmi	r0, #1
 800a59e:	6013      	strmi	r3, [r2, #0]
 800a5a0:	bf5c      	itt	pl
 800a5a2:	6013      	strpl	r3, [r2, #0]
 800a5a4:	2002      	movpl	r0, #2
 800a5a6:	4770      	bx	lr
 800a5a8:	b299      	uxth	r1, r3
 800a5aa:	b909      	cbnz	r1, 800a5b0 <__lo0bits+0x2a>
 800a5ac:	0c1b      	lsrs	r3, r3, #16
 800a5ae:	2010      	movs	r0, #16
 800a5b0:	b2d9      	uxtb	r1, r3
 800a5b2:	b909      	cbnz	r1, 800a5b8 <__lo0bits+0x32>
 800a5b4:	3008      	adds	r0, #8
 800a5b6:	0a1b      	lsrs	r3, r3, #8
 800a5b8:	0719      	lsls	r1, r3, #28
 800a5ba:	bf04      	itt	eq
 800a5bc:	091b      	lsreq	r3, r3, #4
 800a5be:	3004      	addeq	r0, #4
 800a5c0:	0799      	lsls	r1, r3, #30
 800a5c2:	bf04      	itt	eq
 800a5c4:	089b      	lsreq	r3, r3, #2
 800a5c6:	3002      	addeq	r0, #2
 800a5c8:	07d9      	lsls	r1, r3, #31
 800a5ca:	d403      	bmi.n	800a5d4 <__lo0bits+0x4e>
 800a5cc:	085b      	lsrs	r3, r3, #1
 800a5ce:	f100 0001 	add.w	r0, r0, #1
 800a5d2:	d003      	beq.n	800a5dc <__lo0bits+0x56>
 800a5d4:	6013      	str	r3, [r2, #0]
 800a5d6:	4770      	bx	lr
 800a5d8:	2000      	movs	r0, #0
 800a5da:	4770      	bx	lr
 800a5dc:	2020      	movs	r0, #32
 800a5de:	4770      	bx	lr

0800a5e0 <__i2b>:
 800a5e0:	b510      	push	{r4, lr}
 800a5e2:	460c      	mov	r4, r1
 800a5e4:	2101      	movs	r1, #1
 800a5e6:	f7ff ff07 	bl	800a3f8 <_Balloc>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	b928      	cbnz	r0, 800a5fa <__i2b+0x1a>
 800a5ee:	4b05      	ldr	r3, [pc, #20]	@ (800a604 <__i2b+0x24>)
 800a5f0:	4805      	ldr	r0, [pc, #20]	@ (800a608 <__i2b+0x28>)
 800a5f2:	f240 1145 	movw	r1, #325	@ 0x145
 800a5f6:	f000 fca7 	bl	800af48 <__assert_func>
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	6144      	str	r4, [r0, #20]
 800a5fe:	6103      	str	r3, [r0, #16]
 800a600:	bd10      	pop	{r4, pc}
 800a602:	bf00      	nop
 800a604:	0800b774 	.word	0x0800b774
 800a608:	0800b785 	.word	0x0800b785

0800a60c <__multiply>:
 800a60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a610:	4617      	mov	r7, r2
 800a612:	690a      	ldr	r2, [r1, #16]
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	429a      	cmp	r2, r3
 800a618:	bfa8      	it	ge
 800a61a:	463b      	movge	r3, r7
 800a61c:	4689      	mov	r9, r1
 800a61e:	bfa4      	itt	ge
 800a620:	460f      	movge	r7, r1
 800a622:	4699      	movge	r9, r3
 800a624:	693d      	ldr	r5, [r7, #16]
 800a626:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	6879      	ldr	r1, [r7, #4]
 800a62e:	eb05 060a 	add.w	r6, r5, sl
 800a632:	42b3      	cmp	r3, r6
 800a634:	b085      	sub	sp, #20
 800a636:	bfb8      	it	lt
 800a638:	3101      	addlt	r1, #1
 800a63a:	f7ff fedd 	bl	800a3f8 <_Balloc>
 800a63e:	b930      	cbnz	r0, 800a64e <__multiply+0x42>
 800a640:	4602      	mov	r2, r0
 800a642:	4b41      	ldr	r3, [pc, #260]	@ (800a748 <__multiply+0x13c>)
 800a644:	4841      	ldr	r0, [pc, #260]	@ (800a74c <__multiply+0x140>)
 800a646:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a64a:	f000 fc7d 	bl	800af48 <__assert_func>
 800a64e:	f100 0414 	add.w	r4, r0, #20
 800a652:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a656:	4623      	mov	r3, r4
 800a658:	2200      	movs	r2, #0
 800a65a:	4573      	cmp	r3, lr
 800a65c:	d320      	bcc.n	800a6a0 <__multiply+0x94>
 800a65e:	f107 0814 	add.w	r8, r7, #20
 800a662:	f109 0114 	add.w	r1, r9, #20
 800a666:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a66a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a66e:	9302      	str	r3, [sp, #8]
 800a670:	1beb      	subs	r3, r5, r7
 800a672:	3b15      	subs	r3, #21
 800a674:	f023 0303 	bic.w	r3, r3, #3
 800a678:	3304      	adds	r3, #4
 800a67a:	3715      	adds	r7, #21
 800a67c:	42bd      	cmp	r5, r7
 800a67e:	bf38      	it	cc
 800a680:	2304      	movcc	r3, #4
 800a682:	9301      	str	r3, [sp, #4]
 800a684:	9b02      	ldr	r3, [sp, #8]
 800a686:	9103      	str	r1, [sp, #12]
 800a688:	428b      	cmp	r3, r1
 800a68a:	d80c      	bhi.n	800a6a6 <__multiply+0x9a>
 800a68c:	2e00      	cmp	r6, #0
 800a68e:	dd03      	ble.n	800a698 <__multiply+0x8c>
 800a690:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a694:	2b00      	cmp	r3, #0
 800a696:	d055      	beq.n	800a744 <__multiply+0x138>
 800a698:	6106      	str	r6, [r0, #16]
 800a69a:	b005      	add	sp, #20
 800a69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a0:	f843 2b04 	str.w	r2, [r3], #4
 800a6a4:	e7d9      	b.n	800a65a <__multiply+0x4e>
 800a6a6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a6aa:	f1ba 0f00 	cmp.w	sl, #0
 800a6ae:	d01f      	beq.n	800a6f0 <__multiply+0xe4>
 800a6b0:	46c4      	mov	ip, r8
 800a6b2:	46a1      	mov	r9, r4
 800a6b4:	2700      	movs	r7, #0
 800a6b6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a6ba:	f8d9 3000 	ldr.w	r3, [r9]
 800a6be:	fa1f fb82 	uxth.w	fp, r2
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	fb0a 330b 	mla	r3, sl, fp, r3
 800a6c8:	443b      	add	r3, r7
 800a6ca:	f8d9 7000 	ldr.w	r7, [r9]
 800a6ce:	0c12      	lsrs	r2, r2, #16
 800a6d0:	0c3f      	lsrs	r7, r7, #16
 800a6d2:	fb0a 7202 	mla	r2, sl, r2, r7
 800a6d6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6e0:	4565      	cmp	r5, ip
 800a6e2:	f849 3b04 	str.w	r3, [r9], #4
 800a6e6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a6ea:	d8e4      	bhi.n	800a6b6 <__multiply+0xaa>
 800a6ec:	9b01      	ldr	r3, [sp, #4]
 800a6ee:	50e7      	str	r7, [r4, r3]
 800a6f0:	9b03      	ldr	r3, [sp, #12]
 800a6f2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a6f6:	3104      	adds	r1, #4
 800a6f8:	f1b9 0f00 	cmp.w	r9, #0
 800a6fc:	d020      	beq.n	800a740 <__multiply+0x134>
 800a6fe:	6823      	ldr	r3, [r4, #0]
 800a700:	4647      	mov	r7, r8
 800a702:	46a4      	mov	ip, r4
 800a704:	f04f 0a00 	mov.w	sl, #0
 800a708:	f8b7 b000 	ldrh.w	fp, [r7]
 800a70c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a710:	fb09 220b 	mla	r2, r9, fp, r2
 800a714:	4452      	add	r2, sl
 800a716:	b29b      	uxth	r3, r3
 800a718:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a71c:	f84c 3b04 	str.w	r3, [ip], #4
 800a720:	f857 3b04 	ldr.w	r3, [r7], #4
 800a724:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a728:	f8bc 3000 	ldrh.w	r3, [ip]
 800a72c:	fb09 330a 	mla	r3, r9, sl, r3
 800a730:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a734:	42bd      	cmp	r5, r7
 800a736:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a73a:	d8e5      	bhi.n	800a708 <__multiply+0xfc>
 800a73c:	9a01      	ldr	r2, [sp, #4]
 800a73e:	50a3      	str	r3, [r4, r2]
 800a740:	3404      	adds	r4, #4
 800a742:	e79f      	b.n	800a684 <__multiply+0x78>
 800a744:	3e01      	subs	r6, #1
 800a746:	e7a1      	b.n	800a68c <__multiply+0x80>
 800a748:	0800b774 	.word	0x0800b774
 800a74c:	0800b785 	.word	0x0800b785

0800a750 <__pow5mult>:
 800a750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a754:	4615      	mov	r5, r2
 800a756:	f012 0203 	ands.w	r2, r2, #3
 800a75a:	4607      	mov	r7, r0
 800a75c:	460e      	mov	r6, r1
 800a75e:	d007      	beq.n	800a770 <__pow5mult+0x20>
 800a760:	4c25      	ldr	r4, [pc, #148]	@ (800a7f8 <__pow5mult+0xa8>)
 800a762:	3a01      	subs	r2, #1
 800a764:	2300      	movs	r3, #0
 800a766:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a76a:	f7ff fea7 	bl	800a4bc <__multadd>
 800a76e:	4606      	mov	r6, r0
 800a770:	10ad      	asrs	r5, r5, #2
 800a772:	d03d      	beq.n	800a7f0 <__pow5mult+0xa0>
 800a774:	69fc      	ldr	r4, [r7, #28]
 800a776:	b97c      	cbnz	r4, 800a798 <__pow5mult+0x48>
 800a778:	2010      	movs	r0, #16
 800a77a:	f7ff fd87 	bl	800a28c <malloc>
 800a77e:	4602      	mov	r2, r0
 800a780:	61f8      	str	r0, [r7, #28]
 800a782:	b928      	cbnz	r0, 800a790 <__pow5mult+0x40>
 800a784:	4b1d      	ldr	r3, [pc, #116]	@ (800a7fc <__pow5mult+0xac>)
 800a786:	481e      	ldr	r0, [pc, #120]	@ (800a800 <__pow5mult+0xb0>)
 800a788:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a78c:	f000 fbdc 	bl	800af48 <__assert_func>
 800a790:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a794:	6004      	str	r4, [r0, #0]
 800a796:	60c4      	str	r4, [r0, #12]
 800a798:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a79c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7a0:	b94c      	cbnz	r4, 800a7b6 <__pow5mult+0x66>
 800a7a2:	f240 2171 	movw	r1, #625	@ 0x271
 800a7a6:	4638      	mov	r0, r7
 800a7a8:	f7ff ff1a 	bl	800a5e0 <__i2b>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7b2:	4604      	mov	r4, r0
 800a7b4:	6003      	str	r3, [r0, #0]
 800a7b6:	f04f 0900 	mov.w	r9, #0
 800a7ba:	07eb      	lsls	r3, r5, #31
 800a7bc:	d50a      	bpl.n	800a7d4 <__pow5mult+0x84>
 800a7be:	4631      	mov	r1, r6
 800a7c0:	4622      	mov	r2, r4
 800a7c2:	4638      	mov	r0, r7
 800a7c4:	f7ff ff22 	bl	800a60c <__multiply>
 800a7c8:	4631      	mov	r1, r6
 800a7ca:	4680      	mov	r8, r0
 800a7cc:	4638      	mov	r0, r7
 800a7ce:	f7ff fe53 	bl	800a478 <_Bfree>
 800a7d2:	4646      	mov	r6, r8
 800a7d4:	106d      	asrs	r5, r5, #1
 800a7d6:	d00b      	beq.n	800a7f0 <__pow5mult+0xa0>
 800a7d8:	6820      	ldr	r0, [r4, #0]
 800a7da:	b938      	cbnz	r0, 800a7ec <__pow5mult+0x9c>
 800a7dc:	4622      	mov	r2, r4
 800a7de:	4621      	mov	r1, r4
 800a7e0:	4638      	mov	r0, r7
 800a7e2:	f7ff ff13 	bl	800a60c <__multiply>
 800a7e6:	6020      	str	r0, [r4, #0]
 800a7e8:	f8c0 9000 	str.w	r9, [r0]
 800a7ec:	4604      	mov	r4, r0
 800a7ee:	e7e4      	b.n	800a7ba <__pow5mult+0x6a>
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7f6:	bf00      	nop
 800a7f8:	0800b838 	.word	0x0800b838
 800a7fc:	0800b705 	.word	0x0800b705
 800a800:	0800b785 	.word	0x0800b785

0800a804 <__lshift>:
 800a804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a808:	460c      	mov	r4, r1
 800a80a:	6849      	ldr	r1, [r1, #4]
 800a80c:	6923      	ldr	r3, [r4, #16]
 800a80e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a812:	68a3      	ldr	r3, [r4, #8]
 800a814:	4607      	mov	r7, r0
 800a816:	4691      	mov	r9, r2
 800a818:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a81c:	f108 0601 	add.w	r6, r8, #1
 800a820:	42b3      	cmp	r3, r6
 800a822:	db0b      	blt.n	800a83c <__lshift+0x38>
 800a824:	4638      	mov	r0, r7
 800a826:	f7ff fde7 	bl	800a3f8 <_Balloc>
 800a82a:	4605      	mov	r5, r0
 800a82c:	b948      	cbnz	r0, 800a842 <__lshift+0x3e>
 800a82e:	4602      	mov	r2, r0
 800a830:	4b28      	ldr	r3, [pc, #160]	@ (800a8d4 <__lshift+0xd0>)
 800a832:	4829      	ldr	r0, [pc, #164]	@ (800a8d8 <__lshift+0xd4>)
 800a834:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a838:	f000 fb86 	bl	800af48 <__assert_func>
 800a83c:	3101      	adds	r1, #1
 800a83e:	005b      	lsls	r3, r3, #1
 800a840:	e7ee      	b.n	800a820 <__lshift+0x1c>
 800a842:	2300      	movs	r3, #0
 800a844:	f100 0114 	add.w	r1, r0, #20
 800a848:	f100 0210 	add.w	r2, r0, #16
 800a84c:	4618      	mov	r0, r3
 800a84e:	4553      	cmp	r3, sl
 800a850:	db33      	blt.n	800a8ba <__lshift+0xb6>
 800a852:	6920      	ldr	r0, [r4, #16]
 800a854:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a858:	f104 0314 	add.w	r3, r4, #20
 800a85c:	f019 091f 	ands.w	r9, r9, #31
 800a860:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a864:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a868:	d02b      	beq.n	800a8c2 <__lshift+0xbe>
 800a86a:	f1c9 0e20 	rsb	lr, r9, #32
 800a86e:	468a      	mov	sl, r1
 800a870:	2200      	movs	r2, #0
 800a872:	6818      	ldr	r0, [r3, #0]
 800a874:	fa00 f009 	lsl.w	r0, r0, r9
 800a878:	4310      	orrs	r0, r2
 800a87a:	f84a 0b04 	str.w	r0, [sl], #4
 800a87e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a882:	459c      	cmp	ip, r3
 800a884:	fa22 f20e 	lsr.w	r2, r2, lr
 800a888:	d8f3      	bhi.n	800a872 <__lshift+0x6e>
 800a88a:	ebac 0304 	sub.w	r3, ip, r4
 800a88e:	3b15      	subs	r3, #21
 800a890:	f023 0303 	bic.w	r3, r3, #3
 800a894:	3304      	adds	r3, #4
 800a896:	f104 0015 	add.w	r0, r4, #21
 800a89a:	4560      	cmp	r0, ip
 800a89c:	bf88      	it	hi
 800a89e:	2304      	movhi	r3, #4
 800a8a0:	50ca      	str	r2, [r1, r3]
 800a8a2:	b10a      	cbz	r2, 800a8a8 <__lshift+0xa4>
 800a8a4:	f108 0602 	add.w	r6, r8, #2
 800a8a8:	3e01      	subs	r6, #1
 800a8aa:	4638      	mov	r0, r7
 800a8ac:	612e      	str	r6, [r5, #16]
 800a8ae:	4621      	mov	r1, r4
 800a8b0:	f7ff fde2 	bl	800a478 <_Bfree>
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8be:	3301      	adds	r3, #1
 800a8c0:	e7c5      	b.n	800a84e <__lshift+0x4a>
 800a8c2:	3904      	subs	r1, #4
 800a8c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8cc:	459c      	cmp	ip, r3
 800a8ce:	d8f9      	bhi.n	800a8c4 <__lshift+0xc0>
 800a8d0:	e7ea      	b.n	800a8a8 <__lshift+0xa4>
 800a8d2:	bf00      	nop
 800a8d4:	0800b774 	.word	0x0800b774
 800a8d8:	0800b785 	.word	0x0800b785

0800a8dc <__mcmp>:
 800a8dc:	690a      	ldr	r2, [r1, #16]
 800a8de:	4603      	mov	r3, r0
 800a8e0:	6900      	ldr	r0, [r0, #16]
 800a8e2:	1a80      	subs	r0, r0, r2
 800a8e4:	b530      	push	{r4, r5, lr}
 800a8e6:	d10e      	bne.n	800a906 <__mcmp+0x2a>
 800a8e8:	3314      	adds	r3, #20
 800a8ea:	3114      	adds	r1, #20
 800a8ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a8f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a8f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a8f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a8fc:	4295      	cmp	r5, r2
 800a8fe:	d003      	beq.n	800a908 <__mcmp+0x2c>
 800a900:	d205      	bcs.n	800a90e <__mcmp+0x32>
 800a902:	f04f 30ff 	mov.w	r0, #4294967295
 800a906:	bd30      	pop	{r4, r5, pc}
 800a908:	42a3      	cmp	r3, r4
 800a90a:	d3f3      	bcc.n	800a8f4 <__mcmp+0x18>
 800a90c:	e7fb      	b.n	800a906 <__mcmp+0x2a>
 800a90e:	2001      	movs	r0, #1
 800a910:	e7f9      	b.n	800a906 <__mcmp+0x2a>
	...

0800a914 <__mdiff>:
 800a914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a918:	4689      	mov	r9, r1
 800a91a:	4606      	mov	r6, r0
 800a91c:	4611      	mov	r1, r2
 800a91e:	4648      	mov	r0, r9
 800a920:	4614      	mov	r4, r2
 800a922:	f7ff ffdb 	bl	800a8dc <__mcmp>
 800a926:	1e05      	subs	r5, r0, #0
 800a928:	d112      	bne.n	800a950 <__mdiff+0x3c>
 800a92a:	4629      	mov	r1, r5
 800a92c:	4630      	mov	r0, r6
 800a92e:	f7ff fd63 	bl	800a3f8 <_Balloc>
 800a932:	4602      	mov	r2, r0
 800a934:	b928      	cbnz	r0, 800a942 <__mdiff+0x2e>
 800a936:	4b3f      	ldr	r3, [pc, #252]	@ (800aa34 <__mdiff+0x120>)
 800a938:	f240 2137 	movw	r1, #567	@ 0x237
 800a93c:	483e      	ldr	r0, [pc, #248]	@ (800aa38 <__mdiff+0x124>)
 800a93e:	f000 fb03 	bl	800af48 <__assert_func>
 800a942:	2301      	movs	r3, #1
 800a944:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a948:	4610      	mov	r0, r2
 800a94a:	b003      	add	sp, #12
 800a94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a950:	bfbc      	itt	lt
 800a952:	464b      	movlt	r3, r9
 800a954:	46a1      	movlt	r9, r4
 800a956:	4630      	mov	r0, r6
 800a958:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a95c:	bfba      	itte	lt
 800a95e:	461c      	movlt	r4, r3
 800a960:	2501      	movlt	r5, #1
 800a962:	2500      	movge	r5, #0
 800a964:	f7ff fd48 	bl	800a3f8 <_Balloc>
 800a968:	4602      	mov	r2, r0
 800a96a:	b918      	cbnz	r0, 800a974 <__mdiff+0x60>
 800a96c:	4b31      	ldr	r3, [pc, #196]	@ (800aa34 <__mdiff+0x120>)
 800a96e:	f240 2145 	movw	r1, #581	@ 0x245
 800a972:	e7e3      	b.n	800a93c <__mdiff+0x28>
 800a974:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a978:	6926      	ldr	r6, [r4, #16]
 800a97a:	60c5      	str	r5, [r0, #12]
 800a97c:	f109 0310 	add.w	r3, r9, #16
 800a980:	f109 0514 	add.w	r5, r9, #20
 800a984:	f104 0e14 	add.w	lr, r4, #20
 800a988:	f100 0b14 	add.w	fp, r0, #20
 800a98c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a990:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a994:	9301      	str	r3, [sp, #4]
 800a996:	46d9      	mov	r9, fp
 800a998:	f04f 0c00 	mov.w	ip, #0
 800a99c:	9b01      	ldr	r3, [sp, #4]
 800a99e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a9a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a9a6:	9301      	str	r3, [sp, #4]
 800a9a8:	fa1f f38a 	uxth.w	r3, sl
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	b283      	uxth	r3, r0
 800a9b0:	1acb      	subs	r3, r1, r3
 800a9b2:	0c00      	lsrs	r0, r0, #16
 800a9b4:	4463      	add	r3, ip
 800a9b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a9ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a9c4:	4576      	cmp	r6, lr
 800a9c6:	f849 3b04 	str.w	r3, [r9], #4
 800a9ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a9ce:	d8e5      	bhi.n	800a99c <__mdiff+0x88>
 800a9d0:	1b33      	subs	r3, r6, r4
 800a9d2:	3b15      	subs	r3, #21
 800a9d4:	f023 0303 	bic.w	r3, r3, #3
 800a9d8:	3415      	adds	r4, #21
 800a9da:	3304      	adds	r3, #4
 800a9dc:	42a6      	cmp	r6, r4
 800a9de:	bf38      	it	cc
 800a9e0:	2304      	movcc	r3, #4
 800a9e2:	441d      	add	r5, r3
 800a9e4:	445b      	add	r3, fp
 800a9e6:	461e      	mov	r6, r3
 800a9e8:	462c      	mov	r4, r5
 800a9ea:	4544      	cmp	r4, r8
 800a9ec:	d30e      	bcc.n	800aa0c <__mdiff+0xf8>
 800a9ee:	f108 0103 	add.w	r1, r8, #3
 800a9f2:	1b49      	subs	r1, r1, r5
 800a9f4:	f021 0103 	bic.w	r1, r1, #3
 800a9f8:	3d03      	subs	r5, #3
 800a9fa:	45a8      	cmp	r8, r5
 800a9fc:	bf38      	it	cc
 800a9fe:	2100      	movcc	r1, #0
 800aa00:	440b      	add	r3, r1
 800aa02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa06:	b191      	cbz	r1, 800aa2e <__mdiff+0x11a>
 800aa08:	6117      	str	r7, [r2, #16]
 800aa0a:	e79d      	b.n	800a948 <__mdiff+0x34>
 800aa0c:	f854 1b04 	ldr.w	r1, [r4], #4
 800aa10:	46e6      	mov	lr, ip
 800aa12:	0c08      	lsrs	r0, r1, #16
 800aa14:	fa1c fc81 	uxtah	ip, ip, r1
 800aa18:	4471      	add	r1, lr
 800aa1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aa1e:	b289      	uxth	r1, r1
 800aa20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aa24:	f846 1b04 	str.w	r1, [r6], #4
 800aa28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa2c:	e7dd      	b.n	800a9ea <__mdiff+0xd6>
 800aa2e:	3f01      	subs	r7, #1
 800aa30:	e7e7      	b.n	800aa02 <__mdiff+0xee>
 800aa32:	bf00      	nop
 800aa34:	0800b774 	.word	0x0800b774
 800aa38:	0800b785 	.word	0x0800b785

0800aa3c <__d2b>:
 800aa3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa40:	460f      	mov	r7, r1
 800aa42:	2101      	movs	r1, #1
 800aa44:	ec59 8b10 	vmov	r8, r9, d0
 800aa48:	4616      	mov	r6, r2
 800aa4a:	f7ff fcd5 	bl	800a3f8 <_Balloc>
 800aa4e:	4604      	mov	r4, r0
 800aa50:	b930      	cbnz	r0, 800aa60 <__d2b+0x24>
 800aa52:	4602      	mov	r2, r0
 800aa54:	4b23      	ldr	r3, [pc, #140]	@ (800aae4 <__d2b+0xa8>)
 800aa56:	4824      	ldr	r0, [pc, #144]	@ (800aae8 <__d2b+0xac>)
 800aa58:	f240 310f 	movw	r1, #783	@ 0x30f
 800aa5c:	f000 fa74 	bl	800af48 <__assert_func>
 800aa60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa68:	b10d      	cbz	r5, 800aa6e <__d2b+0x32>
 800aa6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa6e:	9301      	str	r3, [sp, #4]
 800aa70:	f1b8 0300 	subs.w	r3, r8, #0
 800aa74:	d023      	beq.n	800aabe <__d2b+0x82>
 800aa76:	4668      	mov	r0, sp
 800aa78:	9300      	str	r3, [sp, #0]
 800aa7a:	f7ff fd84 	bl	800a586 <__lo0bits>
 800aa7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa82:	b1d0      	cbz	r0, 800aaba <__d2b+0x7e>
 800aa84:	f1c0 0320 	rsb	r3, r0, #32
 800aa88:	fa02 f303 	lsl.w	r3, r2, r3
 800aa8c:	430b      	orrs	r3, r1
 800aa8e:	40c2      	lsrs	r2, r0
 800aa90:	6163      	str	r3, [r4, #20]
 800aa92:	9201      	str	r2, [sp, #4]
 800aa94:	9b01      	ldr	r3, [sp, #4]
 800aa96:	61a3      	str	r3, [r4, #24]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	bf0c      	ite	eq
 800aa9c:	2201      	moveq	r2, #1
 800aa9e:	2202      	movne	r2, #2
 800aaa0:	6122      	str	r2, [r4, #16]
 800aaa2:	b1a5      	cbz	r5, 800aace <__d2b+0x92>
 800aaa4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aaa8:	4405      	add	r5, r0
 800aaaa:	603d      	str	r5, [r7, #0]
 800aaac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aab0:	6030      	str	r0, [r6, #0]
 800aab2:	4620      	mov	r0, r4
 800aab4:	b003      	add	sp, #12
 800aab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aaba:	6161      	str	r1, [r4, #20]
 800aabc:	e7ea      	b.n	800aa94 <__d2b+0x58>
 800aabe:	a801      	add	r0, sp, #4
 800aac0:	f7ff fd61 	bl	800a586 <__lo0bits>
 800aac4:	9b01      	ldr	r3, [sp, #4]
 800aac6:	6163      	str	r3, [r4, #20]
 800aac8:	3020      	adds	r0, #32
 800aaca:	2201      	movs	r2, #1
 800aacc:	e7e8      	b.n	800aaa0 <__d2b+0x64>
 800aace:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aad2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aad6:	6038      	str	r0, [r7, #0]
 800aad8:	6918      	ldr	r0, [r3, #16]
 800aada:	f7ff fd35 	bl	800a548 <__hi0bits>
 800aade:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aae2:	e7e5      	b.n	800aab0 <__d2b+0x74>
 800aae4:	0800b774 	.word	0x0800b774
 800aae8:	0800b785 	.word	0x0800b785

0800aaec <__ssputs_r>:
 800aaec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaf0:	688e      	ldr	r6, [r1, #8]
 800aaf2:	461f      	mov	r7, r3
 800aaf4:	42be      	cmp	r6, r7
 800aaf6:	680b      	ldr	r3, [r1, #0]
 800aaf8:	4682      	mov	sl, r0
 800aafa:	460c      	mov	r4, r1
 800aafc:	4690      	mov	r8, r2
 800aafe:	d82d      	bhi.n	800ab5c <__ssputs_r+0x70>
 800ab00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ab08:	d026      	beq.n	800ab58 <__ssputs_r+0x6c>
 800ab0a:	6965      	ldr	r5, [r4, #20]
 800ab0c:	6909      	ldr	r1, [r1, #16]
 800ab0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab12:	eba3 0901 	sub.w	r9, r3, r1
 800ab16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab1a:	1c7b      	adds	r3, r7, #1
 800ab1c:	444b      	add	r3, r9
 800ab1e:	106d      	asrs	r5, r5, #1
 800ab20:	429d      	cmp	r5, r3
 800ab22:	bf38      	it	cc
 800ab24:	461d      	movcc	r5, r3
 800ab26:	0553      	lsls	r3, r2, #21
 800ab28:	d527      	bpl.n	800ab7a <__ssputs_r+0x8e>
 800ab2a:	4629      	mov	r1, r5
 800ab2c:	f7ff fbd8 	bl	800a2e0 <_malloc_r>
 800ab30:	4606      	mov	r6, r0
 800ab32:	b360      	cbz	r0, 800ab8e <__ssputs_r+0xa2>
 800ab34:	6921      	ldr	r1, [r4, #16]
 800ab36:	464a      	mov	r2, r9
 800ab38:	f7fe fcf7 	bl	800952a <memcpy>
 800ab3c:	89a3      	ldrh	r3, [r4, #12]
 800ab3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ab42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab46:	81a3      	strh	r3, [r4, #12]
 800ab48:	6126      	str	r6, [r4, #16]
 800ab4a:	6165      	str	r5, [r4, #20]
 800ab4c:	444e      	add	r6, r9
 800ab4e:	eba5 0509 	sub.w	r5, r5, r9
 800ab52:	6026      	str	r6, [r4, #0]
 800ab54:	60a5      	str	r5, [r4, #8]
 800ab56:	463e      	mov	r6, r7
 800ab58:	42be      	cmp	r6, r7
 800ab5a:	d900      	bls.n	800ab5e <__ssputs_r+0x72>
 800ab5c:	463e      	mov	r6, r7
 800ab5e:	6820      	ldr	r0, [r4, #0]
 800ab60:	4632      	mov	r2, r6
 800ab62:	4641      	mov	r1, r8
 800ab64:	f000 f9c6 	bl	800aef4 <memmove>
 800ab68:	68a3      	ldr	r3, [r4, #8]
 800ab6a:	1b9b      	subs	r3, r3, r6
 800ab6c:	60a3      	str	r3, [r4, #8]
 800ab6e:	6823      	ldr	r3, [r4, #0]
 800ab70:	4433      	add	r3, r6
 800ab72:	6023      	str	r3, [r4, #0]
 800ab74:	2000      	movs	r0, #0
 800ab76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab7a:	462a      	mov	r2, r5
 800ab7c:	f000 fa28 	bl	800afd0 <_realloc_r>
 800ab80:	4606      	mov	r6, r0
 800ab82:	2800      	cmp	r0, #0
 800ab84:	d1e0      	bne.n	800ab48 <__ssputs_r+0x5c>
 800ab86:	6921      	ldr	r1, [r4, #16]
 800ab88:	4650      	mov	r0, sl
 800ab8a:	f7ff fb35 	bl	800a1f8 <_free_r>
 800ab8e:	230c      	movs	r3, #12
 800ab90:	f8ca 3000 	str.w	r3, [sl]
 800ab94:	89a3      	ldrh	r3, [r4, #12]
 800ab96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab9a:	81a3      	strh	r3, [r4, #12]
 800ab9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aba0:	e7e9      	b.n	800ab76 <__ssputs_r+0x8a>
	...

0800aba4 <_svfiprintf_r>:
 800aba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba8:	4698      	mov	r8, r3
 800abaa:	898b      	ldrh	r3, [r1, #12]
 800abac:	061b      	lsls	r3, r3, #24
 800abae:	b09d      	sub	sp, #116	@ 0x74
 800abb0:	4607      	mov	r7, r0
 800abb2:	460d      	mov	r5, r1
 800abb4:	4614      	mov	r4, r2
 800abb6:	d510      	bpl.n	800abda <_svfiprintf_r+0x36>
 800abb8:	690b      	ldr	r3, [r1, #16]
 800abba:	b973      	cbnz	r3, 800abda <_svfiprintf_r+0x36>
 800abbc:	2140      	movs	r1, #64	@ 0x40
 800abbe:	f7ff fb8f 	bl	800a2e0 <_malloc_r>
 800abc2:	6028      	str	r0, [r5, #0]
 800abc4:	6128      	str	r0, [r5, #16]
 800abc6:	b930      	cbnz	r0, 800abd6 <_svfiprintf_r+0x32>
 800abc8:	230c      	movs	r3, #12
 800abca:	603b      	str	r3, [r7, #0]
 800abcc:	f04f 30ff 	mov.w	r0, #4294967295
 800abd0:	b01d      	add	sp, #116	@ 0x74
 800abd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd6:	2340      	movs	r3, #64	@ 0x40
 800abd8:	616b      	str	r3, [r5, #20]
 800abda:	2300      	movs	r3, #0
 800abdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800abde:	2320      	movs	r3, #32
 800abe0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800abe4:	f8cd 800c 	str.w	r8, [sp, #12]
 800abe8:	2330      	movs	r3, #48	@ 0x30
 800abea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ad88 <_svfiprintf_r+0x1e4>
 800abee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800abf2:	f04f 0901 	mov.w	r9, #1
 800abf6:	4623      	mov	r3, r4
 800abf8:	469a      	mov	sl, r3
 800abfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abfe:	b10a      	cbz	r2, 800ac04 <_svfiprintf_r+0x60>
 800ac00:	2a25      	cmp	r2, #37	@ 0x25
 800ac02:	d1f9      	bne.n	800abf8 <_svfiprintf_r+0x54>
 800ac04:	ebba 0b04 	subs.w	fp, sl, r4
 800ac08:	d00b      	beq.n	800ac22 <_svfiprintf_r+0x7e>
 800ac0a:	465b      	mov	r3, fp
 800ac0c:	4622      	mov	r2, r4
 800ac0e:	4629      	mov	r1, r5
 800ac10:	4638      	mov	r0, r7
 800ac12:	f7ff ff6b 	bl	800aaec <__ssputs_r>
 800ac16:	3001      	adds	r0, #1
 800ac18:	f000 80a7 	beq.w	800ad6a <_svfiprintf_r+0x1c6>
 800ac1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac1e:	445a      	add	r2, fp
 800ac20:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac22:	f89a 3000 	ldrb.w	r3, [sl]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	f000 809f 	beq.w	800ad6a <_svfiprintf_r+0x1c6>
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac36:	f10a 0a01 	add.w	sl, sl, #1
 800ac3a:	9304      	str	r3, [sp, #16]
 800ac3c:	9307      	str	r3, [sp, #28]
 800ac3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac42:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac44:	4654      	mov	r4, sl
 800ac46:	2205      	movs	r2, #5
 800ac48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac4c:	484e      	ldr	r0, [pc, #312]	@ (800ad88 <_svfiprintf_r+0x1e4>)
 800ac4e:	f7f5 fabf 	bl	80001d0 <memchr>
 800ac52:	9a04      	ldr	r2, [sp, #16]
 800ac54:	b9d8      	cbnz	r0, 800ac8e <_svfiprintf_r+0xea>
 800ac56:	06d0      	lsls	r0, r2, #27
 800ac58:	bf44      	itt	mi
 800ac5a:	2320      	movmi	r3, #32
 800ac5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac60:	0711      	lsls	r1, r2, #28
 800ac62:	bf44      	itt	mi
 800ac64:	232b      	movmi	r3, #43	@ 0x2b
 800ac66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ac6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac70:	d015      	beq.n	800ac9e <_svfiprintf_r+0xfa>
 800ac72:	9a07      	ldr	r2, [sp, #28]
 800ac74:	4654      	mov	r4, sl
 800ac76:	2000      	movs	r0, #0
 800ac78:	f04f 0c0a 	mov.w	ip, #10
 800ac7c:	4621      	mov	r1, r4
 800ac7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac82:	3b30      	subs	r3, #48	@ 0x30
 800ac84:	2b09      	cmp	r3, #9
 800ac86:	d94b      	bls.n	800ad20 <_svfiprintf_r+0x17c>
 800ac88:	b1b0      	cbz	r0, 800acb8 <_svfiprintf_r+0x114>
 800ac8a:	9207      	str	r2, [sp, #28]
 800ac8c:	e014      	b.n	800acb8 <_svfiprintf_r+0x114>
 800ac8e:	eba0 0308 	sub.w	r3, r0, r8
 800ac92:	fa09 f303 	lsl.w	r3, r9, r3
 800ac96:	4313      	orrs	r3, r2
 800ac98:	9304      	str	r3, [sp, #16]
 800ac9a:	46a2      	mov	sl, r4
 800ac9c:	e7d2      	b.n	800ac44 <_svfiprintf_r+0xa0>
 800ac9e:	9b03      	ldr	r3, [sp, #12]
 800aca0:	1d19      	adds	r1, r3, #4
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	9103      	str	r1, [sp, #12]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	bfbb      	ittet	lt
 800acaa:	425b      	neglt	r3, r3
 800acac:	f042 0202 	orrlt.w	r2, r2, #2
 800acb0:	9307      	strge	r3, [sp, #28]
 800acb2:	9307      	strlt	r3, [sp, #28]
 800acb4:	bfb8      	it	lt
 800acb6:	9204      	strlt	r2, [sp, #16]
 800acb8:	7823      	ldrb	r3, [r4, #0]
 800acba:	2b2e      	cmp	r3, #46	@ 0x2e
 800acbc:	d10a      	bne.n	800acd4 <_svfiprintf_r+0x130>
 800acbe:	7863      	ldrb	r3, [r4, #1]
 800acc0:	2b2a      	cmp	r3, #42	@ 0x2a
 800acc2:	d132      	bne.n	800ad2a <_svfiprintf_r+0x186>
 800acc4:	9b03      	ldr	r3, [sp, #12]
 800acc6:	1d1a      	adds	r2, r3, #4
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	9203      	str	r2, [sp, #12]
 800accc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800acd0:	3402      	adds	r4, #2
 800acd2:	9305      	str	r3, [sp, #20]
 800acd4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ad98 <_svfiprintf_r+0x1f4>
 800acd8:	7821      	ldrb	r1, [r4, #0]
 800acda:	2203      	movs	r2, #3
 800acdc:	4650      	mov	r0, sl
 800acde:	f7f5 fa77 	bl	80001d0 <memchr>
 800ace2:	b138      	cbz	r0, 800acf4 <_svfiprintf_r+0x150>
 800ace4:	9b04      	ldr	r3, [sp, #16]
 800ace6:	eba0 000a 	sub.w	r0, r0, sl
 800acea:	2240      	movs	r2, #64	@ 0x40
 800acec:	4082      	lsls	r2, r0
 800acee:	4313      	orrs	r3, r2
 800acf0:	3401      	adds	r4, #1
 800acf2:	9304      	str	r3, [sp, #16]
 800acf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acf8:	4824      	ldr	r0, [pc, #144]	@ (800ad8c <_svfiprintf_r+0x1e8>)
 800acfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800acfe:	2206      	movs	r2, #6
 800ad00:	f7f5 fa66 	bl	80001d0 <memchr>
 800ad04:	2800      	cmp	r0, #0
 800ad06:	d036      	beq.n	800ad76 <_svfiprintf_r+0x1d2>
 800ad08:	4b21      	ldr	r3, [pc, #132]	@ (800ad90 <_svfiprintf_r+0x1ec>)
 800ad0a:	bb1b      	cbnz	r3, 800ad54 <_svfiprintf_r+0x1b0>
 800ad0c:	9b03      	ldr	r3, [sp, #12]
 800ad0e:	3307      	adds	r3, #7
 800ad10:	f023 0307 	bic.w	r3, r3, #7
 800ad14:	3308      	adds	r3, #8
 800ad16:	9303      	str	r3, [sp, #12]
 800ad18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad1a:	4433      	add	r3, r6
 800ad1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad1e:	e76a      	b.n	800abf6 <_svfiprintf_r+0x52>
 800ad20:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad24:	460c      	mov	r4, r1
 800ad26:	2001      	movs	r0, #1
 800ad28:	e7a8      	b.n	800ac7c <_svfiprintf_r+0xd8>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	3401      	adds	r4, #1
 800ad2e:	9305      	str	r3, [sp, #20]
 800ad30:	4619      	mov	r1, r3
 800ad32:	f04f 0c0a 	mov.w	ip, #10
 800ad36:	4620      	mov	r0, r4
 800ad38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad3c:	3a30      	subs	r2, #48	@ 0x30
 800ad3e:	2a09      	cmp	r2, #9
 800ad40:	d903      	bls.n	800ad4a <_svfiprintf_r+0x1a6>
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d0c6      	beq.n	800acd4 <_svfiprintf_r+0x130>
 800ad46:	9105      	str	r1, [sp, #20]
 800ad48:	e7c4      	b.n	800acd4 <_svfiprintf_r+0x130>
 800ad4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad4e:	4604      	mov	r4, r0
 800ad50:	2301      	movs	r3, #1
 800ad52:	e7f0      	b.n	800ad36 <_svfiprintf_r+0x192>
 800ad54:	ab03      	add	r3, sp, #12
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	462a      	mov	r2, r5
 800ad5a:	4b0e      	ldr	r3, [pc, #56]	@ (800ad94 <_svfiprintf_r+0x1f0>)
 800ad5c:	a904      	add	r1, sp, #16
 800ad5e:	4638      	mov	r0, r7
 800ad60:	f7fd fe28 	bl	80089b4 <_printf_float>
 800ad64:	1c42      	adds	r2, r0, #1
 800ad66:	4606      	mov	r6, r0
 800ad68:	d1d6      	bne.n	800ad18 <_svfiprintf_r+0x174>
 800ad6a:	89ab      	ldrh	r3, [r5, #12]
 800ad6c:	065b      	lsls	r3, r3, #25
 800ad6e:	f53f af2d 	bmi.w	800abcc <_svfiprintf_r+0x28>
 800ad72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad74:	e72c      	b.n	800abd0 <_svfiprintf_r+0x2c>
 800ad76:	ab03      	add	r3, sp, #12
 800ad78:	9300      	str	r3, [sp, #0]
 800ad7a:	462a      	mov	r2, r5
 800ad7c:	4b05      	ldr	r3, [pc, #20]	@ (800ad94 <_svfiprintf_r+0x1f0>)
 800ad7e:	a904      	add	r1, sp, #16
 800ad80:	4638      	mov	r0, r7
 800ad82:	f7fe f8af 	bl	8008ee4 <_printf_i>
 800ad86:	e7ed      	b.n	800ad64 <_svfiprintf_r+0x1c0>
 800ad88:	0800b7de 	.word	0x0800b7de
 800ad8c:	0800b7e8 	.word	0x0800b7e8
 800ad90:	080089b5 	.word	0x080089b5
 800ad94:	0800aaed 	.word	0x0800aaed
 800ad98:	0800b7e4 	.word	0x0800b7e4

0800ad9c <__sflush_r>:
 800ad9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ada0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada4:	0716      	lsls	r6, r2, #28
 800ada6:	4605      	mov	r5, r0
 800ada8:	460c      	mov	r4, r1
 800adaa:	d454      	bmi.n	800ae56 <__sflush_r+0xba>
 800adac:	684b      	ldr	r3, [r1, #4]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	dc02      	bgt.n	800adb8 <__sflush_r+0x1c>
 800adb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	dd48      	ble.n	800ae4a <__sflush_r+0xae>
 800adb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800adba:	2e00      	cmp	r6, #0
 800adbc:	d045      	beq.n	800ae4a <__sflush_r+0xae>
 800adbe:	2300      	movs	r3, #0
 800adc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800adc4:	682f      	ldr	r7, [r5, #0]
 800adc6:	6a21      	ldr	r1, [r4, #32]
 800adc8:	602b      	str	r3, [r5, #0]
 800adca:	d030      	beq.n	800ae2e <__sflush_r+0x92>
 800adcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800adce:	89a3      	ldrh	r3, [r4, #12]
 800add0:	0759      	lsls	r1, r3, #29
 800add2:	d505      	bpl.n	800ade0 <__sflush_r+0x44>
 800add4:	6863      	ldr	r3, [r4, #4]
 800add6:	1ad2      	subs	r2, r2, r3
 800add8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800adda:	b10b      	cbz	r3, 800ade0 <__sflush_r+0x44>
 800addc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800adde:	1ad2      	subs	r2, r2, r3
 800ade0:	2300      	movs	r3, #0
 800ade2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ade4:	6a21      	ldr	r1, [r4, #32]
 800ade6:	4628      	mov	r0, r5
 800ade8:	47b0      	blx	r6
 800adea:	1c43      	adds	r3, r0, #1
 800adec:	89a3      	ldrh	r3, [r4, #12]
 800adee:	d106      	bne.n	800adfe <__sflush_r+0x62>
 800adf0:	6829      	ldr	r1, [r5, #0]
 800adf2:	291d      	cmp	r1, #29
 800adf4:	d82b      	bhi.n	800ae4e <__sflush_r+0xb2>
 800adf6:	4a2a      	ldr	r2, [pc, #168]	@ (800aea0 <__sflush_r+0x104>)
 800adf8:	40ca      	lsrs	r2, r1
 800adfa:	07d6      	lsls	r6, r2, #31
 800adfc:	d527      	bpl.n	800ae4e <__sflush_r+0xb2>
 800adfe:	2200      	movs	r2, #0
 800ae00:	6062      	str	r2, [r4, #4]
 800ae02:	04d9      	lsls	r1, r3, #19
 800ae04:	6922      	ldr	r2, [r4, #16]
 800ae06:	6022      	str	r2, [r4, #0]
 800ae08:	d504      	bpl.n	800ae14 <__sflush_r+0x78>
 800ae0a:	1c42      	adds	r2, r0, #1
 800ae0c:	d101      	bne.n	800ae12 <__sflush_r+0x76>
 800ae0e:	682b      	ldr	r3, [r5, #0]
 800ae10:	b903      	cbnz	r3, 800ae14 <__sflush_r+0x78>
 800ae12:	6560      	str	r0, [r4, #84]	@ 0x54
 800ae14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae16:	602f      	str	r7, [r5, #0]
 800ae18:	b1b9      	cbz	r1, 800ae4a <__sflush_r+0xae>
 800ae1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae1e:	4299      	cmp	r1, r3
 800ae20:	d002      	beq.n	800ae28 <__sflush_r+0x8c>
 800ae22:	4628      	mov	r0, r5
 800ae24:	f7ff f9e8 	bl	800a1f8 <_free_r>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae2c:	e00d      	b.n	800ae4a <__sflush_r+0xae>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	4628      	mov	r0, r5
 800ae32:	47b0      	blx	r6
 800ae34:	4602      	mov	r2, r0
 800ae36:	1c50      	adds	r0, r2, #1
 800ae38:	d1c9      	bne.n	800adce <__sflush_r+0x32>
 800ae3a:	682b      	ldr	r3, [r5, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d0c6      	beq.n	800adce <__sflush_r+0x32>
 800ae40:	2b1d      	cmp	r3, #29
 800ae42:	d001      	beq.n	800ae48 <__sflush_r+0xac>
 800ae44:	2b16      	cmp	r3, #22
 800ae46:	d11e      	bne.n	800ae86 <__sflush_r+0xea>
 800ae48:	602f      	str	r7, [r5, #0]
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	e022      	b.n	800ae94 <__sflush_r+0xf8>
 800ae4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae52:	b21b      	sxth	r3, r3
 800ae54:	e01b      	b.n	800ae8e <__sflush_r+0xf2>
 800ae56:	690f      	ldr	r7, [r1, #16]
 800ae58:	2f00      	cmp	r7, #0
 800ae5a:	d0f6      	beq.n	800ae4a <__sflush_r+0xae>
 800ae5c:	0793      	lsls	r3, r2, #30
 800ae5e:	680e      	ldr	r6, [r1, #0]
 800ae60:	bf08      	it	eq
 800ae62:	694b      	ldreq	r3, [r1, #20]
 800ae64:	600f      	str	r7, [r1, #0]
 800ae66:	bf18      	it	ne
 800ae68:	2300      	movne	r3, #0
 800ae6a:	eba6 0807 	sub.w	r8, r6, r7
 800ae6e:	608b      	str	r3, [r1, #8]
 800ae70:	f1b8 0f00 	cmp.w	r8, #0
 800ae74:	dde9      	ble.n	800ae4a <__sflush_r+0xae>
 800ae76:	6a21      	ldr	r1, [r4, #32]
 800ae78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ae7a:	4643      	mov	r3, r8
 800ae7c:	463a      	mov	r2, r7
 800ae7e:	4628      	mov	r0, r5
 800ae80:	47b0      	blx	r6
 800ae82:	2800      	cmp	r0, #0
 800ae84:	dc08      	bgt.n	800ae98 <__sflush_r+0xfc>
 800ae86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae8e:	81a3      	strh	r3, [r4, #12]
 800ae90:	f04f 30ff 	mov.w	r0, #4294967295
 800ae94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae98:	4407      	add	r7, r0
 800ae9a:	eba8 0800 	sub.w	r8, r8, r0
 800ae9e:	e7e7      	b.n	800ae70 <__sflush_r+0xd4>
 800aea0:	20400001 	.word	0x20400001

0800aea4 <_fflush_r>:
 800aea4:	b538      	push	{r3, r4, r5, lr}
 800aea6:	690b      	ldr	r3, [r1, #16]
 800aea8:	4605      	mov	r5, r0
 800aeaa:	460c      	mov	r4, r1
 800aeac:	b913      	cbnz	r3, 800aeb4 <_fflush_r+0x10>
 800aeae:	2500      	movs	r5, #0
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	bd38      	pop	{r3, r4, r5, pc}
 800aeb4:	b118      	cbz	r0, 800aebe <_fflush_r+0x1a>
 800aeb6:	6a03      	ldr	r3, [r0, #32]
 800aeb8:	b90b      	cbnz	r3, 800aebe <_fflush_r+0x1a>
 800aeba:	f7fe f9bd 	bl	8009238 <__sinit>
 800aebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d0f3      	beq.n	800aeae <_fflush_r+0xa>
 800aec6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aec8:	07d0      	lsls	r0, r2, #31
 800aeca:	d404      	bmi.n	800aed6 <_fflush_r+0x32>
 800aecc:	0599      	lsls	r1, r3, #22
 800aece:	d402      	bmi.n	800aed6 <_fflush_r+0x32>
 800aed0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aed2:	f7fe fb28 	bl	8009526 <__retarget_lock_acquire_recursive>
 800aed6:	4628      	mov	r0, r5
 800aed8:	4621      	mov	r1, r4
 800aeda:	f7ff ff5f 	bl	800ad9c <__sflush_r>
 800aede:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aee0:	07da      	lsls	r2, r3, #31
 800aee2:	4605      	mov	r5, r0
 800aee4:	d4e4      	bmi.n	800aeb0 <_fflush_r+0xc>
 800aee6:	89a3      	ldrh	r3, [r4, #12]
 800aee8:	059b      	lsls	r3, r3, #22
 800aeea:	d4e1      	bmi.n	800aeb0 <_fflush_r+0xc>
 800aeec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aeee:	f7fe fb1b 	bl	8009528 <__retarget_lock_release_recursive>
 800aef2:	e7dd      	b.n	800aeb0 <_fflush_r+0xc>

0800aef4 <memmove>:
 800aef4:	4288      	cmp	r0, r1
 800aef6:	b510      	push	{r4, lr}
 800aef8:	eb01 0402 	add.w	r4, r1, r2
 800aefc:	d902      	bls.n	800af04 <memmove+0x10>
 800aefe:	4284      	cmp	r4, r0
 800af00:	4623      	mov	r3, r4
 800af02:	d807      	bhi.n	800af14 <memmove+0x20>
 800af04:	1e43      	subs	r3, r0, #1
 800af06:	42a1      	cmp	r1, r4
 800af08:	d008      	beq.n	800af1c <memmove+0x28>
 800af0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af12:	e7f8      	b.n	800af06 <memmove+0x12>
 800af14:	4402      	add	r2, r0
 800af16:	4601      	mov	r1, r0
 800af18:	428a      	cmp	r2, r1
 800af1a:	d100      	bne.n	800af1e <memmove+0x2a>
 800af1c:	bd10      	pop	{r4, pc}
 800af1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af26:	e7f7      	b.n	800af18 <memmove+0x24>

0800af28 <_sbrk_r>:
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	4d06      	ldr	r5, [pc, #24]	@ (800af44 <_sbrk_r+0x1c>)
 800af2c:	2300      	movs	r3, #0
 800af2e:	4604      	mov	r4, r0
 800af30:	4608      	mov	r0, r1
 800af32:	602b      	str	r3, [r5, #0]
 800af34:	f7f7 f8a0 	bl	8002078 <_sbrk>
 800af38:	1c43      	adds	r3, r0, #1
 800af3a:	d102      	bne.n	800af42 <_sbrk_r+0x1a>
 800af3c:	682b      	ldr	r3, [r5, #0]
 800af3e:	b103      	cbz	r3, 800af42 <_sbrk_r+0x1a>
 800af40:	6023      	str	r3, [r4, #0]
 800af42:	bd38      	pop	{r3, r4, r5, pc}
 800af44:	2000492c 	.word	0x2000492c

0800af48 <__assert_func>:
 800af48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af4a:	4614      	mov	r4, r2
 800af4c:	461a      	mov	r2, r3
 800af4e:	4b09      	ldr	r3, [pc, #36]	@ (800af74 <__assert_func+0x2c>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4605      	mov	r5, r0
 800af54:	68d8      	ldr	r0, [r3, #12]
 800af56:	b14c      	cbz	r4, 800af6c <__assert_func+0x24>
 800af58:	4b07      	ldr	r3, [pc, #28]	@ (800af78 <__assert_func+0x30>)
 800af5a:	9100      	str	r1, [sp, #0]
 800af5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af60:	4906      	ldr	r1, [pc, #24]	@ (800af7c <__assert_func+0x34>)
 800af62:	462b      	mov	r3, r5
 800af64:	f000 f870 	bl	800b048 <fiprintf>
 800af68:	f000 f880 	bl	800b06c <abort>
 800af6c:	4b04      	ldr	r3, [pc, #16]	@ (800af80 <__assert_func+0x38>)
 800af6e:	461c      	mov	r4, r3
 800af70:	e7f3      	b.n	800af5a <__assert_func+0x12>
 800af72:	bf00      	nop
 800af74:	20000074 	.word	0x20000074
 800af78:	0800b7f9 	.word	0x0800b7f9
 800af7c:	0800b806 	.word	0x0800b806
 800af80:	0800b834 	.word	0x0800b834

0800af84 <_calloc_r>:
 800af84:	b570      	push	{r4, r5, r6, lr}
 800af86:	fba1 5402 	umull	r5, r4, r1, r2
 800af8a:	b934      	cbnz	r4, 800af9a <_calloc_r+0x16>
 800af8c:	4629      	mov	r1, r5
 800af8e:	f7ff f9a7 	bl	800a2e0 <_malloc_r>
 800af92:	4606      	mov	r6, r0
 800af94:	b928      	cbnz	r0, 800afa2 <_calloc_r+0x1e>
 800af96:	4630      	mov	r0, r6
 800af98:	bd70      	pop	{r4, r5, r6, pc}
 800af9a:	220c      	movs	r2, #12
 800af9c:	6002      	str	r2, [r0, #0]
 800af9e:	2600      	movs	r6, #0
 800afa0:	e7f9      	b.n	800af96 <_calloc_r+0x12>
 800afa2:	462a      	mov	r2, r5
 800afa4:	4621      	mov	r1, r4
 800afa6:	f7fe f9e2 	bl	800936e <memset>
 800afaa:	e7f4      	b.n	800af96 <_calloc_r+0x12>

0800afac <__ascii_mbtowc>:
 800afac:	b082      	sub	sp, #8
 800afae:	b901      	cbnz	r1, 800afb2 <__ascii_mbtowc+0x6>
 800afb0:	a901      	add	r1, sp, #4
 800afb2:	b142      	cbz	r2, 800afc6 <__ascii_mbtowc+0x1a>
 800afb4:	b14b      	cbz	r3, 800afca <__ascii_mbtowc+0x1e>
 800afb6:	7813      	ldrb	r3, [r2, #0]
 800afb8:	600b      	str	r3, [r1, #0]
 800afba:	7812      	ldrb	r2, [r2, #0]
 800afbc:	1e10      	subs	r0, r2, #0
 800afbe:	bf18      	it	ne
 800afc0:	2001      	movne	r0, #1
 800afc2:	b002      	add	sp, #8
 800afc4:	4770      	bx	lr
 800afc6:	4610      	mov	r0, r2
 800afc8:	e7fb      	b.n	800afc2 <__ascii_mbtowc+0x16>
 800afca:	f06f 0001 	mvn.w	r0, #1
 800afce:	e7f8      	b.n	800afc2 <__ascii_mbtowc+0x16>

0800afd0 <_realloc_r>:
 800afd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afd4:	4607      	mov	r7, r0
 800afd6:	4614      	mov	r4, r2
 800afd8:	460d      	mov	r5, r1
 800afda:	b921      	cbnz	r1, 800afe6 <_realloc_r+0x16>
 800afdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afe0:	4611      	mov	r1, r2
 800afe2:	f7ff b97d 	b.w	800a2e0 <_malloc_r>
 800afe6:	b92a      	cbnz	r2, 800aff4 <_realloc_r+0x24>
 800afe8:	f7ff f906 	bl	800a1f8 <_free_r>
 800afec:	4625      	mov	r5, r4
 800afee:	4628      	mov	r0, r5
 800aff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aff4:	f000 f841 	bl	800b07a <_malloc_usable_size_r>
 800aff8:	4284      	cmp	r4, r0
 800affa:	4606      	mov	r6, r0
 800affc:	d802      	bhi.n	800b004 <_realloc_r+0x34>
 800affe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b002:	d8f4      	bhi.n	800afee <_realloc_r+0x1e>
 800b004:	4621      	mov	r1, r4
 800b006:	4638      	mov	r0, r7
 800b008:	f7ff f96a 	bl	800a2e0 <_malloc_r>
 800b00c:	4680      	mov	r8, r0
 800b00e:	b908      	cbnz	r0, 800b014 <_realloc_r+0x44>
 800b010:	4645      	mov	r5, r8
 800b012:	e7ec      	b.n	800afee <_realloc_r+0x1e>
 800b014:	42b4      	cmp	r4, r6
 800b016:	4622      	mov	r2, r4
 800b018:	4629      	mov	r1, r5
 800b01a:	bf28      	it	cs
 800b01c:	4632      	movcs	r2, r6
 800b01e:	f7fe fa84 	bl	800952a <memcpy>
 800b022:	4629      	mov	r1, r5
 800b024:	4638      	mov	r0, r7
 800b026:	f7ff f8e7 	bl	800a1f8 <_free_r>
 800b02a:	e7f1      	b.n	800b010 <_realloc_r+0x40>

0800b02c <__ascii_wctomb>:
 800b02c:	4603      	mov	r3, r0
 800b02e:	4608      	mov	r0, r1
 800b030:	b141      	cbz	r1, 800b044 <__ascii_wctomb+0x18>
 800b032:	2aff      	cmp	r2, #255	@ 0xff
 800b034:	d904      	bls.n	800b040 <__ascii_wctomb+0x14>
 800b036:	228a      	movs	r2, #138	@ 0x8a
 800b038:	601a      	str	r2, [r3, #0]
 800b03a:	f04f 30ff 	mov.w	r0, #4294967295
 800b03e:	4770      	bx	lr
 800b040:	700a      	strb	r2, [r1, #0]
 800b042:	2001      	movs	r0, #1
 800b044:	4770      	bx	lr
	...

0800b048 <fiprintf>:
 800b048:	b40e      	push	{r1, r2, r3}
 800b04a:	b503      	push	{r0, r1, lr}
 800b04c:	4601      	mov	r1, r0
 800b04e:	ab03      	add	r3, sp, #12
 800b050:	4805      	ldr	r0, [pc, #20]	@ (800b068 <fiprintf+0x20>)
 800b052:	f853 2b04 	ldr.w	r2, [r3], #4
 800b056:	6800      	ldr	r0, [r0, #0]
 800b058:	9301      	str	r3, [sp, #4]
 800b05a:	f000 f83f 	bl	800b0dc <_vfiprintf_r>
 800b05e:	b002      	add	sp, #8
 800b060:	f85d eb04 	ldr.w	lr, [sp], #4
 800b064:	b003      	add	sp, #12
 800b066:	4770      	bx	lr
 800b068:	20000074 	.word	0x20000074

0800b06c <abort>:
 800b06c:	b508      	push	{r3, lr}
 800b06e:	2006      	movs	r0, #6
 800b070:	f000 fa08 	bl	800b484 <raise>
 800b074:	2001      	movs	r0, #1
 800b076:	f7f6 ff87 	bl	8001f88 <_exit>

0800b07a <_malloc_usable_size_r>:
 800b07a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b07e:	1f18      	subs	r0, r3, #4
 800b080:	2b00      	cmp	r3, #0
 800b082:	bfbc      	itt	lt
 800b084:	580b      	ldrlt	r3, [r1, r0]
 800b086:	18c0      	addlt	r0, r0, r3
 800b088:	4770      	bx	lr

0800b08a <__sfputc_r>:
 800b08a:	6893      	ldr	r3, [r2, #8]
 800b08c:	3b01      	subs	r3, #1
 800b08e:	2b00      	cmp	r3, #0
 800b090:	b410      	push	{r4}
 800b092:	6093      	str	r3, [r2, #8]
 800b094:	da08      	bge.n	800b0a8 <__sfputc_r+0x1e>
 800b096:	6994      	ldr	r4, [r2, #24]
 800b098:	42a3      	cmp	r3, r4
 800b09a:	db01      	blt.n	800b0a0 <__sfputc_r+0x16>
 800b09c:	290a      	cmp	r1, #10
 800b09e:	d103      	bne.n	800b0a8 <__sfputc_r+0x1e>
 800b0a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0a4:	f000 b932 	b.w	800b30c <__swbuf_r>
 800b0a8:	6813      	ldr	r3, [r2, #0]
 800b0aa:	1c58      	adds	r0, r3, #1
 800b0ac:	6010      	str	r0, [r2, #0]
 800b0ae:	7019      	strb	r1, [r3, #0]
 800b0b0:	4608      	mov	r0, r1
 800b0b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <__sfputs_r>:
 800b0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ba:	4606      	mov	r6, r0
 800b0bc:	460f      	mov	r7, r1
 800b0be:	4614      	mov	r4, r2
 800b0c0:	18d5      	adds	r5, r2, r3
 800b0c2:	42ac      	cmp	r4, r5
 800b0c4:	d101      	bne.n	800b0ca <__sfputs_r+0x12>
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	e007      	b.n	800b0da <__sfputs_r+0x22>
 800b0ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ce:	463a      	mov	r2, r7
 800b0d0:	4630      	mov	r0, r6
 800b0d2:	f7ff ffda 	bl	800b08a <__sfputc_r>
 800b0d6:	1c43      	adds	r3, r0, #1
 800b0d8:	d1f3      	bne.n	800b0c2 <__sfputs_r+0xa>
 800b0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b0dc <_vfiprintf_r>:
 800b0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e0:	460d      	mov	r5, r1
 800b0e2:	b09d      	sub	sp, #116	@ 0x74
 800b0e4:	4614      	mov	r4, r2
 800b0e6:	4698      	mov	r8, r3
 800b0e8:	4606      	mov	r6, r0
 800b0ea:	b118      	cbz	r0, 800b0f4 <_vfiprintf_r+0x18>
 800b0ec:	6a03      	ldr	r3, [r0, #32]
 800b0ee:	b90b      	cbnz	r3, 800b0f4 <_vfiprintf_r+0x18>
 800b0f0:	f7fe f8a2 	bl	8009238 <__sinit>
 800b0f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0f6:	07d9      	lsls	r1, r3, #31
 800b0f8:	d405      	bmi.n	800b106 <_vfiprintf_r+0x2a>
 800b0fa:	89ab      	ldrh	r3, [r5, #12]
 800b0fc:	059a      	lsls	r2, r3, #22
 800b0fe:	d402      	bmi.n	800b106 <_vfiprintf_r+0x2a>
 800b100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b102:	f7fe fa10 	bl	8009526 <__retarget_lock_acquire_recursive>
 800b106:	89ab      	ldrh	r3, [r5, #12]
 800b108:	071b      	lsls	r3, r3, #28
 800b10a:	d501      	bpl.n	800b110 <_vfiprintf_r+0x34>
 800b10c:	692b      	ldr	r3, [r5, #16]
 800b10e:	b99b      	cbnz	r3, 800b138 <_vfiprintf_r+0x5c>
 800b110:	4629      	mov	r1, r5
 800b112:	4630      	mov	r0, r6
 800b114:	f000 f938 	bl	800b388 <__swsetup_r>
 800b118:	b170      	cbz	r0, 800b138 <_vfiprintf_r+0x5c>
 800b11a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b11c:	07dc      	lsls	r4, r3, #31
 800b11e:	d504      	bpl.n	800b12a <_vfiprintf_r+0x4e>
 800b120:	f04f 30ff 	mov.w	r0, #4294967295
 800b124:	b01d      	add	sp, #116	@ 0x74
 800b126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b12a:	89ab      	ldrh	r3, [r5, #12]
 800b12c:	0598      	lsls	r0, r3, #22
 800b12e:	d4f7      	bmi.n	800b120 <_vfiprintf_r+0x44>
 800b130:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b132:	f7fe f9f9 	bl	8009528 <__retarget_lock_release_recursive>
 800b136:	e7f3      	b.n	800b120 <_vfiprintf_r+0x44>
 800b138:	2300      	movs	r3, #0
 800b13a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b13c:	2320      	movs	r3, #32
 800b13e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b142:	f8cd 800c 	str.w	r8, [sp, #12]
 800b146:	2330      	movs	r3, #48	@ 0x30
 800b148:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b2f8 <_vfiprintf_r+0x21c>
 800b14c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b150:	f04f 0901 	mov.w	r9, #1
 800b154:	4623      	mov	r3, r4
 800b156:	469a      	mov	sl, r3
 800b158:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b15c:	b10a      	cbz	r2, 800b162 <_vfiprintf_r+0x86>
 800b15e:	2a25      	cmp	r2, #37	@ 0x25
 800b160:	d1f9      	bne.n	800b156 <_vfiprintf_r+0x7a>
 800b162:	ebba 0b04 	subs.w	fp, sl, r4
 800b166:	d00b      	beq.n	800b180 <_vfiprintf_r+0xa4>
 800b168:	465b      	mov	r3, fp
 800b16a:	4622      	mov	r2, r4
 800b16c:	4629      	mov	r1, r5
 800b16e:	4630      	mov	r0, r6
 800b170:	f7ff ffa2 	bl	800b0b8 <__sfputs_r>
 800b174:	3001      	adds	r0, #1
 800b176:	f000 80a7 	beq.w	800b2c8 <_vfiprintf_r+0x1ec>
 800b17a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b17c:	445a      	add	r2, fp
 800b17e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b180:	f89a 3000 	ldrb.w	r3, [sl]
 800b184:	2b00      	cmp	r3, #0
 800b186:	f000 809f 	beq.w	800b2c8 <_vfiprintf_r+0x1ec>
 800b18a:	2300      	movs	r3, #0
 800b18c:	f04f 32ff 	mov.w	r2, #4294967295
 800b190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b194:	f10a 0a01 	add.w	sl, sl, #1
 800b198:	9304      	str	r3, [sp, #16]
 800b19a:	9307      	str	r3, [sp, #28]
 800b19c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b1a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b1a2:	4654      	mov	r4, sl
 800b1a4:	2205      	movs	r2, #5
 800b1a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1aa:	4853      	ldr	r0, [pc, #332]	@ (800b2f8 <_vfiprintf_r+0x21c>)
 800b1ac:	f7f5 f810 	bl	80001d0 <memchr>
 800b1b0:	9a04      	ldr	r2, [sp, #16]
 800b1b2:	b9d8      	cbnz	r0, 800b1ec <_vfiprintf_r+0x110>
 800b1b4:	06d1      	lsls	r1, r2, #27
 800b1b6:	bf44      	itt	mi
 800b1b8:	2320      	movmi	r3, #32
 800b1ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1be:	0713      	lsls	r3, r2, #28
 800b1c0:	bf44      	itt	mi
 800b1c2:	232b      	movmi	r3, #43	@ 0x2b
 800b1c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1ce:	d015      	beq.n	800b1fc <_vfiprintf_r+0x120>
 800b1d0:	9a07      	ldr	r2, [sp, #28]
 800b1d2:	4654      	mov	r4, sl
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	f04f 0c0a 	mov.w	ip, #10
 800b1da:	4621      	mov	r1, r4
 800b1dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1e0:	3b30      	subs	r3, #48	@ 0x30
 800b1e2:	2b09      	cmp	r3, #9
 800b1e4:	d94b      	bls.n	800b27e <_vfiprintf_r+0x1a2>
 800b1e6:	b1b0      	cbz	r0, 800b216 <_vfiprintf_r+0x13a>
 800b1e8:	9207      	str	r2, [sp, #28]
 800b1ea:	e014      	b.n	800b216 <_vfiprintf_r+0x13a>
 800b1ec:	eba0 0308 	sub.w	r3, r0, r8
 800b1f0:	fa09 f303 	lsl.w	r3, r9, r3
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	9304      	str	r3, [sp, #16]
 800b1f8:	46a2      	mov	sl, r4
 800b1fa:	e7d2      	b.n	800b1a2 <_vfiprintf_r+0xc6>
 800b1fc:	9b03      	ldr	r3, [sp, #12]
 800b1fe:	1d19      	adds	r1, r3, #4
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	9103      	str	r1, [sp, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	bfbb      	ittet	lt
 800b208:	425b      	neglt	r3, r3
 800b20a:	f042 0202 	orrlt.w	r2, r2, #2
 800b20e:	9307      	strge	r3, [sp, #28]
 800b210:	9307      	strlt	r3, [sp, #28]
 800b212:	bfb8      	it	lt
 800b214:	9204      	strlt	r2, [sp, #16]
 800b216:	7823      	ldrb	r3, [r4, #0]
 800b218:	2b2e      	cmp	r3, #46	@ 0x2e
 800b21a:	d10a      	bne.n	800b232 <_vfiprintf_r+0x156>
 800b21c:	7863      	ldrb	r3, [r4, #1]
 800b21e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b220:	d132      	bne.n	800b288 <_vfiprintf_r+0x1ac>
 800b222:	9b03      	ldr	r3, [sp, #12]
 800b224:	1d1a      	adds	r2, r3, #4
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	9203      	str	r2, [sp, #12]
 800b22a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b22e:	3402      	adds	r4, #2
 800b230:	9305      	str	r3, [sp, #20]
 800b232:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b308 <_vfiprintf_r+0x22c>
 800b236:	7821      	ldrb	r1, [r4, #0]
 800b238:	2203      	movs	r2, #3
 800b23a:	4650      	mov	r0, sl
 800b23c:	f7f4 ffc8 	bl	80001d0 <memchr>
 800b240:	b138      	cbz	r0, 800b252 <_vfiprintf_r+0x176>
 800b242:	9b04      	ldr	r3, [sp, #16]
 800b244:	eba0 000a 	sub.w	r0, r0, sl
 800b248:	2240      	movs	r2, #64	@ 0x40
 800b24a:	4082      	lsls	r2, r0
 800b24c:	4313      	orrs	r3, r2
 800b24e:	3401      	adds	r4, #1
 800b250:	9304      	str	r3, [sp, #16]
 800b252:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b256:	4829      	ldr	r0, [pc, #164]	@ (800b2fc <_vfiprintf_r+0x220>)
 800b258:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b25c:	2206      	movs	r2, #6
 800b25e:	f7f4 ffb7 	bl	80001d0 <memchr>
 800b262:	2800      	cmp	r0, #0
 800b264:	d03f      	beq.n	800b2e6 <_vfiprintf_r+0x20a>
 800b266:	4b26      	ldr	r3, [pc, #152]	@ (800b300 <_vfiprintf_r+0x224>)
 800b268:	bb1b      	cbnz	r3, 800b2b2 <_vfiprintf_r+0x1d6>
 800b26a:	9b03      	ldr	r3, [sp, #12]
 800b26c:	3307      	adds	r3, #7
 800b26e:	f023 0307 	bic.w	r3, r3, #7
 800b272:	3308      	adds	r3, #8
 800b274:	9303      	str	r3, [sp, #12]
 800b276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b278:	443b      	add	r3, r7
 800b27a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b27c:	e76a      	b.n	800b154 <_vfiprintf_r+0x78>
 800b27e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b282:	460c      	mov	r4, r1
 800b284:	2001      	movs	r0, #1
 800b286:	e7a8      	b.n	800b1da <_vfiprintf_r+0xfe>
 800b288:	2300      	movs	r3, #0
 800b28a:	3401      	adds	r4, #1
 800b28c:	9305      	str	r3, [sp, #20]
 800b28e:	4619      	mov	r1, r3
 800b290:	f04f 0c0a 	mov.w	ip, #10
 800b294:	4620      	mov	r0, r4
 800b296:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b29a:	3a30      	subs	r2, #48	@ 0x30
 800b29c:	2a09      	cmp	r2, #9
 800b29e:	d903      	bls.n	800b2a8 <_vfiprintf_r+0x1cc>
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d0c6      	beq.n	800b232 <_vfiprintf_r+0x156>
 800b2a4:	9105      	str	r1, [sp, #20]
 800b2a6:	e7c4      	b.n	800b232 <_vfiprintf_r+0x156>
 800b2a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e7f0      	b.n	800b294 <_vfiprintf_r+0x1b8>
 800b2b2:	ab03      	add	r3, sp, #12
 800b2b4:	9300      	str	r3, [sp, #0]
 800b2b6:	462a      	mov	r2, r5
 800b2b8:	4b12      	ldr	r3, [pc, #72]	@ (800b304 <_vfiprintf_r+0x228>)
 800b2ba:	a904      	add	r1, sp, #16
 800b2bc:	4630      	mov	r0, r6
 800b2be:	f7fd fb79 	bl	80089b4 <_printf_float>
 800b2c2:	4607      	mov	r7, r0
 800b2c4:	1c78      	adds	r0, r7, #1
 800b2c6:	d1d6      	bne.n	800b276 <_vfiprintf_r+0x19a>
 800b2c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2ca:	07d9      	lsls	r1, r3, #31
 800b2cc:	d405      	bmi.n	800b2da <_vfiprintf_r+0x1fe>
 800b2ce:	89ab      	ldrh	r3, [r5, #12]
 800b2d0:	059a      	lsls	r2, r3, #22
 800b2d2:	d402      	bmi.n	800b2da <_vfiprintf_r+0x1fe>
 800b2d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2d6:	f7fe f927 	bl	8009528 <__retarget_lock_release_recursive>
 800b2da:	89ab      	ldrh	r3, [r5, #12]
 800b2dc:	065b      	lsls	r3, r3, #25
 800b2de:	f53f af1f 	bmi.w	800b120 <_vfiprintf_r+0x44>
 800b2e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2e4:	e71e      	b.n	800b124 <_vfiprintf_r+0x48>
 800b2e6:	ab03      	add	r3, sp, #12
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	462a      	mov	r2, r5
 800b2ec:	4b05      	ldr	r3, [pc, #20]	@ (800b304 <_vfiprintf_r+0x228>)
 800b2ee:	a904      	add	r1, sp, #16
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	f7fd fdf7 	bl	8008ee4 <_printf_i>
 800b2f6:	e7e4      	b.n	800b2c2 <_vfiprintf_r+0x1e6>
 800b2f8:	0800b7de 	.word	0x0800b7de
 800b2fc:	0800b7e8 	.word	0x0800b7e8
 800b300:	080089b5 	.word	0x080089b5
 800b304:	0800b0b9 	.word	0x0800b0b9
 800b308:	0800b7e4 	.word	0x0800b7e4

0800b30c <__swbuf_r>:
 800b30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b30e:	460e      	mov	r6, r1
 800b310:	4614      	mov	r4, r2
 800b312:	4605      	mov	r5, r0
 800b314:	b118      	cbz	r0, 800b31e <__swbuf_r+0x12>
 800b316:	6a03      	ldr	r3, [r0, #32]
 800b318:	b90b      	cbnz	r3, 800b31e <__swbuf_r+0x12>
 800b31a:	f7fd ff8d 	bl	8009238 <__sinit>
 800b31e:	69a3      	ldr	r3, [r4, #24]
 800b320:	60a3      	str	r3, [r4, #8]
 800b322:	89a3      	ldrh	r3, [r4, #12]
 800b324:	071a      	lsls	r2, r3, #28
 800b326:	d501      	bpl.n	800b32c <__swbuf_r+0x20>
 800b328:	6923      	ldr	r3, [r4, #16]
 800b32a:	b943      	cbnz	r3, 800b33e <__swbuf_r+0x32>
 800b32c:	4621      	mov	r1, r4
 800b32e:	4628      	mov	r0, r5
 800b330:	f000 f82a 	bl	800b388 <__swsetup_r>
 800b334:	b118      	cbz	r0, 800b33e <__swbuf_r+0x32>
 800b336:	f04f 37ff 	mov.w	r7, #4294967295
 800b33a:	4638      	mov	r0, r7
 800b33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	6922      	ldr	r2, [r4, #16]
 800b342:	1a98      	subs	r0, r3, r2
 800b344:	6963      	ldr	r3, [r4, #20]
 800b346:	b2f6      	uxtb	r6, r6
 800b348:	4283      	cmp	r3, r0
 800b34a:	4637      	mov	r7, r6
 800b34c:	dc05      	bgt.n	800b35a <__swbuf_r+0x4e>
 800b34e:	4621      	mov	r1, r4
 800b350:	4628      	mov	r0, r5
 800b352:	f7ff fda7 	bl	800aea4 <_fflush_r>
 800b356:	2800      	cmp	r0, #0
 800b358:	d1ed      	bne.n	800b336 <__swbuf_r+0x2a>
 800b35a:	68a3      	ldr	r3, [r4, #8]
 800b35c:	3b01      	subs	r3, #1
 800b35e:	60a3      	str	r3, [r4, #8]
 800b360:	6823      	ldr	r3, [r4, #0]
 800b362:	1c5a      	adds	r2, r3, #1
 800b364:	6022      	str	r2, [r4, #0]
 800b366:	701e      	strb	r6, [r3, #0]
 800b368:	6962      	ldr	r2, [r4, #20]
 800b36a:	1c43      	adds	r3, r0, #1
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d004      	beq.n	800b37a <__swbuf_r+0x6e>
 800b370:	89a3      	ldrh	r3, [r4, #12]
 800b372:	07db      	lsls	r3, r3, #31
 800b374:	d5e1      	bpl.n	800b33a <__swbuf_r+0x2e>
 800b376:	2e0a      	cmp	r6, #10
 800b378:	d1df      	bne.n	800b33a <__swbuf_r+0x2e>
 800b37a:	4621      	mov	r1, r4
 800b37c:	4628      	mov	r0, r5
 800b37e:	f7ff fd91 	bl	800aea4 <_fflush_r>
 800b382:	2800      	cmp	r0, #0
 800b384:	d0d9      	beq.n	800b33a <__swbuf_r+0x2e>
 800b386:	e7d6      	b.n	800b336 <__swbuf_r+0x2a>

0800b388 <__swsetup_r>:
 800b388:	b538      	push	{r3, r4, r5, lr}
 800b38a:	4b29      	ldr	r3, [pc, #164]	@ (800b430 <__swsetup_r+0xa8>)
 800b38c:	4605      	mov	r5, r0
 800b38e:	6818      	ldr	r0, [r3, #0]
 800b390:	460c      	mov	r4, r1
 800b392:	b118      	cbz	r0, 800b39c <__swsetup_r+0x14>
 800b394:	6a03      	ldr	r3, [r0, #32]
 800b396:	b90b      	cbnz	r3, 800b39c <__swsetup_r+0x14>
 800b398:	f7fd ff4e 	bl	8009238 <__sinit>
 800b39c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3a0:	0719      	lsls	r1, r3, #28
 800b3a2:	d422      	bmi.n	800b3ea <__swsetup_r+0x62>
 800b3a4:	06da      	lsls	r2, r3, #27
 800b3a6:	d407      	bmi.n	800b3b8 <__swsetup_r+0x30>
 800b3a8:	2209      	movs	r2, #9
 800b3aa:	602a      	str	r2, [r5, #0]
 800b3ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3b0:	81a3      	strh	r3, [r4, #12]
 800b3b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b6:	e033      	b.n	800b420 <__swsetup_r+0x98>
 800b3b8:	0758      	lsls	r0, r3, #29
 800b3ba:	d512      	bpl.n	800b3e2 <__swsetup_r+0x5a>
 800b3bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b3be:	b141      	cbz	r1, 800b3d2 <__swsetup_r+0x4a>
 800b3c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b3c4:	4299      	cmp	r1, r3
 800b3c6:	d002      	beq.n	800b3ce <__swsetup_r+0x46>
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	f7fe ff15 	bl	800a1f8 <_free_r>
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b3d2:	89a3      	ldrh	r3, [r4, #12]
 800b3d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b3d8:	81a3      	strh	r3, [r4, #12]
 800b3da:	2300      	movs	r3, #0
 800b3dc:	6063      	str	r3, [r4, #4]
 800b3de:	6923      	ldr	r3, [r4, #16]
 800b3e0:	6023      	str	r3, [r4, #0]
 800b3e2:	89a3      	ldrh	r3, [r4, #12]
 800b3e4:	f043 0308 	orr.w	r3, r3, #8
 800b3e8:	81a3      	strh	r3, [r4, #12]
 800b3ea:	6923      	ldr	r3, [r4, #16]
 800b3ec:	b94b      	cbnz	r3, 800b402 <__swsetup_r+0x7a>
 800b3ee:	89a3      	ldrh	r3, [r4, #12]
 800b3f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b3f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3f8:	d003      	beq.n	800b402 <__swsetup_r+0x7a>
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	4628      	mov	r0, r5
 800b3fe:	f000 f883 	bl	800b508 <__smakebuf_r>
 800b402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b406:	f013 0201 	ands.w	r2, r3, #1
 800b40a:	d00a      	beq.n	800b422 <__swsetup_r+0x9a>
 800b40c:	2200      	movs	r2, #0
 800b40e:	60a2      	str	r2, [r4, #8]
 800b410:	6962      	ldr	r2, [r4, #20]
 800b412:	4252      	negs	r2, r2
 800b414:	61a2      	str	r2, [r4, #24]
 800b416:	6922      	ldr	r2, [r4, #16]
 800b418:	b942      	cbnz	r2, 800b42c <__swsetup_r+0xa4>
 800b41a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b41e:	d1c5      	bne.n	800b3ac <__swsetup_r+0x24>
 800b420:	bd38      	pop	{r3, r4, r5, pc}
 800b422:	0799      	lsls	r1, r3, #30
 800b424:	bf58      	it	pl
 800b426:	6962      	ldrpl	r2, [r4, #20]
 800b428:	60a2      	str	r2, [r4, #8]
 800b42a:	e7f4      	b.n	800b416 <__swsetup_r+0x8e>
 800b42c:	2000      	movs	r0, #0
 800b42e:	e7f7      	b.n	800b420 <__swsetup_r+0x98>
 800b430:	20000074 	.word	0x20000074

0800b434 <_raise_r>:
 800b434:	291f      	cmp	r1, #31
 800b436:	b538      	push	{r3, r4, r5, lr}
 800b438:	4605      	mov	r5, r0
 800b43a:	460c      	mov	r4, r1
 800b43c:	d904      	bls.n	800b448 <_raise_r+0x14>
 800b43e:	2316      	movs	r3, #22
 800b440:	6003      	str	r3, [r0, #0]
 800b442:	f04f 30ff 	mov.w	r0, #4294967295
 800b446:	bd38      	pop	{r3, r4, r5, pc}
 800b448:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b44a:	b112      	cbz	r2, 800b452 <_raise_r+0x1e>
 800b44c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b450:	b94b      	cbnz	r3, 800b466 <_raise_r+0x32>
 800b452:	4628      	mov	r0, r5
 800b454:	f000 f830 	bl	800b4b8 <_getpid_r>
 800b458:	4622      	mov	r2, r4
 800b45a:	4601      	mov	r1, r0
 800b45c:	4628      	mov	r0, r5
 800b45e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b462:	f000 b817 	b.w	800b494 <_kill_r>
 800b466:	2b01      	cmp	r3, #1
 800b468:	d00a      	beq.n	800b480 <_raise_r+0x4c>
 800b46a:	1c59      	adds	r1, r3, #1
 800b46c:	d103      	bne.n	800b476 <_raise_r+0x42>
 800b46e:	2316      	movs	r3, #22
 800b470:	6003      	str	r3, [r0, #0]
 800b472:	2001      	movs	r0, #1
 800b474:	e7e7      	b.n	800b446 <_raise_r+0x12>
 800b476:	2100      	movs	r1, #0
 800b478:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b47c:	4620      	mov	r0, r4
 800b47e:	4798      	blx	r3
 800b480:	2000      	movs	r0, #0
 800b482:	e7e0      	b.n	800b446 <_raise_r+0x12>

0800b484 <raise>:
 800b484:	4b02      	ldr	r3, [pc, #8]	@ (800b490 <raise+0xc>)
 800b486:	4601      	mov	r1, r0
 800b488:	6818      	ldr	r0, [r3, #0]
 800b48a:	f7ff bfd3 	b.w	800b434 <_raise_r>
 800b48e:	bf00      	nop
 800b490:	20000074 	.word	0x20000074

0800b494 <_kill_r>:
 800b494:	b538      	push	{r3, r4, r5, lr}
 800b496:	4d07      	ldr	r5, [pc, #28]	@ (800b4b4 <_kill_r+0x20>)
 800b498:	2300      	movs	r3, #0
 800b49a:	4604      	mov	r4, r0
 800b49c:	4608      	mov	r0, r1
 800b49e:	4611      	mov	r1, r2
 800b4a0:	602b      	str	r3, [r5, #0]
 800b4a2:	f7f6 fd61 	bl	8001f68 <_kill>
 800b4a6:	1c43      	adds	r3, r0, #1
 800b4a8:	d102      	bne.n	800b4b0 <_kill_r+0x1c>
 800b4aa:	682b      	ldr	r3, [r5, #0]
 800b4ac:	b103      	cbz	r3, 800b4b0 <_kill_r+0x1c>
 800b4ae:	6023      	str	r3, [r4, #0]
 800b4b0:	bd38      	pop	{r3, r4, r5, pc}
 800b4b2:	bf00      	nop
 800b4b4:	2000492c 	.word	0x2000492c

0800b4b8 <_getpid_r>:
 800b4b8:	f7f6 bd4e 	b.w	8001f58 <_getpid>

0800b4bc <__swhatbuf_r>:
 800b4bc:	b570      	push	{r4, r5, r6, lr}
 800b4be:	460c      	mov	r4, r1
 800b4c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4c4:	2900      	cmp	r1, #0
 800b4c6:	b096      	sub	sp, #88	@ 0x58
 800b4c8:	4615      	mov	r5, r2
 800b4ca:	461e      	mov	r6, r3
 800b4cc:	da0d      	bge.n	800b4ea <__swhatbuf_r+0x2e>
 800b4ce:	89a3      	ldrh	r3, [r4, #12]
 800b4d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b4d4:	f04f 0100 	mov.w	r1, #0
 800b4d8:	bf14      	ite	ne
 800b4da:	2340      	movne	r3, #64	@ 0x40
 800b4dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b4e0:	2000      	movs	r0, #0
 800b4e2:	6031      	str	r1, [r6, #0]
 800b4e4:	602b      	str	r3, [r5, #0]
 800b4e6:	b016      	add	sp, #88	@ 0x58
 800b4e8:	bd70      	pop	{r4, r5, r6, pc}
 800b4ea:	466a      	mov	r2, sp
 800b4ec:	f000 f848 	bl	800b580 <_fstat_r>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	dbec      	blt.n	800b4ce <__swhatbuf_r+0x12>
 800b4f4:	9901      	ldr	r1, [sp, #4]
 800b4f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b4fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b4fe:	4259      	negs	r1, r3
 800b500:	4159      	adcs	r1, r3
 800b502:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b506:	e7eb      	b.n	800b4e0 <__swhatbuf_r+0x24>

0800b508 <__smakebuf_r>:
 800b508:	898b      	ldrh	r3, [r1, #12]
 800b50a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b50c:	079d      	lsls	r5, r3, #30
 800b50e:	4606      	mov	r6, r0
 800b510:	460c      	mov	r4, r1
 800b512:	d507      	bpl.n	800b524 <__smakebuf_r+0x1c>
 800b514:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b518:	6023      	str	r3, [r4, #0]
 800b51a:	6123      	str	r3, [r4, #16]
 800b51c:	2301      	movs	r3, #1
 800b51e:	6163      	str	r3, [r4, #20]
 800b520:	b003      	add	sp, #12
 800b522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b524:	ab01      	add	r3, sp, #4
 800b526:	466a      	mov	r2, sp
 800b528:	f7ff ffc8 	bl	800b4bc <__swhatbuf_r>
 800b52c:	9f00      	ldr	r7, [sp, #0]
 800b52e:	4605      	mov	r5, r0
 800b530:	4639      	mov	r1, r7
 800b532:	4630      	mov	r0, r6
 800b534:	f7fe fed4 	bl	800a2e0 <_malloc_r>
 800b538:	b948      	cbnz	r0, 800b54e <__smakebuf_r+0x46>
 800b53a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b53e:	059a      	lsls	r2, r3, #22
 800b540:	d4ee      	bmi.n	800b520 <__smakebuf_r+0x18>
 800b542:	f023 0303 	bic.w	r3, r3, #3
 800b546:	f043 0302 	orr.w	r3, r3, #2
 800b54a:	81a3      	strh	r3, [r4, #12]
 800b54c:	e7e2      	b.n	800b514 <__smakebuf_r+0xc>
 800b54e:	89a3      	ldrh	r3, [r4, #12]
 800b550:	6020      	str	r0, [r4, #0]
 800b552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b556:	81a3      	strh	r3, [r4, #12]
 800b558:	9b01      	ldr	r3, [sp, #4]
 800b55a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b55e:	b15b      	cbz	r3, 800b578 <__smakebuf_r+0x70>
 800b560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b564:	4630      	mov	r0, r6
 800b566:	f000 f81d 	bl	800b5a4 <_isatty_r>
 800b56a:	b128      	cbz	r0, 800b578 <__smakebuf_r+0x70>
 800b56c:	89a3      	ldrh	r3, [r4, #12]
 800b56e:	f023 0303 	bic.w	r3, r3, #3
 800b572:	f043 0301 	orr.w	r3, r3, #1
 800b576:	81a3      	strh	r3, [r4, #12]
 800b578:	89a3      	ldrh	r3, [r4, #12]
 800b57a:	431d      	orrs	r5, r3
 800b57c:	81a5      	strh	r5, [r4, #12]
 800b57e:	e7cf      	b.n	800b520 <__smakebuf_r+0x18>

0800b580 <_fstat_r>:
 800b580:	b538      	push	{r3, r4, r5, lr}
 800b582:	4d07      	ldr	r5, [pc, #28]	@ (800b5a0 <_fstat_r+0x20>)
 800b584:	2300      	movs	r3, #0
 800b586:	4604      	mov	r4, r0
 800b588:	4608      	mov	r0, r1
 800b58a:	4611      	mov	r1, r2
 800b58c:	602b      	str	r3, [r5, #0]
 800b58e:	f7f6 fd4b 	bl	8002028 <_fstat>
 800b592:	1c43      	adds	r3, r0, #1
 800b594:	d102      	bne.n	800b59c <_fstat_r+0x1c>
 800b596:	682b      	ldr	r3, [r5, #0]
 800b598:	b103      	cbz	r3, 800b59c <_fstat_r+0x1c>
 800b59a:	6023      	str	r3, [r4, #0]
 800b59c:	bd38      	pop	{r3, r4, r5, pc}
 800b59e:	bf00      	nop
 800b5a0:	2000492c 	.word	0x2000492c

0800b5a4 <_isatty_r>:
 800b5a4:	b538      	push	{r3, r4, r5, lr}
 800b5a6:	4d06      	ldr	r5, [pc, #24]	@ (800b5c0 <_isatty_r+0x1c>)
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	4604      	mov	r4, r0
 800b5ac:	4608      	mov	r0, r1
 800b5ae:	602b      	str	r3, [r5, #0]
 800b5b0:	f7f6 fd4a 	bl	8002048 <_isatty>
 800b5b4:	1c43      	adds	r3, r0, #1
 800b5b6:	d102      	bne.n	800b5be <_isatty_r+0x1a>
 800b5b8:	682b      	ldr	r3, [r5, #0]
 800b5ba:	b103      	cbz	r3, 800b5be <_isatty_r+0x1a>
 800b5bc:	6023      	str	r3, [r4, #0]
 800b5be:	bd38      	pop	{r3, r4, r5, pc}
 800b5c0:	2000492c 	.word	0x2000492c

0800b5c4 <_init>:
 800b5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c6:	bf00      	nop
 800b5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ca:	bc08      	pop	{r3}
 800b5cc:	469e      	mov	lr, r3
 800b5ce:	4770      	bx	lr

0800b5d0 <_fini>:
 800b5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d2:	bf00      	nop
 800b5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5d6:	bc08      	pop	{r3}
 800b5d8:	469e      	mov	lr, r3
 800b5da:	4770      	bx	lr
